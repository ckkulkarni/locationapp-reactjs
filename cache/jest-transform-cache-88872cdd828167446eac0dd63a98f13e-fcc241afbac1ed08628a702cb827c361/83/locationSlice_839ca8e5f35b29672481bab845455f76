aef05d231fc4cd1d072b94f03470ae46
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setCurrentLocation = exports.removePreviousLocation = exports.locationSlice = exports.default = exports.clearPreviousLocations = exports.addPreviousLocation = void 0;
var _toolkit = require("@reduxjs/toolkit");
const initialState = {
  currentLocation: {
    address: "",
    latitude: 0,
    longitude: 0,
    dateTime: ""
  },
  previousLocations: []
};
const locationSlice = (0, _toolkit.createSlice)({
  name: "location",
  initialState,
  reducers: {
    setCurrentLocation: (state, action) => {
      const {
        address,
        latitude,
        longitude,
        dateTime
      } = action.payload;
      state.currentLocation = {
        address,
        latitude,
        longitude,
        dateTime
      };
    },
    addPreviousLocation: (state, action) => {
      const location = action.payload;
      state.previousLocations.push(location);
    },
    clearPreviousLocations: state => {
      state.previousLocations = [];
    },
    removePreviousLocation: (state, action) => {
      const index = action.payload;
      state.previousLocations.splice(index, 1);
    }
  }
});
exports.locationSlice = locationSlice;
const {
  setCurrentLocation,
  addPreviousLocation,
  clearPreviousLocations,
  removePreviousLocation
} = locationSlice.actions;
exports.removePreviousLocation = removePreviousLocation;
exports.clearPreviousLocations = clearPreviousLocations;
exports.addPreviousLocation = addPreviousLocation;
exports.setCurrentLocation = setCurrentLocation;
var _default = locationSlice.reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJhZGRyZXNzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJkYXRlVGltZSIsInByZXZpb3VzTG9jYXRpb25zIiwibG9jYXRpb25TbGljZSIsImNyZWF0ZVNsaWNlIiwibmFtZSIsInJlZHVjZXJzIiwic2V0Q3VycmVudExvY2F0aW9uIiwic3RhdGUiLCJhY3Rpb24iLCJwYXlsb2FkIiwiYWRkUHJldmlvdXNMb2NhdGlvbiIsImxvY2F0aW9uIiwicHVzaCIsImNsZWFyUHJldmlvdXNMb2NhdGlvbnMiLCJyZW1vdmVQcmV2aW91c0xvY2F0aW9uIiwiaW5kZXgiLCJzcGxpY2UiLCJleHBvcnRzIiwiYWN0aW9ucyIsIl9kZWZhdWx0IiwicmVkdWNlciIsImRlZmF1bHQiXSwic291cmNlcyI6WyJsb2NhdGlvblNsaWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBQYXlsb2FkQWN0aW9uIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuXHJcbmludGVyZmFjZSBMb2NhdGlvblN0YXRlIHtcclxuICBjdXJyZW50TG9jYXRpb246IHtcclxuICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcclxuICAgIGRhdGVUaW1lOiBzdHJpbmc7XHJcbiAgfTtcclxuICBwcmV2aW91c0xvY2F0aW9uczogYW55W107XHJcbn1cclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZTogTG9jYXRpb25TdGF0ZSA9IHtcclxuICBjdXJyZW50TG9jYXRpb246IHtcclxuICAgIGFkZHJlc3M6IFwiXCIsXHJcbiAgICBsYXRpdHVkZTogMCxcclxuICAgIGxvbmdpdHVkZTogMCxcclxuICAgIGRhdGVUaW1lOiBcIlwiLFxyXG4gIH0sXHJcbiAgcHJldmlvdXNMb2NhdGlvbnM6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvY2F0aW9uU2xpY2UgPSBjcmVhdGVTbGljZSh7XHJcbiAgbmFtZTogXCJsb2NhdGlvblwiLFxyXG4gIGluaXRpYWxTdGF0ZSxcclxuICByZWR1Y2Vyczoge1xyXG4gICAgc2V0Q3VycmVudExvY2F0aW9uOiAoXHJcbiAgICAgIHN0YXRlLFxyXG4gICAgICBhY3Rpb246IFBheWxvYWRBY3Rpb248e1xyXG4gICAgICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIGRhdGVUaW1lOiBzdHJpbmc7XHJcbiAgICAgIH0+XHJcbiAgICApID0+IHtcclxuICAgICAgY29uc3QgeyBhZGRyZXNzLCBsYXRpdHVkZSwgbG9uZ2l0dWRlLCBkYXRlVGltZSB9ID0gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgIHN0YXRlLmN1cnJlbnRMb2NhdGlvbiA9IHsgYWRkcmVzcywgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZVRpbWUgfTtcclxuICAgIH0sXHJcbiAgICBhZGRQcmV2aW91c0xvY2F0aW9uOiAoXHJcbiAgICAgIHN0YXRlLFxyXG4gICAgICBhY3Rpb246IFBheWxvYWRBY3Rpb248e1xyXG4gICAgICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIGxvbmdpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIGRhdGVUaW1lOiBzdHJpbmc7XHJcbiAgICAgIH0+XHJcbiAgICApID0+IHtcclxuICAgICAgY29uc3QgbG9jYXRpb24gPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgc3RhdGUucHJldmlvdXNMb2NhdGlvbnMucHVzaChsb2NhdGlvbik7XHJcbiAgICB9LFxyXG4gICAgY2xlYXJQcmV2aW91c0xvY2F0aW9uczogKHN0YXRlKSA9PiB7XHJcbiAgICAgIHN0YXRlLnByZXZpb3VzTG9jYXRpb25zID0gW107XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlUHJldmlvdXNMb2NhdGlvbjogKHN0YXRlLCBhY3Rpb246IFBheWxvYWRBY3Rpb248bnVtYmVyPikgPT4ge1xyXG4gICAgICBjb25zdCBpbmRleCA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgICBzdGF0ZS5wcmV2aW91c0xvY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgc2V0Q3VycmVudExvY2F0aW9uLFxyXG4gIGFkZFByZXZpb3VzTG9jYXRpb24sXHJcbiAgY2xlYXJQcmV2aW91c0xvY2F0aW9ucyxcclxuICByZW1vdmVQcmV2aW91c0xvY2F0aW9uLFxyXG59ID0gbG9jYXRpb25TbGljZS5hY3Rpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9jYXRpb25TbGljZS5yZWR1Y2VyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQVlBLE1BQU1DLFlBQTJCLEdBQUc7RUFDbENDLGVBQWUsRUFBRTtJQUNmQyxPQUFPLEVBQUUsRUFBRTtJQUNYQyxRQUFRLEVBQUUsQ0FBQztJQUNYQyxTQUFTLEVBQUUsQ0FBQztJQUNaQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0RDLGlCQUFpQixFQUFFO0FBQ3JCLENBQUM7QUFFTSxNQUFNQyxhQUFhLEdBQUcsSUFBQUMsb0JBQVcsRUFBQztFQUN2Q0MsSUFBSSxFQUFFLFVBQVU7RUFDaEJULFlBQVk7RUFDWlUsUUFBUSxFQUFFO0lBQ1JDLGtCQUFrQixFQUFFQSxDQUNsQkMsS0FBSyxFQUNMQyxNQUtFLEtBQ0M7TUFDSCxNQUFNO1FBQUVYLE9BQU87UUFBRUMsUUFBUTtRQUFFQyxTQUFTO1FBQUVDO01BQVMsQ0FBQyxHQUFHUSxNQUFNLENBQUNDLE9BQU87TUFDakVGLEtBQUssQ0FBQ1gsZUFBZSxHQUFHO1FBQUVDLE9BQU87UUFBRUMsUUFBUTtRQUFFQyxTQUFTO1FBQUVDO01BQVMsQ0FBQztJQUNwRSxDQUFDO0lBQ0RVLG1CQUFtQixFQUFFQSxDQUNuQkgsS0FBSyxFQUNMQyxNQUtFLEtBQ0M7TUFDSCxNQUFNRyxRQUFRLEdBQUdILE1BQU0sQ0FBQ0MsT0FBTztNQUMvQkYsS0FBSyxDQUFDTixpQkFBaUIsQ0FBQ1csSUFBSSxDQUFDRCxRQUFRLENBQUM7SUFDeEMsQ0FBQztJQUNERSxzQkFBc0IsRUFBR04sS0FBSyxJQUFLO01BQ2pDQSxLQUFLLENBQUNOLGlCQUFpQixHQUFHLEVBQUU7SUFDOUIsQ0FBQztJQUNEYSxzQkFBc0IsRUFBRUEsQ0FBQ1AsS0FBSyxFQUFFQyxNQUE2QixLQUFLO01BQ2hFLE1BQU1PLEtBQUssR0FBR1AsTUFBTSxDQUFDQyxPQUFPO01BQzVCRixLQUFLLENBQUNOLGlCQUFpQixDQUFDZSxNQUFNLENBQUNELEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUM7RUFDRjtBQUNGLENBQUMsQ0FBQztBQUFDRSxPQUFBLENBQUFmLGFBQUEsR0FBQUEsYUFBQTtBQUVJLE1BQU07RUFDWEksa0JBQWtCO0VBQ2xCSSxtQkFBbUI7RUFDbkJHLHNCQUFzQjtFQUN0QkM7QUFDRixDQUFDLEdBQUdaLGFBQWEsQ0FBQ2dCLE9BQU87QUFBQ0QsT0FBQSxDQUFBSCxzQkFBQSxHQUFBQSxzQkFBQTtBQUFBRyxPQUFBLENBQUFKLHNCQUFBLEdBQUFBLHNCQUFBO0FBQUFJLE9BQUEsQ0FBQVAsbUJBQUEsR0FBQUEsbUJBQUE7QUFBQU8sT0FBQSxDQUFBWCxrQkFBQSxHQUFBQSxrQkFBQTtBQUFBLElBQUFhLFFBQUEsR0FFWGpCLGFBQWEsQ0FBQ2tCLE9BQU87QUFBQUgsT0FBQSxDQUFBSSxPQUFBLEdBQUFGLFFBQUEifQ==