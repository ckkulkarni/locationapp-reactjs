e62f54ade34433b3061c57af56ee619b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSVGOverlayElement = exports.useSVGOverlay = exports.SVGOverlay = void 0;
var _core = require("@react-leaflet/core");
var _leaflet = require("leaflet");
var _react = require("react");
var _reactDom = require("react-dom");
const useSVGOverlayElement = (0, _core.createElementHook)(function createSVGOverlay(props, context) {
  const {
    attributes,
    bounds,
    ...options
  } = props;
  const container = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  container.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
  if (attributes != null) {
    Object.keys(attributes).forEach(name => {
      container.setAttribute(name, attributes[name]);
    });
  }
  const overlay = new _leaflet.SVGOverlay(container, bounds, options);
  return (0, _core.createElementObject)(overlay, context, container);
}, _core.updateMediaOverlay);
exports.useSVGOverlayElement = useSVGOverlayElement;
const useSVGOverlay = (0, _core.createLayerHook)(useSVGOverlayElement);
exports.useSVGOverlay = useSVGOverlay;
function SVGOverlayComponent({
  children,
  ...options
}, forwardedRef) {
  const {
    instance,
    container
  } = useSVGOverlay(options).current;
  (0, _react.useImperativeHandle)(forwardedRef, () => instance);
  return container == null || children == null ? null : /*#__PURE__*/(0, _reactDom.createPortal)(children, container);
}
const SVGOverlay = /*#__PURE__*/(0, _react.forwardRef)(SVGOverlayComponent);
exports.SVGOverlay = SVGOverlay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfbGVhZmxldCIsIl9yZWFjdCIsIl9yZWFjdERvbSIsInVzZVNWR092ZXJsYXlFbGVtZW50IiwiY3JlYXRlRWxlbWVudEhvb2siLCJjcmVhdGVTVkdPdmVybGF5IiwicHJvcHMiLCJjb250ZXh0IiwiYXR0cmlidXRlcyIsImJvdW5kcyIsIm9wdGlvbnMiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibmFtZSIsIm92ZXJsYXkiLCJMZWFmbGV0U1ZHT3ZlcmxheSIsImNyZWF0ZUVsZW1lbnRPYmplY3QiLCJ1cGRhdGVNZWRpYU92ZXJsYXkiLCJleHBvcnRzIiwidXNlU1ZHT3ZlcmxheSIsImNyZWF0ZUxheWVySG9vayIsIlNWR092ZXJsYXlDb21wb25lbnQiLCJjaGlsZHJlbiIsImZvcndhcmRlZFJlZiIsImluc3RhbmNlIiwiY3VycmVudCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJjcmVhdGVQb3J0YWwiLCJTVkdPdmVybGF5IiwiZm9yd2FyZFJlZiJdLCJzb3VyY2VzIjpbIlNWR092ZXJsYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudEhvb2ssIGNyZWF0ZUVsZW1lbnRPYmplY3QsIGNyZWF0ZUxheWVySG9vaywgdXBkYXRlTWVkaWFPdmVybGF5IH0gZnJvbSAnQHJlYWN0LWxlYWZsZXQvY29yZSc7XG5pbXBvcnQgeyBTVkdPdmVybGF5IGFzIExlYWZsZXRTVkdPdmVybGF5IH0gZnJvbSAnbGVhZmxldCc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCBjb25zdCB1c2VTVkdPdmVybGF5RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRIb29rKGZ1bmN0aW9uIGNyZWF0ZVNWR092ZXJsYXkocHJvcHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMgLCBib3VuZHMgLCAuLi5vcHRpb25zIH0gPSBwcm9wcztcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyk7XG4gICAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCkge1xuICAgICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChuYW1lKT0+e1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShuYW1lLCBhdHRyaWJ1dGVzW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgTGVhZmxldFNWR092ZXJsYXkoY29udGFpbmVyLCBib3VuZHMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50T2JqZWN0KG92ZXJsYXksIGNvbnRleHQsIGNvbnRhaW5lcik7XG59LCB1cGRhdGVNZWRpYU92ZXJsYXkpO1xuZXhwb3J0IGNvbnN0IHVzZVNWR092ZXJsYXkgPSBjcmVhdGVMYXllckhvb2sodXNlU1ZHT3ZlcmxheUVsZW1lbnQpO1xuZnVuY3Rpb24gU1ZHT3ZlcmxheUNvbXBvbmVudCh7IGNoaWxkcmVuICwgLi4ub3B0aW9ucyB9LCBmb3J3YXJkZWRSZWYpIHtcbiAgICBjb25zdCB7IGluc3RhbmNlICwgY29udGFpbmVyICB9ID0gdXNlU1ZHT3ZlcmxheShvcHRpb25zKS5jdXJyZW50O1xuICAgIHVzZUltcGVyYXRpdmVIYW5kbGUoZm9yd2FyZGVkUmVmLCAoKT0+aW5zdGFuY2UpO1xuICAgIHJldHVybiBjb250YWluZXIgPT0gbnVsbCB8fCBjaGlsZHJlbiA9PSBudWxsID8gbnVsbCA6IC8qI19fUFVSRV9fKi8gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBjb250YWluZXIpO1xufVxuZXhwb3J0IGNvbnN0IFNWR092ZXJsYXkgPSAvKiNfX1BVUkVfXyovIGZvcndhcmRSZWYoU1ZHT3ZlcmxheUNvbXBvbmVudCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUNPLE1BQU1JLG9CQUFvQixHQUFHLElBQUFDLHVCQUFpQixFQUFDLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7RUFDNUYsTUFBTTtJQUFFQyxVQUFVO0lBQUdDLE1BQU07SUFBRyxHQUFHQztFQUFRLENBQUMsR0FBR0osS0FBSztFQUNsRCxNQUFNSyxTQUFTLEdBQUdDLFFBQVEsQ0FBQ0MsZUFBZSxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQztFQUMvRUYsU0FBUyxDQUFDRyxZQUFZLENBQUMsT0FBTyxFQUFFLDRCQUE0QixDQUFDO0VBQzdELElBQUlOLFVBQVUsSUFBSSxJQUFJLEVBQUU7SUFDcEJPLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixVQUFVLENBQUMsQ0FBQ1MsT0FBTyxDQUFFQyxJQUFJLElBQUc7TUFDcENQLFNBQVMsQ0FBQ0csWUFBWSxDQUFDSSxJQUFJLEVBQUVWLFVBQVUsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0VBQ047RUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsbUJBQWlCLENBQUNULFNBQVMsRUFBRUYsTUFBTSxFQUFFQyxPQUFPLENBQUM7RUFDakUsT0FBTyxJQUFBVyx5QkFBbUIsRUFBQ0YsT0FBTyxFQUFFWixPQUFPLEVBQUVJLFNBQVMsQ0FBQztBQUMzRCxDQUFDLEVBQUVXLHdCQUFrQixDQUFDO0FBQUNDLE9BQUEsQ0FBQXBCLG9CQUFBLEdBQUFBLG9CQUFBO0FBQ2hCLE1BQU1xQixhQUFhLEdBQUcsSUFBQUMscUJBQWUsRUFBQ3RCLG9CQUFvQixDQUFDO0FBQUNvQixPQUFBLENBQUFDLGFBQUEsR0FBQUEsYUFBQTtBQUNuRSxTQUFTRSxtQkFBbUJBLENBQUM7RUFBRUMsUUFBUTtFQUFHLEdBQUdqQjtBQUFRLENBQUMsRUFBRWtCLFlBQVksRUFBRTtFQUNsRSxNQUFNO0lBQUVDLFFBQVE7SUFBR2xCO0VBQVcsQ0FBQyxHQUFHYSxhQUFhLENBQUNkLE9BQU8sQ0FBQyxDQUFDb0IsT0FBTztFQUNoRSxJQUFBQywwQkFBbUIsRUFBQ0gsWUFBWSxFQUFFLE1BQUlDLFFBQVEsQ0FBQztFQUMvQyxPQUFPbEIsU0FBUyxJQUFJLElBQUksSUFBSWdCLFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLGFBQWMsSUFBQUssc0JBQVksRUFBQ0wsUUFBUSxFQUFFaEIsU0FBUyxDQUFDO0FBQ3pHO0FBQ08sTUFBTXNCLFVBQVUsR0FBRyxhQUFjLElBQUFDLGlCQUFVLEVBQUNSLG1CQUFtQixDQUFDO0FBQUNILE9BQUEsQ0FBQVUsVUFBQSxHQUFBQSxVQUFBIn0=