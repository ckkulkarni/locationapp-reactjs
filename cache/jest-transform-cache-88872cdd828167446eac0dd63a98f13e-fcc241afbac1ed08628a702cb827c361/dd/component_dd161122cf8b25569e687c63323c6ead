e5543373ee5e4b7c1f5dabc2afaf25a8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createContainerComponent = createContainerComponent;
exports.createDivOverlayComponent = createDivOverlayComponent;
exports.createLeafComponent = createLeafComponent;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _context = require("./context.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function createContainerComponent(useElement) {
  function ContainerComponent(props, forwardedRef) {
    const {
      instance,
      context
    } = useElement(props).current;
    (0, _react.useImperativeHandle)(forwardedRef, () => instance);
    return props.children == null ? null : /*#__PURE__*/_react.default.createElement(_context.LeafletProvider, {
      value: context
    }, props.children);
  }
  return /*#__PURE__*/(0, _react.forwardRef)(ContainerComponent);
}
function createDivOverlayComponent(useElement) {
  function OverlayComponent(props, forwardedRef) {
    const [isOpen, setOpen] = (0, _react.useState)(false);
    const {
      instance
    } = useElement(props, setOpen).current;
    (0, _react.useImperativeHandle)(forwardedRef, () => instance);
    (0, _react.useEffect)(function updateOverlay() {
      if (isOpen) {
        instance.update();
      }
    }, [instance, isOpen, props.children]);
    // @ts-ignore _contentNode missing in type definition
    const contentNode = instance._contentNode;
    return contentNode ? /*#__PURE__*/(0, _reactDom.createPortal)(props.children, contentNode) : null;
  }
  return /*#__PURE__*/(0, _react.forwardRef)(OverlayComponent);
}
function createLeafComponent(useElement) {
  function LeafComponent(props, forwardedRef) {
    const {
      instance
    } = useElement(props).current;
    (0, _react.useImperativeHandle)(forwardedRef, () => instance);
    return null;
  }
  return /*#__PURE__*/(0, _react.forwardRef)(LeafComponent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3REb20iLCJfY29udGV4dCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJjcmVhdGVDb250YWluZXJDb21wb25lbnQiLCJ1c2VFbGVtZW50IiwiQ29udGFpbmVyQ29tcG9uZW50IiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJpbnN0YW5jZSIsImNvbnRleHQiLCJjdXJyZW50IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImNoaWxkcmVuIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiTGVhZmxldFByb3ZpZGVyIiwidmFsdWUiLCJmb3J3YXJkUmVmIiwiY3JlYXRlRGl2T3ZlcmxheUNvbXBvbmVudCIsIk92ZXJsYXlDb21wb25lbnQiLCJpc09wZW4iLCJzZXRPcGVuIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1cGRhdGVPdmVybGF5IiwidXBkYXRlIiwiY29udGVudE5vZGUiLCJfY29udGVudE5vZGUiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVMZWFmQ29tcG9uZW50IiwiTGVhZkNvbXBvbmVudCJdLCJzb3VyY2VzIjpbImNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgdXNlRWZmZWN0LCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBMZWFmbGV0UHJvdmlkZXIgfSBmcm9tICcuL2NvbnRleHQuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckNvbXBvbmVudCh1c2VFbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyQ29tcG9uZW50KHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgICAgICAgY29uc3QgeyBpbnN0YW5jZSAsIGNvbnRleHQgIH0gPSB1c2VFbGVtZW50KHByb3BzKS5jdXJyZW50O1xuICAgICAgICB1c2VJbXBlcmF0aXZlSGFuZGxlKGZvcndhcmRlZFJlZiwgKCk9Pmluc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID09IG51bGwgPyBudWxsIDogLyojX19QVVJFX18qLyBSZWFjdC5jcmVhdGVFbGVtZW50KExlYWZsZXRQcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICAgICAgfSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBmb3J3YXJkUmVmKENvbnRhaW5lckNvbXBvbmVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGl2T3ZlcmxheUNvbXBvbmVudCh1c2VFbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gT3ZlcmxheUNvbXBvbmVudChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gICAgICAgIGNvbnN0IFtpc09wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgICAgICBjb25zdCB7IGluc3RhbmNlICB9ID0gdXNlRWxlbWVudChwcm9wcywgc2V0T3BlbikuY3VycmVudDtcbiAgICAgICAgdXNlSW1wZXJhdGl2ZUhhbmRsZShmb3J3YXJkZWRSZWYsICgpPT5pbnN0YW5jZSk7XG4gICAgICAgIHVzZUVmZmVjdChmdW5jdGlvbiB1cGRhdGVPdmVybGF5KCkge1xuICAgICAgICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXG4gICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgIGlzT3BlbixcbiAgICAgICAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgICAgIF0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlIF9jb250ZW50Tm9kZSBtaXNzaW5nIGluIHR5cGUgZGVmaW5pdGlvblxuICAgICAgICBjb25zdCBjb250ZW50Tm9kZSA9IGluc3RhbmNlLl9jb250ZW50Tm9kZTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnROb2RlID8gLyojX19QVVJFX18qLyBjcmVhdGVQb3J0YWwocHJvcHMuY2hpbGRyZW4sIGNvbnRlbnROb2RlKSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIGZvcndhcmRSZWYoT3ZlcmxheUNvbXBvbmVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGVhZkNvbXBvbmVudCh1c2VFbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gTGVhZkNvbXBvbmVudChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gICAgICAgIGNvbnN0IHsgaW5zdGFuY2UgIH0gPSB1c2VFbGVtZW50KHByb3BzKS5jdXJyZW50O1xuICAgICAgICB1c2VJbXBlcmF0aXZlSGFuZGxlKGZvcndhcmRlZFJlZiwgKCk9Pmluc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIGZvcndhcmRSZWYoTGVhZkNvbXBvbmVudCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQStDLFNBQUFHLHlCQUFBQyxXQUFBLGVBQUFD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