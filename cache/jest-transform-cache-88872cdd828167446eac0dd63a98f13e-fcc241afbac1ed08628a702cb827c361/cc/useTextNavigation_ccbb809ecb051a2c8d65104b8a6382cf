6ac1360f61db563b817430ec7177e703
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTextNavigation = useTextNavigation;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const TEXT_NAVIGATION_RESET_TIMEOUT = 500; // milliseconds

/**
 * @ignore - internal hook.
 *
 * Provides a handler for text navigation.
 * It's used to navigate a list by typing the first letters of the options.
 *
 * @param callback A function to be called when the navigation should be performed.
 * @returns A function to be used in a keydown event handler.
 */
function useTextNavigation(callback) {
  const textCriteriaRef = React.useRef({
    searchString: '',
    lastTime: null
  });
  return React.useCallback(event => {
    if (event.key.length === 1 && event.key !== ' ') {
      const textCriteria = textCriteriaRef.current;
      const lowerKey = event.key.toLowerCase();
      const currentTime = performance.now();
      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
        textCriteria.searchString = lowerKey;
      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
        // If there is just one character in the buffer and the key is the same, do not append
        textCriteria.searchString += lowerKey;
      }
      textCriteria.lastTime = currentTime;
      callback(textCriteria.searchString, event);
    }
  }, [callback]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZVRleHROYXZpZ2F0aW9uIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlRFWFRfTkFWSUdBVElPTl9SRVNFVF9USU1FT1VUIiwiY2FsbGJhY2siLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJ1c2VSZWYiLCJzZWFyY2hTdHJpbmciLCJsYXN0VGltZSIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJsZW5ndGgiLCJ0ZXh0Q3JpdGVyaWEiLCJjdXJyZW50IiwibG93ZXJLZXkiLCJ0b0xvd2VyQ2FzZSIsImN1cnJlbnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciXSwic291cmNlcyI6WyJ1c2VUZXh0TmF2aWdhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlVGV4dE5hdmlnYXRpb24gPSB1c2VUZXh0TmF2aWdhdGlvbjtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmNvbnN0IFRFWFRfTkFWSUdBVElPTl9SRVNFVF9USU1FT1VUID0gNTAwOyAvLyBtaWxsaXNlY29uZHNcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBQcm92aWRlcyBhIGhhbmRsZXIgZm9yIHRleHQgbmF2aWdhdGlvbi5cbiAqIEl0J3MgdXNlZCB0byBuYXZpZ2F0ZSBhIGxpc3QgYnkgdHlwaW5nIHRoZSBmaXJzdCBsZXR0ZXJzIG9mIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBuYXZpZ2F0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQuXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRvIGJlIHVzZWQgaW4gYSBrZXlkb3duIGV2ZW50IGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZVRleHROYXZpZ2F0aW9uKGNhbGxiYWNrKSB7XG4gIGNvbnN0IHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAgc2VhcmNoU3RyaW5nOiAnJyxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQua2V5Lmxlbmd0aCA9PT0gMSAmJiBldmVudC5rZXkgIT09ICcgJykge1xuICAgICAgY29uc3QgdGV4dENyaXRlcmlhID0gdGV4dENyaXRlcmlhUmVmLmN1cnJlbnQ7XG4gICAgICBjb25zdCBsb3dlcktleSA9IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmICh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLmxlbmd0aCA+IDAgJiYgdGV4dENyaXRlcmlhLmxhc3RUaW1lICYmIGN1cnJlbnRUaW1lIC0gdGV4dENyaXRlcmlhLmxhc3RUaW1lID4gVEVYVF9OQVZJR0FUSU9OX1JFU0VUX1RJTUVPVVQpIHtcbiAgICAgICAgdGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZyA9IGxvd2VyS2V5O1xuICAgICAgfSBlbHNlIGlmICh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLmxlbmd0aCAhPT0gMSB8fCBsb3dlcktleSAhPT0gdGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZykge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBqdXN0IG9uZSBjaGFyYWN0ZXIgaW4gdGhlIGJ1ZmZlciBhbmQgdGhlIGtleSBpcyB0aGUgc2FtZSwgZG8gbm90IGFwcGVuZFxuICAgICAgICB0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nICs9IGxvd2VyS2V5O1xuICAgICAgfVxuICAgICAgdGV4dENyaXRlcmlhLmxhc3RUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICBjYWxsYmFjayh0ZXh0Q3JpdGVyaWEuc2VhcmNoU3RyaW5nLCBldmVudCk7XG4gICAgfVxuICB9LCBbY2FsbGJhY2tdKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWixZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsaUJBQWlCLEdBQUdBLGlCQUFpQjtBQUM3QyxJQUFJQyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckQsU0FBU0Msd0JBQXdCQSxDQUFDQyxXQUFXLEVBQUU7RUFBRSxJQUFJLE9BQU9DLE9BQU8sS0FBSyxVQUFVLEVBQUUsT0FB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