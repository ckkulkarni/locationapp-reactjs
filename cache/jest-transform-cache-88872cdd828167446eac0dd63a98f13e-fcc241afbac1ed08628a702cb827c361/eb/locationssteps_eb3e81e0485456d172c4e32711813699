a2fadf4fc16142bf6b4369ffbe7fae6d
"use strict";

var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _reactRedux = require("react-redux");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/React.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/React.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/React.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/React.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/React.createElement(_Locations.default, null)
    }), /*#__PURE__*/React.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/React.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", () => {
      expect(screen).toBeTruthy();
      expect(screen.getByTestId("location-container")).toBeTruty();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJfcmVhY3RSb3V0ZXJEb20iLCJfamVzdEN1Y3VtYmVyIiwiX3JlYWN0IiwiX2xvY2F0aW9uU2xpY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfcmVhY3RSZWR1eCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwic3RvcmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJsb2NhdGlvbkxpc3QiLCJsb2NhdGlvblNsaWNlIiwic2NyZWVuIiwicmVuZGVyIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJCcm93c2VyUm91dGVyIiwiUm91dGVzIiwiUm91dGUiLCJwYXRoIiwiZWxlbWVudCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0eSJdLCJzb3VyY2VzIjpbImxvY2F0aW9ucy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGVzLCBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgbG9jYXRpb25TbGljZSwge1xyXG4gIGFkZFByZXZpb3VzTG9jYXRpb24sXHJcbiAgc2V0Q3VycmVudExvY2F0aW9uLFxyXG4gIHJlbW92ZVByZXZpb3VzTG9jYXRpb24sXHJcbiAgY2xlYXJQcmV2aW91c0xvY2F0aW9ucyxcclxufSBmcm9tIFwiLi8uLi8uLi9yZWR1Y2Vycy9yZWR1Y2VyL2xvY2F0aW9uU2xpY2VcIjtcclxuaW1wb3J0IExvY2F0aW9ucyBmcm9tIFwiLi4vLi4vTG9jYXRpb25zXCI7XHJcbmltcG9ydCBNYXAgZnJvbSBcIi4uLy4uL01hcFwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9sb2NhdGlvbnMuZmVhdHVyZVwiKTtcclxubGV0IHN0b3JlOiBhbnk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiRGlzcGxheWluZyBDdXJyZW50IExvY2F0aW9uXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuIH0pID0+IHtcclxuICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgbG9jYXRpb25MaXN0OiBsb2NhdGlvblNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8TG9jYXRpb25zIC8+fSAvPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9tYXBcIiBlbGVtZW50PXs8TWFwIC8+fSAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgTG9jYXRpb25zIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJsb2NhdGlvbi1jb250YWluZXJcIikpLnRvQmVUcnV0eSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBQyxzQkFBQSxDQUFBTCxPQUFBO0FBTUEsSUFBQU0sVUFBQSxHQUFBRCxzQkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQU8sSUFBQSxHQUFBRixzQkFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQXVDLFNBQUFLLHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQ3ZDLE1BQU1HLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLDJDQUEyQyxDQUFDO0FBQ3hFLElBQUlDLEtBQVU7QUFDZCxJQUFBQywyQkFBYSxFQUFDSCxPQUFPLEVBQUdJLElBQUksSUFBSztFQUMvQkEsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7SUFBRUMsS0FBSztJQUFFQyxJQUFJO0lBQUVDO0VBQUssQ0FBQyxLQUFLO0lBQzdETCxLQUFLLEdBQUcsSUFBQU0sdUJBQWMsRUFBQztNQUNyQkMsT0FBTyxFQUFFO1FBQ1BDLFlBQVksRUFBRUM7TUFDaEI7SUFDRixDQUFDLENBQUM7SUFDRixNQUFNQyxNQUFNLEdBQUcsSUFBQUMsYUFBTSxnQkFDbkJDLEtBQUEsQ0FBQUMsYUFBQSxDQUFDbkIsV0FBQSxDQUFBb0IsUUFBUTtNQUFDZCxLQUFLLEVBQUVBO0lBQU0sZ0JBQ3JCWSxLQUFBLENBQUFDLGFBQUEsQ0FBQzFCLGVBQUEsQ0FBQTRCLGFBQU0scUJBQ0xILEtBQUEsQ0FBQUMsYUFBQSxDQUFDMUIsZUFBQSxDQUFBNkIsTUFBTSxxQkFDTEosS0FBQSxDQUFBQyxhQUFBLENBQUMxQixlQUFBLENBQUE4QixLQUFLO01BQUNDLElBQUksRUFBQyxHQUFHO01BQUNDLE9BQU8sZUFBRVAsS0FBQSxDQUFBQyxhQUFBLENBQUNyQixVQUFBLENBQUFLLE9BQVM7SUFBSSxFQUFHLGVBQzFDZSxLQUFBLENBQUFDLGFBQUEsQ0FBQzFCLGVBQUEsQ0FBQThCLEtBQUs7TUFBQ0MsSUFBSSxFQUFDLE1BQU07TUFBQ0MsT0FBTyxlQUFFUCxLQUFBLENBQUFDLGFBQUEsQ0FBQ3BCLElBQUEsQ0FBQUksT0FBRztJQUFJLEVBQUcsQ0FDaEMsQ0FDRixDQUNBLENBQ1o7SUFDRE0sS0FBSyxDQUFDLG1DQUFtQyxFQUFFLE1BQU07TUFDL0NpQixNQUFNLENBQUNWLE1BQU0sQ0FBQyxDQUFDVyxVQUFVLEVBQUU7TUFDM0JELE1BQU0sQ0FBQ1YsTUFBTSxDQUFDWSxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDQyxTQUFTLEVBQUU7SUFDOUQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=