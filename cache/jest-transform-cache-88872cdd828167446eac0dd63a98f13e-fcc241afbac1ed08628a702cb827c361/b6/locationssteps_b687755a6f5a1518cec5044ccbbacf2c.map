{"version":3,"names":["_react","_interopRequireDefault","require","_jestCucumber","_react2","_reactRedux","_toolkit","_locationSlice","_reactRouterDom","_Locations","obj","__esModule","default","feature","loadFeature","store","defineFeature","test","given","when","then","configureStore","reducer","locationList","locationSlice","screen","render","createElement","Provider","MemoryRouter","expect","toBeTruthy"],"sources":["locations.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { defineFeature, loadFeature } from \"jest-cucumber\";\r\nimport { fireEvent, render, waitFor, act } from \"@testing-library/react\";\r\nimport \"text-encoding\";\r\n\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport locationSlice, {\r\n  addPreviousLocation,\r\n  clearPreviousLocations,\r\n  removePreviousLocation,\r\n  setCurrentLocation,\r\n} from \"./../../reducers/reducer/locationSlice\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  MemoryRouter,\r\n} from \"react-router-dom\";\r\nimport Locations from \"../../Locations\";\r\nimport Map from \"../../Map\";\r\n\r\nconst feature = loadFeature(\"src/components/features/locations.feature\");\r\nlet store: any;\r\ndefineFeature(feature, (test) => {\r\n  test(\"Displaying Current Location\", ({ given, when, then }) => {\r\n    store = configureStore({\r\n      reducer: {\r\n        locationList: locationSlice,\r\n      },\r\n    });\r\n    const screen = render(\r\n      <Provider store={store}>\r\n        <MemoryRouter>\r\n          <Locations />\r\n        </MemoryRouter>\r\n      </Provider>\r\n    );\r\n    given(\"the user is on the Locations page\", () => {\r\n      expect(screen).toBeTruthy();\r\n    });\r\n    //     when('I click on the \"Add Space\" button', () => {\r\n    //       const addSpace = screen.getAllByTestId(\"addSpace\");\r\n    //       fireEvent.click(addSpace[0]);\r\n    //     });\r\n    //     then(\r\n    //       \"a new parking space should be added to the list of available spaces\",\r\n    //       () => {\r\n    //         const addSpace = screen.getAllByTestId(\"addSpace\");\r\n    //         act(() => {\r\n    //           fireEvent.click(addSpace[0]);\r\n    //           store.dispatch(addToParkingSpace());\r\n    //         });\r\n    //       }\r\n    //     );\r\n    //   });\r\n    //   test(\"Remove an existing parking space\", ({ given, when, then, and }) => {\r\n    //     store = configureStore({\r\n    //       reducer: {\r\n    //         parkingSpaces: parkingSlice,\r\n    //       },\r\n    //     });\r\n    //     const screen = render(\r\n    //       <Provider store={store}>\r\n    //         <Router>\r\n    //           <ParkingSpace />\r\n    //         </Router>\r\n    //       </Provider>\r\n    //     );\r\n    //     given(\"that there is a Parking Space Component\", () => {\r\n    //       expect(screen).toBeTruthy();\r\n    //     });\r\n    //     and(\"there is more than one parking space available\", () => {\r\n    //       store = configureStore({\r\n    //         reducer: {\r\n    //           parkingSpaces: parkingSlice,\r\n    //         },\r\n    //       });\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <Router>\r\n    //             <ParkingSpace />\r\n    //           </Router>\r\n    //         </Provider>\r\n    //       );\r\n    //       const addSpace = screen.getAllByTestId(\"addSpace\");\r\n    //       act(() => {\r\n    //         fireEvent.click(addSpace[0]);\r\n    //         store.dispatch(addToParkingSpace());\r\n    //       });\r\n    //       const numSpaces = store.getState().parkingSpaces.numSpaces;\r\n    //       expect(numSpaces).toBeGreaterThan(1);\r\n    //     });\r\n    //     when('I click on the \"Remove Space\" button', () => {\r\n    //       const removeSpace = screen.getAllByTestId(\"decreaseSpace\");\r\n    //       act(() => {\r\n    //         fireEvent.click(removeSpace[0]);\r\n    //       });\r\n    //     });\r\n    //     then(\r\n    //       \"a parking space should be removed from the list of available spaces\",\r\n    //       () => {\r\n    //         const numSpaces = store.getState().parkingSpaces.numSpaces;\r\n    //         expect(numSpaces).toBeGreaterThan(0);\r\n    //         expect(numSpaces).toBeLessThanOrEqual(1);\r\n    //       }\r\n    //     );\r\n    //   });\r\n    //   test(\"Register a parking lot\", ({ given, when, then, and }) => {\r\n    //     store = configureStore({\r\n    //       reducer: {\r\n    //         parkingSpaces: parkingSlice,\r\n    //       },\r\n    //     });\r\n\r\n    //     const screen = render(\r\n    //       <Provider store={store}>\r\n    //         <MemoryRouter>\r\n    //           <ParkingSpace />\r\n    //         </MemoryRouter>\r\n    //       </Provider>\r\n    //     );\r\n    //     given(\"that there is a Parking Space Component\", () => {\r\n    //       expect(screen).toBeTruthy();\r\n    //     });\r\n    //     and(\"I have selected a parking space\", () => {\r\n    //       store = configureStore({\r\n    //         reducer: {\r\n    //           parkingSpaces: parkingSlice,\r\n    //         },\r\n    //       });\r\n\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const addSpace = screen.getAllByTestId(\"addSpace\");\r\n    //       act(() => {\r\n    //         fireEvent.click(addSpace[0]);\r\n    //         store.dispatch(addToParkingSpace());\r\n    //       });\r\n    //       const selectedSpace = screen.getAllByTestId(\"space\");\r\n    //       fireEvent.click(selectedSpace[0]);\r\n    //     });\r\n    //     when('I click on the \"Register Lot\" button', () => {\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const registerButton = screen.getByText(\"Register Lot 1\");\r\n    //       fireEvent.click(registerButton);\r\n    //     });\r\n    //     then(\"a form should appear to register the parking lot\", () => {\r\n    //       store = configureStore({\r\n    //         reducer: {\r\n    //           parkingSpaces: parkingSlice,\r\n    //         },\r\n    //       });\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const registerButton = screen.getByText(\"Register Lot 1\");\r\n    //       fireEvent.click(registerButton);\r\n    //       const registerForm = screen.getByTestId(\"registerForm\");\r\n    //       expect(registerForm).toBeTruthy();\r\n    //     });\r\n    //     and(\"I should be able to enter the registration and parking time\", () => {\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const registerButton = screen.getByText(\"Register Lot 1\");\r\n    //       fireEvent.click(registerButton);\r\n    //       const registrationInput =\r\n    //         screen.getByPlaceholderText(\"Enter Registration\");\r\n    //       const timeInput = screen.getByPlaceholderText(\"Enter Time\");\r\n    //       fireEvent.change(registrationInput, { target: { value: \"ABC-123\" } });\r\n    //       fireEvent.change(timeInput, { target: { value: \"2:00\" } });\r\n    //     });\r\n    //     and(\"when I submit the form, the lot should be registered\", () => {\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const registerButton = screen.getByText(\"Register Lot 1\");\r\n    //       fireEvent.click(registerButton);\r\n    //       const registrationInput =\r\n    //         screen.getByPlaceholderText(\"Enter Registration\");\r\n    //       const timeInput = screen.getByPlaceholderText(\"Enter Time\");\r\n    //       fireEvent.change(registrationInput, { target: { value: \"ABC-123\" } });\r\n    //       fireEvent.change(timeInput, { target: { value: \"14:00\" } });\r\n    //       const submitButton = screen.getByTestId(\"submitButton\");\r\n    //       act(() => {\r\n    //         fireEvent.submit(submitButton);\r\n    //       });\r\n    //       const regID = screen.getAllByTestId(\"regID\");\r\n    //       const timeId = screen.getAllByTestId(\"timeID\");\r\n    //       expect(regID[0]).toHaveTextContent(\"Registration: ABC-123\");\r\n    //       expect(timeId[0]).toHaveTextContent(\"Parking Time: 14:00\");\r\n    //     });\r\n    //   });\r\n    //   test(\"Make payment for an occupied parking lot\", ({\r\n    //     given,\r\n    //     and,\r\n    //     then,\r\n    //     when,\r\n    //   }) => {\r\n    //     store = configureStore({\r\n    //       reducer: {\r\n    //         parkingSpaces: parkingSlice,\r\n    //       },\r\n    //     });\r\n\r\n    //     const screen = render(\r\n    //       <Provider store={store}>\r\n    //         <MemoryRouter>\r\n    //           <ParkingSpace />\r\n    //         </MemoryRouter>\r\n    //       </Provider>\r\n    //     );\r\n    //     given(\"that there is a Parking Space Component\", () => {\r\n    //       expect(screen).toBeTruthy();\r\n    //     });\r\n    //     and(\"there is an occupied parking space\", () => {\r\n    //       store = configureStore({\r\n    //         reducer: {\r\n    //           parkingSpaces: parkingSlice,\r\n    //         },\r\n    //       });\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <ParkingSpace />\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const addSpace = screen.getAllByTestId(\"addSpace\");\r\n    //       act(() => {\r\n    //         fireEvent.click(addSpace[0]);\r\n    //         store.dispatch(addToParkingSpace());\r\n    //       });\r\n    //       const selectedSpace = screen.getAllByTestId(\"space\");\r\n    //       fireEvent.click(selectedSpace[0]);\r\n    //       const registerButton = screen.getByText(\"Register Lot 1\");\r\n    //       fireEvent.click(registerButton);\r\n    //       const registrationInput =\r\n    //         screen.getByPlaceholderText(\"Enter Registration\");\r\n    //       const timeInput = screen.getByPlaceholderText(\"Enter Time\");\r\n    //       fireEvent.change(registrationInput, { target: { value: \"ABC-123\" } });\r\n    //       fireEvent.change(timeInput, { target: { value: \"14:00\" } });\r\n    //       const submitButton = screen.getByTestId(\"submitButton\");\r\n    //       act(() => {\r\n    //         fireEvent.submit(submitButton);\r\n    //       });\r\n    //       const regID = screen.getAllByTestId(\"regID\");\r\n    //       const timeId = screen.getAllByTestId(\"timeID\");\r\n    //       expect(regID[0]).toHaveTextContent(\"Registration: ABC-123\");\r\n    //       expect(timeId[0]).toHaveTextContent(\"Parking Time: 14:00\");\r\n    //     });\r\n    //     when('I click on the \"Make Payment\" button', () => {\r\n    //       const paymentButton = screen.getAllByTestId(\"paymentButton\");\r\n    //       fireEvent.click(paymentButton[0]);\r\n    //     });\r\n    //     then(\"I should be redirected to the payment page\", async () => {\r\n    //       const navigation = jest.fn();\r\n    //       store = configureStore({\r\n    //         reducer: {\r\n    //           parkingSpaces: parkingSlice,\r\n    //         },\r\n    //       });\r\n    //       const screen = render(\r\n    //         <Provider store={store}>\r\n    //           <MemoryRouter>\r\n    //             <Routes>\r\n    //               <Route element={<ParkingSpace />} />\r\n    //               <Route element={<PaymentScreen />} />\r\n    //             </Routes>\r\n    //           </MemoryRouter>\r\n    //         </Provider>\r\n    //       );\r\n    //       const paymentButton = screen.getAllByTestId(\"paymentButton\");\r\n    //       fireEvent.click(paymentButton[0]);\r\n\r\n    //       expect(window.location.pathname).toEqual(\"/\");\r\n    //     });\r\n  });\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACAA,OAAA;AAEAA,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AACA,IAAAK,cAAA,GAAAN,sBAAA,CAAAC,OAAA;AAMA,IAAAM,eAAA,GAAAN,OAAA;AAMA,IAAAO,UAAA,GAAAR,sBAAA,CAAAC,OAAA;AAAwC,SAAAD,uBAAAS,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAGxC,MAAMG,OAAO,GAAG,IAAAC,yBAAW,EAAC,2CAA2C,CAAC;AACxE,IAAIC,KAAU;AACd,IAAAC,2BAAa,EAACH,OAAO,EAAGI,IAAI,IAAK;EAC/BA,IAAI,CAAC,6BAA6B,EAAE,CAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAK,CAAC,KAAK;IAC7DL,KAAK,GAAG,IAAAM,uBAAc,EAAC;MACrBC,OAAO,EAAE;QACPC,YAAY,EAAEC;MAChB;IACF,CAAC,CAAC;IACF,MAAMC,MAAM,GAAG,IAAAC,cAAM,gBACnB1B,MAAA,CAAAY,OAAA,CAAAe,aAAA,CAACtB,WAAA,CAAAuB,QAAQ;MAACb,KAAK,EAAEA;IAAM,gBACrBf,MAAA,CAAAY,OAAA,CAAAe,aAAA,CAACnB,eAAA,CAAAqB,YAAY,qBACX7B,MAAA,CAAAY,OAAA,CAAAe,aAAA,CAAClB,UAAA,CAAAG,OAAS,OAAG,CACA,CACN,CACZ;IACDM,KAAK,CAAC,mCAAmC,EAAE,MAAM;MAC/CY,MAAM,CAACL,MAAM,CAAC,CAACM,UAAU,EAAE;IAC7B,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"}