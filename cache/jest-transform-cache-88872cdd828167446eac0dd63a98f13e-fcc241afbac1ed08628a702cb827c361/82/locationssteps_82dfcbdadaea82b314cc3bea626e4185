fbac8deb60ff2b8e8c2cce738d941886
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireWildcard(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then,
    and
  }) => {
    jest.setTimeout(50000);
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    const mockAddressResponse = {
      data: {
        results: [{
          formatted_address: "123 Street, Hyd"
        }]
      }
    };
    _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
    const mockGeolocation = {
      getCurrentPosition: jest.fn(successCallback => {
        successCallback(mockPosition);
      })
    };
    Object.defineProperty(global.navigator, "geolocation", {
      value: mockGeolocation,
      configurable: true
    });
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: ["/"]
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen).toBeDefined();
        const locationsContainer = screen.getByTestId("location-container");
        expect(locationsContainer).toBeInTheDocument();
      });
    });
    when("the page loads", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see Current Location address", () => {
      expect(screen.getByText("Current Location")).toBeInTheDocument();
      expect(screen.getByText("123 Street, Hyd")).toBeInTheDocument();
    });
    and("the user should see the date and time of the current location", () => {
      const currentDateTime = new Date().toLocaleString();
      expect(screen.getByText(currentDateTime)).toBeInTheDocument();
    });
    and('the user should see a "Clear All Locations" button', () => {
      const clearAllButton = screen.getByRole("button", {
        name: "Clear All Locations"
      });
      expect(clearAllButton).toBeInTheDocument();
    });
    and("the user should see a list of previous addresses after a set interval of time", async () => {
      jest.useFakeTimers();
      const address = mockAddressResponse.data.results[0].formatted_address;
      const latitude = mockPosition.coords.latitude;
      const longitude = mockPosition.coords.longitude;
      const dateTime = new Date().toLocaleString();
      (0, _react2.act)(() => {
        store.dispatch((0, _locationSlice.addPreviousLocation)({
          address,
          latitude,
          longitude,
          dateTime
        }));
      });
      jest.advanceTimersByTime(300000);
      await screen.findByTestId("previous-locations");
    });
    and("each previous address should display the address", async () => {
      const previousLocation1 = await screen.findByTestId("previous-location-1");
      expect(previousLocation1).toHaveTextContent("123 Street, Hyd");
    });
    and("each previous address should display the date and time of that location", async () => {
      const previoustime1 = await screen.findByTestId("previous-time-1");
      const currentDateTime = new Date();
      const previousDateTime = new Date(currentDateTime.getTime() - 300000);
      const dateTime = previousDateTime.toLocaleString();
      expect(previoustime1).toHaveTextContent(dateTime);
    });
    when('the user clicks the "Remove" button, it removes that previous address', async () => {
      const address = mockAddressResponse.data.results[0].formatted_address;
      const latitude = mockPosition.coords.latitude;
      const longitude = mockPosition.coords.longitude;
      const dateTime = new Date().toLocaleString();
      jest.useFakeTimers();
      (0, _react2.act)(() => {
        store.dispatch((0, _locationSlice.addPreviousLocation)({
          address,
          latitude,
          longitude,
          dateTime
        }));
      });
      jest.advanceTimersByTime(300000);
      const previousLocation2 = screen.getByTestId("previous-location-2");
      expect(previousLocation2).toBeDefined();
      const removeButton2 = screen.getAllByRole("button", {
        name: "Remove"
      });
      _react2.fireEvent.click(removeButton2[1]);
      expect(previousLocation2).not.toBeInTheDocument();
    });
    when('the user clicks the "Clear All Locations" button, it removes all addresses', () => {
      const clearAllButton = screen.getByRole("button", {
        name: "Clear All Locations"
      });
      const previousLocations = screen.getByTestId("previous-locations");
      expect(clearAllButton).toBeInTheDocument();
      expect(previousLocations).toBeInTheDocument();
      (0, _react2.act)(() => {
        _react2.fireEvent.click(clearAllButton);
      });
      expect(previousLocations).not.toBeInTheDocument();
    });
    when("the user clicks on the current location address", () => {
      expect(screen.getByText("123 Street, Hyd")).toBeInTheDocument();
      const currentLocation = screen.getByTestId("current-location");
      expect(currentLocation).toBeDefined();
      (0, _react2.act)(() => {
        _react2.fireEvent.click(currentLocation);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,