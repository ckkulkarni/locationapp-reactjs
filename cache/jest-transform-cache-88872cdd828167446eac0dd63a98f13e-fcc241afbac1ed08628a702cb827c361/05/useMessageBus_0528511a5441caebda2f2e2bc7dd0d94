1134a4db2c3c88b939129532ef89af62
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMessageBus = createMessageBus;
exports.useMessageBus = useMessageBus;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function createMessageBus() {
  const listeners = new Map();
  function subscribe(topic, callback) {
    let topicListeners = listeners.get(topic);
    if (!topicListeners) {
      topicListeners = new Set([callback]);
      listeners.set(topic, topicListeners);
    } else {
      topicListeners.add(callback);
    }
    return () => {
      topicListeners.delete(callback);
      if (topicListeners.size === 0) {
        listeners.delete(topic);
      }
    };
  }
  function publish(topic, ...args) {
    const topicListeners = listeners.get(topic);
    if (topicListeners) {
      topicListeners.forEach(callback => callback(...args));
    }
  }
  return {
    subscribe,
    publish
  };
}

/**
 * @ignore - internal hook.
 */
function useMessageBus() {
  const bus = React.useRef();
  if (!bus.current) {
    bus.current = createMessageBus();
  }
  return bus.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZU1lc3NhZ2VCdXMiLCJ1c2VNZXNzYWdlQnVzIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImxpc3RlbmVycyIsIk1hcCIsInN1YnNjcmliZSIsInRvcGljIiwiY2FsbGJhY2siLCJ0b3BpY0xpc3RlbmVycyIsIlNldCIsImFkZCIsImRlbGV0ZSIsInNpemUiLCJwdWJsaXNoIiwiYXJncyIsImZvckVhY2giLCJidXMiLCJ1c2VSZWYiLCJjdXJyZW50Il0sInNvdXJjZXMiOlsidXNlTWVzc2FnZUJ1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlTWVzc2FnZUJ1cyA9IGNyZWF0ZU1lc3NhZ2VCdXM7XG5leHBvcnRzLnVzZU1lc3NhZ2VCdXMgPSB1c2VNZXNzYWdlQnVzO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUJ1cygpIHtcbiAgY29uc3QgbGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICBmdW5jdGlvbiBzdWJzY3JpYmUodG9waWMsIGNhbGxiYWNrKSB7XG4gICAgbGV0IHRvcGljTGlzdGVuZXJzID0gbGlzdGVuZXJzLmdldCh0b3BpYyk7XG4gICAgaWYgKCF0b3BpY0xpc3RlbmVycykge1xuICAgICAgdG9waWNMaXN0ZW5lcnMgPSBuZXcgU2V0KFtjYWxsYmFja10pO1xuICAgICAgbGlzdGVuZXJzLnNldCh0b3BpYywgdG9waWNMaXN0ZW5lcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3BpY0xpc3RlbmVycy5hZGQoY2FsbGJhY2spO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdG9waWNMaXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgIGlmICh0b3BpY0xpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgIGxpc3RlbmVycy5kZWxldGUodG9waWMpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gcHVibGlzaCh0b3BpYywgLi4uYXJncykge1xuICAgIGNvbnN0IHRvcGljTGlzdGVuZXJzID0gbGlzdGVuZXJzLmdldCh0b3BpYyk7XG4gICAgaWYgKHRvcGljTGlzdGVuZXJzKSB7XG4gICAgICB0b3BpY0xpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpYmUsXG4gICAgcHVibGlzaFxuICB9O1xufVxuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBob29rLlxuICovXG5mdW5jdGlvbiB1c2VNZXNzYWdlQnVzKCkge1xuICBjb25zdCBidXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKCFidXMuY3VycmVudCkge1xuICAgIGJ1cy5jdXJyZW50ID0gY3JlYXRlTWVzc2FnZUJ1cygpO1xuICB9XG4gIHJldHVybiBidXMuY3VycmVudDtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWixZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZ0JBQWdCLEdBQUdBLGdCQUFnQjtBQUMzQ0YsT0FBTyxDQUFDRyxhQUFhLEdBQUdBLGFBQWE7QUFDckMsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELFNBQVNDLHdCQUF3QkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLGlCQUFpQixHQUFHLElBQUlELE9BQU8sRUFBRTtFQUFFLElBQUlFLGdCQUFnQixHQUFHLElBQUlGLE9BQU8sRUFBRTtFQUFFLE9BQU8sQ0FBQ0Ysd0JBQXdCLEdBQUcsU0FBQUEsQ0FBVUMsV0FBVyxFQUFFO0lBQUUsT0FBT0EsV0FBVyxHQUFHRyxnQkFBZ0IsR0FBR0QsaUJBQWlCO0VBQUUsQ0FBQyxFQUFFRixXQUFXLENBQUM7QUFBRTtBQUN0VCxTQUFTSCx1QkFBdUJBLENBQUNPLEdBQUcsRUFBRUosV0FBVyxFQUFFO0VBQUUsSUFBSSxDQUFDQSxXQUFXLElBQUlJLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEVBQUU7SUFBRSxPQUFPRCxHQUFHO0VBQUU7RUFBRSxJQUFJQSxHQUFHLEtBQUssSUFBSSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUks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