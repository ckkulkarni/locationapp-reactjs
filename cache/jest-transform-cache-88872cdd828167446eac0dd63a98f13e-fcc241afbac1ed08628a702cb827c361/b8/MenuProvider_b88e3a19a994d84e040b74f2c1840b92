522958a22c006980a560e405d54e2554
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuProvider = MenuProvider;
var React = _interopRequireWildcard(require("react"));
var _ListContext = require("../useList/ListContext");
var _useCompound = require("../utils/useCompound");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
/**
 * Sets up the contexts for the underlying MenuItem components.
 *
 * @ignore - do not document.
 */
function MenuProvider(props) {
  const {
    value,
    children
  } = props;
  const {
    dispatch,
    getItemIndex,
    getItemState,
    registerHighlightChangeHandler,
    registerSelectionChangeHandler,
    registerItem,
    totalSubitemCount
  } = value;
  const listContextValue = React.useMemo(() => ({
    dispatch,
    getItemState,
    getItemIndex,
    registerHighlightChangeHandler,
    registerSelectionChangeHandler
  }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
  const compoundComponentContextValue = React.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.ListContext.Provider, {
      value: listContextValue,
      children: children
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1lbnVQcm92aWRlciIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX0xpc3RDb250ZXh0IiwiX3VzZUNvbXBvdW5kIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInByb3BzIiwiY2hpbGRyZW4iLCJkaXNwYXRjaCIsImdldEl0ZW1JbmRleCIsImdldEl0ZW1TdGF0ZSIsInJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciIsInJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlciIsInJlZ2lzdGVySXRlbSIsInRvdGFsU3ViaXRlbUNvdW50IiwibGlzdENvbnRleHRWYWx1ZSIsInVzZU1lbW8iLCJjb21wb3VuZENvbXBvbmVudENvbnRleHRWYWx1ZSIsImpzeCIsIkNvbXBvdW5kQ29tcG9uZW50Q29udGV4dCIsIlByb3ZpZGVyIiwiTGlzdENvbnRleHQiXSwic291cmNlcyI6WyJNZW51UHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIGNsaWVudCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1lbnVQcm92aWRlciA9IE1lbnVQcm92aWRlcjtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX0xpc3RDb250ZXh0ID0gcmVxdWlyZShcIi4uL3VzZUxpc3QvTGlzdENvbnRleHRcIik7XG52YXIgX3VzZUNvbXBvdW5kID0gcmVxdWlyZShcIi4uL3V0aWxzL3VzZUNvbXBvdW5kXCIpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG4vKipcbiAqIFNldHMgdXAgdGhlIGNvbnRleHRzIGZvciB0aGUgdW5kZXJseWluZyBNZW51SXRlbSBjb21wb25lbnRzLlxuICpcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIE1lbnVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgdmFsdWUsXG4gICAgY2hpbGRyZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCB7XG4gICAgZGlzcGF0Y2gsXG4gICAgZ2V0SXRlbUluZGV4LFxuICAgIGdldEl0ZW1TdGF0ZSxcbiAgICByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXIsXG4gICAgcmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyLFxuICAgIHJlZ2lzdGVySXRlbSxcbiAgICB0b3RhbFN1Yml0ZW1Db3VudFxuICB9ID0gdmFsdWU7XG4gIGNvbnN0IGxpc3RDb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGlzcGF0Y2gsXG4gICAgZ2V0SXRlbVN0YXRlLFxuICAgIGdldEl0ZW1JbmRleCxcbiAgICByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXIsXG4gICAgcmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyXG4gIH0pLCBbZGlzcGF0Y2gsIGdldEl0ZW1JbmRleCwgZ2V0SXRlbVN0YXRlLCByZWdpc3RlckhpZ2hsaWdodENoYW5nZUhhbmRsZXIsIHJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlcl0pO1xuICBjb25zdCBjb21wb3VuZENvbXBvbmVudENvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBnZXRJdGVtSW5kZXgsXG4gICAgcmVnaXN0ZXJJdGVtLFxuICAgIHRvdGFsU3ViaXRlbUNvdW50XG4gIH0pLCBbcmVnaXN0ZXJJdGVtLCBnZXRJdGVtSW5kZXgsIHRvdGFsU3ViaXRlbUNvdW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoX3VzZUNvbXBvdW5kLkNvbXBvdW5kQ29tcG9uZW50Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb21wb3VuZENvbXBvbmVudENvbnRleHRWYWx1ZSxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKF9MaXN0Q29udGV4dC5MaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGxpc3RDb250ZXh0VmFsdWUsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KVxuICB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWixZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsWUFBWSxHQUFHQSxZQUFZO0FBQ25DLElBQUlDLEtBQUssR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENB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