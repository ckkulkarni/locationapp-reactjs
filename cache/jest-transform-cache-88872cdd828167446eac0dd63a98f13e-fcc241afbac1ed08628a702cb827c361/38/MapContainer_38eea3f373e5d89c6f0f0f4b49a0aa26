ac63329462436f9c3b1beed6ae072e12
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapContainer = void 0;
var _core = require("@react-leaflet/core");
var _leaflet = require("leaflet");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function MapContainerComponent({
  bounds,
  boundsOptions,
  center,
  children,
  className,
  id,
  placeholder,
  style,
  whenReady,
  zoom,
  ...options
}, forwardedRef) {
  const [props] = (0, _react.useState)({
    className,
    id,
    style
  });
  const [context, setContext] = (0, _react.useState)(null);
  (0, _react.useImperativeHandle)(forwardedRef, () => context?.map ?? null, [context]);
  const mapRef = (0, _react.useCallback)(node => {
    if (node !== null && context === null) {
      const map = new _leaflet.Map(node, options);
      if (center != null && zoom != null) {
        map.setView(center, zoom);
      } else if (bounds != null) {
        map.fitBounds(bounds, boundsOptions);
      }
      if (whenReady != null) {
        map.whenReady(whenReady);
      }
      setContext((0, _core.createLeafletContext)(map));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    return () => {
      context?.map.remove();
    };
  }, [context]);
  const contents = context ? /*#__PURE__*/_react.default.createElement(_core.LeafletProvider, {
    value: context
  }, children) : placeholder ?? null;
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, props, {
    ref: mapRef
  }), contents);
}
const MapContainer = /*#__PURE__*/(0, _react.forwardRef)(MapContainerComponent);
exports.MapContainer = MapContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,