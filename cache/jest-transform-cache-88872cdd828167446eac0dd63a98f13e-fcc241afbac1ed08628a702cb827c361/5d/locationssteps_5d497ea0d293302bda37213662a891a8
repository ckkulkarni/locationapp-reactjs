4d29f389b3567ba2545e26f476a91a7a
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then,
    and
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    const mockAddressResponse = {
      data: {
        results: [{
          formatted_address: "123 Street, Hyd"
        }]
      }
    };
    _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
    const mockGeolocation = {
      getCurrentPosition: jest.fn(successCallback => {
        successCallback(mockPosition);
      })
    };
    Object.defineProperty(global.navigator, "geolocation", {
      value: mockGeolocation,
      configurable: true
    });
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: ["/"]
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen).toBeDefined();
        const locationsContainer = screen.getByTestId("location-container");
        expect(locationsContainer).toBeInTheDocument();
      });
    });
    when("the page loads", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see Current Location address", () => {
      expect(screen.getByText("Current Location")).toBeInTheDocument();
      expect(screen.getByText("123 Street, Hyd")).toBeInTheDocument();
    });
    and("the user should see the date and time of the current location", () => {
      const currentDateTime = new Date().toLocaleString();
      expect(screen.getByText(currentDateTime)).toBeInTheDocument();
    });
    and('the user should see a "Clear All Locations" button', () => {
      const clearAllButton = screen.getByRole("button", {
        name: "Clear All Locations"
      });
      expect(clearAllButton).toBeInTheDocument();
    });
    and("the user should see a list of previous addresses after a set interval of time", async () => {
      jest.setTimeout(30000);
      jest.useFakeTimers();
      jest.advanceTimersByTime(30000);
      await (0, _react2.act)(async () => {
        await new Promise(resolve => process.nextTick(resolve));
        screen.rerender( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
          initialEntries: ["/"]
        }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
          path: "/",
          element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
        }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
          path: "/map",
          element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
        })))));
      });
      const previousLocation = screen.getByTestId("previous-locations");
      expect(previousLocation).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,