b85031fafa1cbb42cd0621fdccd8431c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRedux = require("react-redux");
var _locationSlice = require("./reducers/reducer/locationSlice");
var _material = require("@mui/material");
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Locations = () => {
  const [location, setLocation] = (0, _react.useState)(null);
  const currentLocation = (0, _reactRedux.useSelector)(state => state.locationList.currentLocation);
  const previousLocations = (0, _reactRedux.useSelector)(state => state.locationList.previousLocations);
  const navigation = (0, _reactRouterDom.useNavigate)();
  const key = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;
  const dispatch = (0, _reactRedux.useDispatch)();
  const [presentAddress, setPresent] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    const options = {
      enableHighAccuracy: true,
      timeout: 5000,
      maximumAge: 0
    };
    let currentAddress = null;
    const fetchLocation = () => {
      navigator.geolocation.getCurrentPosition(position => {
        const {
          latitude,
          longitude
        } = position.coords;
        setLocation({
          latitude,
          longitude
        });
        _axios.default.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${key}`).then(response => {
          const address = response.data.results[0].formatted_address;
          const dateTime = new Date().toLocaleString();
          dispatch((0, _locationSlice.setCurrentLocation)({
            address,
            latitude,
            longitude,
            dateTime
          }));
          currentAddress = {
            address,
            latitude,
            longitude,
            dateTime
          };
          setPresent(currentAddress);
        }).catch(error => {
          console.log(error);
        });
      }, error => {
        console.log(error);
      }, options);
    };
    fetchLocation();
    const intervalId = setInterval(() => {
      dispatch((0, _locationSlice.addPreviousLocation)(currentAddress));
      fetchLocation();
    }, 300000);
    return () => clearInterval(intervalId);
  }, []);
  const handleClearAll = () => {
    dispatch((0, _locationSlice.clearPreviousLocations)());
  };
  const handleRemoveLocation = index => {
    dispatch((0, _locationSlice.removePreviousLocation)(index));
  };
  const handleNavigation = location => {
    navigation("/map", {
      state: {
        address: location.address,
        lat: location.latitude,
        lng: location.longitude
      }
    });
  };
  //console.log(currentLocation);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "locationsContainer",
    "data-testid": "location-container"
  }, location ? /*#__PURE__*/_react.default.createElement("div", {
    className: "addresses"
  }, /*#__PURE__*/_react.default.createElement(_material.Typography, {
    variant: "h4",
    gutterBottom: true
  }, "Current Location"), /*#__PURE__*/_react.default.createElement(_material.Box, {
    onClick: () => handleNavigation(currentLocation),
    sx: {
      cursor: "pointer",
      p: 1.5,
      "&:hover": {
        border: 1,
        borderRadius: 2,
        borderColor: "divider",
        p: 1.5
      }
    },
    "data-testid": "current-location"
  }, currentLocation && /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      textAlign: "left"
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Typography, {
    variant: "h6",
    gutterBottom: true,
    sx: {
      fontWeight: "bold"
    }
  }, currentLocation.address), /*#__PURE__*/_react.default.createElement(_material.Typography, {
    variant: "h6",
    gutterBottom: true
  }, currentLocation.dateTime))), /*#__PURE__*/_react.default.createElement(_material.Button, {
    className: "clearBtn",
    variant: "contained",
    color: "success",
    onClick: handleClearAll,
    sx: {
      mt: 1
    }
  }, "Clear All Locations"), previousLocations.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: "previousLocations"
  }, /*#__PURE__*/_react.default.createElement(_material.Typography, {
    variant: "subtitle1"
  }, "Previous Addresses:"), /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: "flex",
      flexDirection: "column",
      gap: 2,
      p: 1,
      border: 1,
      borderRadius: 2,
      borderColor: "divider",
      textAlign: "left"
    },
    "data-testid": "previous-locations"
  }, previousLocations.slice().reverse().map((location, index) => /*#__PURE__*/_react.default.createElement(_material.Box, {
    key: index,
    sx: {
      display: "flex",
      gap: 2,
      cursor: "pointer"
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Box, {
    onClick: () => handleNavigation(location),
    sx: {
      "&:hover": {
        border: 1,
        borderRadius: 2,
        borderColor: "divider"
      },
      p: 1
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Typography, {
    sx: {
      fontWeight: "bold"
    },
    "data-testid": `previous-location-${index + 1}`
  }, location?.address), /*#__PURE__*/_react.default.createElement(_material.Typography, {
    "data-testid": `previous-time-${index + 1}`
  }, location.dateTime)), /*#__PURE__*/_react.default.createElement(_material.Button, {
    className: "removeBtn",
    sx: {
      height: "80%",
      mt: 1.5
    },
    variant: "contained",
    color: "success",
    onClick: () => handleRemoveLocation(index)
  }, "Remove")))))) : /*#__PURE__*/_react.default.createElement("p", null, "Loading current location..."));
};
var _default = Locations;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,