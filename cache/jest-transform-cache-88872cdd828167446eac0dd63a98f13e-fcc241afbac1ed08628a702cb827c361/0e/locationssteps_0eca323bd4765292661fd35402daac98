836f7f0680b933cdb0f1d774bc0c5a23
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    const mockAddressResponse = {
      data: {
        results: [{
          formatted_address: "123 Street, Hyd"
        }]
      }
    };
    _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
    given("the user is on the Locations page", () => {
      const mockGeolocation = {
        getCurrentPosition: jest.fn(successCallback => {
          successCallback(mockPosition);
        })
      };
      Object.defineProperty(global.navigator, "geolocation", {
        value: mockGeolocation,
        configurable: true
      });
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/",
        element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/map",
        element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
      })))));
      expect(screen).toBeTruthy();
      const address = screen.getByText("123 Street, Hyd");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImxvY2F0aW9uTGlzdCIsImxvY2F0aW9uU2xpY2UiLCJtb2NrUG9zaXRpb24iLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIm1vY2tBZGRyZXNzUmVzcG9uc2UiLCJkYXRhIiwicmVzdWx0cyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiYXhpb3MiLCJnZXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJtb2NrR2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJmbiIsInN1Y2Nlc3NDYWxsYmFjayIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJNZW1vcnlSb3V0ZXIiLCJpbml0aWFsRW50cmllcyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiYWRkcmVzcyIsImdldEJ5VGV4dCJdLCJzb3VyY2VzIjpbImxvY2F0aW9ucy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yLCBhY3QgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCBsb2NhdGlvblNsaWNlLCB7XHJcbiAgYWRkUHJldmlvdXNMb2NhdGlvbixcclxuICBjbGVhclByZXZpb3VzTG9jYXRpb25zLFxyXG4gIHJlbW92ZVByZXZpb3VzTG9jYXRpb24sXHJcbiAgc2V0Q3VycmVudExvY2F0aW9uLFxyXG59IGZyb20gXCIuLy4uLy4uL3JlZHVjZXJzL3JlZHVjZXIvbG9jYXRpb25TbGljZVwiO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxyXG4gIFJvdXRlcyxcclxuICBSb3V0ZSxcclxuICBNZW1vcnlSb3V0ZXIsXHJcbn0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IExvY2F0aW9ucyBmcm9tIFwiLi4vLi4vTG9jYXRpb25zXCI7XHJcbmltcG9ydCBNYXAgZnJvbSBcIi4uLy4uL01hcFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmplc3QubW9jayhcImF4aW9zXCIpO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9sb2NhdGlvbnMuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiRGlzcGxheWluZyBDdXJyZW50IExvY2F0aW9uXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuIH0pID0+IHtcclxuICAgIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgbG9jYXRpb25MaXN0OiBsb2NhdGlvblNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBtb2NrUG9zaXRpb24gPSB7XHJcbiAgICAgIGNvb3Jkczoge1xyXG4gICAgICAgIGxhdGl0dWRlOiAzNy43NzQ5LFxyXG4gICAgICAgIGxvbmdpdHVkZTogLTEyMi40MTk0LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vY2tBZGRyZXNzUmVzcG9uc2UgPSB7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICByZXN1bHRzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlZF9hZGRyZXNzOiBcIjEyMyBTdHJlZXQsIEh5ZFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tBZGRyZXNzUmVzcG9uc2UpO1xyXG5cclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIExvY2F0aW9ucyBwYWdlXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0dlb2xvY2F0aW9uID0ge1xyXG4gICAgICAgIGdldEN1cnJlbnRQb3NpdGlvbjogamVzdC5mbigoc3VjY2Vzc0NhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sobW9ja1Bvc2l0aW9uKTtcclxuICAgICAgICB9KSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwubmF2aWdhdG9yLCBcImdlb2xvY2F0aW9uXCIsIHtcclxuICAgICAgICB2YWx1ZTogbW9ja0dlb2xvY2F0aW9uLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICA8TWVtb3J5Um91dGVyIGluaXRpYWxFbnRyaWVzPXtbXCIvXCJdfT5cclxuICAgICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8TG9jYXRpb25zIC8+fSAvPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL21hcFwiIGVsZW1lbnQ9ezxNYXAgLz59IC8+XHJcbiAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgPC9NZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgPC9Qcm92aWRlcj5cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgYWRkcmVzcyA9IHNjcmVlbi5nZXRCeVRleHQoXCIxMjMgU3RyZWV0LCBIeWRcIik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQXRCbEIsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGNBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQU1BLElBQUFNLGVBQUEsR0FBQU4sT0FBQTtBQU1BLElBQUFPLFVBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNB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