64821d2133fc9de984e603bcfbd17b2a
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Map = _interopRequireDefault(require("../../Map"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/map.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Viewing Location on the Map", ({
    given,
    when,
    then,
    and
  }) => {
    //17.372617, 78.513994
    const locationState = {
      lat: 17.372617,
      lng: 78.513994,
      address: "Saleem Nagar Colony, Malakpet Extension, Old Malakpet, Hyderabad, Telangana 500036"
    };
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: [{
        pathname: "/map",
        state: locationState
      }]
    }, /*#__PURE__*/_react.default.createElement(_Map.default, null)));
    given("the user is on the Map page", () => {
      const mapContainer = screen.getByTestId("map-container");
      expect(mapContainer).toBeInTheDocument();
    });
    when("the user should see the address of the location that will be displayed in the map", () => {
      const addressContainer = screen.getByText("Saleem Nagar Colony, Malakpet Extension, Old Malakpet, Hyderabad, Telangana 500036");
      expect(addressContainer).toBeInTheDocument();
    });
    and("the user should see a marker indicating the specified location", () => {
      const marker = screen.getByAltText("Marker");
      expect(marker).toBeInTheDocument();
    });
    and("the user should see the map rendered correclty", () => {
      const marker = screen.getByAltText("Mark");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX01hcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwibG9jYXRpb25TdGF0ZSIsImxhdCIsImxuZyIsImFkZHJlc3MiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJwYXRobmFtZSIsInN0YXRlIiwibWFwQ29udGFpbmVyIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImFkZHJlc3NDb250YWluZXIiLCJnZXRCeVRleHQiLCJtYXJrZXIiLCJnZXRCeUFsdFRleHQiXSwic291cmNlcyI6WyJtYXBzLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IsIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgTG9jYXRpb25zIGZyb20gXCIuLi8uLi9Mb2NhdGlvbnNcIjtcclxuaW1wb3J0IE1hcCBmcm9tIFwiLi4vLi4vTWFwXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL21hcC5mZWF0dXJlXCIpO1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJWaWV3aW5nIExvY2F0aW9uIG9uIHRoZSBNYXBcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICAvLzE3LjM3MjYxNywgNzguNTEzOTk0XHJcbiAgICBjb25zdCBsb2NhdGlvblN0YXRlID0ge1xyXG4gICAgICBsYXQ6IDE3LjM3MjYxNyxcclxuICAgICAgbG5nOiA3OC41MTM5OTQsXHJcbiAgICAgIGFkZHJlc3M6XHJcbiAgICAgICAgXCJTYWxlZW0gTmFnYXIgQ29sb255LCBNYWxha3BldCBFeHRlbnNpb24sIE9sZCBNYWxha3BldCwgSHlkZXJhYmFkLCBUZWxhbmdhbmEgNTAwMDM2XCIsXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICA8TWVtb3J5Um91dGVyXHJcbiAgICAgICAgaW5pdGlhbEVudHJpZXM9e1t7IHBhdGhuYW1lOiBcIi9tYXBcIiwgc3RhdGU6IGxvY2F0aW9uU3RhdGUgfV19XHJcbiAgICAgID5cclxuICAgICAgICA8TWFwIC8+XHJcbiAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgKTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIE1hcCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgbWFwQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGVzdElkKFwibWFwLWNvbnRhaW5lclwiKTtcclxuICAgICAgZXhwZWN0KG1hcENvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXHJcbiAgICAgIFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGUgYWRkcmVzcyBvZiB0aGUgbG9jYXRpb24gdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgbWFwXCIsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBjb25zdCBhZGRyZXNzQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGV4dChcclxuICAgICAgICAgIFwiU2FsZWVtIE5hZ2FyIENvbG9ueSwgTWFsYWtwZXQgRXh0ZW5zaW9uLCBPbGQgTWFsYWtwZXQsIEh5ZGVyYWJhZCwgVGVsYW5nYW5hIDUwMDAzNlwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3QoYWRkcmVzc0NvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIGFuZChcclxuICAgICAgXCJ0aGUgdXNlciBzaG91bGQgc2VlIGEgbWFya2VyIGluZGljYXRpbmcgdGhlIHNwZWNpZmllZCBsb2NhdGlvblwiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFya2VyID0gc2NyZWVuLmdldEJ5QWx0VGV4dChcIk1hcmtlclwiKTtcclxuICAgICAgICBleHBlY3QobWFya2VyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGFuZChcInRoZSB1c2VyIHNob3VsZCBzZWUgdGhlIG1hcCByZW5kZXJlZCBjb3JyZWNsdHlcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtYXJrZXIgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KFwiTWFya1wiKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBQSxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFPQSxJQUFBSSxJQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBNEIsU0FBQUQsdUJBQUFNLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFDNUIsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMscUNBQXFDLENBQUM7QUFFbEUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO0lBQUVDLEtBQUs7SUFBRUMsSUFBSTtJQUFFQyxJQUFJO0lBQUVDO0VBQUksQ0FBQyxLQUFLO0lBQ2xFO0lBQ0EsTUFBTUMsYUFBYSxHQUFHO01BQ3BCQyxHQUFHLEVBQUUsU0FBUztNQUNkQyxHQUFHLEVBQUUsU0FBUztNQUNkQyxPQUFPLEVBQ0w7SUFDSixDQUFDO0lBQ0QsTUFBTUMsTUFBTSxHQUFHLElBQUFDLGNBQU0sZ0JBQ25CdkIsTUFBQSxDQUFBUyxPQUFBLENBQUFlLGFBQUEsQ0FBQ25CLGVBQUEsQ0FBQW9CLFlBQVk7TUFDWEMsY0FBYyxFQUFFLENBQUM7UUFBRUMsUUFBUSxFQUFFLE1BQU07UUFBRUMsS0FBSyxFQUFFVjtNQUFjLENBQUM7SUFBRSxnQkFFN0RsQixNQUFBLENBQUFTLE9BQUEsQ0FBQWUsYUFBQSxDQUFDbEIsSUFBQSxDQUFBRyxPQUFHLE9BQUcsQ0FDTSxDQUNoQjtJQUNESyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtNQUN6QyxNQUFNZSxZQUFZLEdBQUdQLE1BQU0sQ0FBQ1EsV0FBVyxDQUFDLGVBQWUsQ0FBQztNQUN4REMsTUFBTSxDQUFDRixZQUFZLENBQUMsQ0FBQ0csaUJBQWlCLEVBQUU7SUFDMUMsQ0FBQyxDQUFDO0lBRUZqQixJQUFJLENBQ0YsbUZBQW1GLEVBQ25GLE1BQU07TUFDSixNQUFNa0IsZ0JBQWdCLEdBQUdYLE1BQU0sQ0FBQ1ksU0FBUyxDQUN2QyxvRkFBb0YsQ0FDckY7TUFDREgsTUFBTSxDQUFDRSxnQkFBZ0IsQ0FBQyxDQUFDRCxpQkFBaUIsRUFBRTtJQUM5QyxDQUFDLENBQ0Y7SUFDRGYsR0FBRyxDQUNELGdFQUFnRSxFQUNoRSxNQUFNO01BQ0osTUFBTWtCLE1BQU0sR0FBR2IsTUFBTSxDQUFDYyxZQUFZLENBQUMsUUFBUSxDQUFDO01BQzVDTCxNQUFNLENBQUNJLE1BQU0sQ0FBQyxDQUFDSCxpQkFBaUIsRUFBRTtJQUNwQyxDQUFDLENBQ0Y7SUFFRGYsR0FBRyxDQUFDLGdEQUFnRCxFQUFFLE1BQU07TUFDMUQsTUFBTWtCLE1BQU0sR0FBR2IsTUFBTSxDQUFDYyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQzVDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9