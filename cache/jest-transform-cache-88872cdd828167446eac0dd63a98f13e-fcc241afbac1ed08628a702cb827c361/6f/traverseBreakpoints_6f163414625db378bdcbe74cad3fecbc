6792437d8c0beb94de819a35f9018492
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverseBreakpoints = exports.filterBreakpointKeys = void 0;
const filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter(key => responsiveKeys.includes(key));
exports.filterBreakpointKeys = filterBreakpointKeys;
const traverseBreakpoints = (breakpoints, responsive, iterator) => {
  const smallestBreakpoint = breakpoints.keys[0]; // the keys is sorted from smallest to largest by `createBreakpoints`.

  if (Array.isArray(responsive)) {
    responsive.forEach((breakpointValue, index) => {
      iterator((responsiveStyles, style) => {
        if (index <= breakpoints.keys.length - 1) {
          if (index === 0) {
            Object.assign(responsiveStyles, style);
          } else {
            responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;
          }
        }
      }, breakpointValue);
    });
  } else if (responsive && typeof responsive === 'object') {
    // prevent null
    // responsive could be a very big object, pick the smallest responsive values

    const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
    keys.forEach(key => {
      if (breakpoints.keys.indexOf(key) !== -1) {
        // @ts-ignore already checked that responsive is an object
        const breakpointValue = responsive[key];
        if (breakpointValue !== undefined) {
          iterator((responsiveStyles, style) => {
            if (smallestBreakpoint === key) {
              Object.assign(responsiveStyles, style);
            } else {
              responsiveStyles[breakpoints.up(key)] = style;
            }
          }, breakpointValue);
        }
      }
    });
  } else if (typeof responsive === 'number' || typeof responsive === 'string') {
    iterator((responsiveStyles, style) => {
      Object.assign(responsiveStyles, style);
    }, responsive);
  }
};
exports.traverseBreakpoints = traverseBreakpoints;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRyYXZlcnNlQnJlYWtwb2ludHMiLCJmaWx0ZXJCcmVha3BvaW50S2V5cyIsImJyZWFrcG9pbnRzS2V5cyIsInJlc3BvbnNpdmVLZXlzIiwiZmlsdGVyIiwia2V5IiwiaW5jbHVkZXMiLCJicmVha3BvaW50cyIsInJlc3BvbnNpdmUiLCJpdGVyYXRvciIsInNtYWxsZXN0QnJlYWtwb2ludCIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiYnJlYWtwb2ludFZhbHVlIiwiaW5kZXgiLCJyZXNwb25zaXZlU3R5bGVzIiwic3R5bGUiLCJsZW5ndGgiLCJhc3NpZ24iLCJ1cCIsImluZGV4T2YiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyJ0cmF2ZXJzZUJyZWFrcG9pbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50cmF2ZXJzZUJyZWFrcG9pbnRzID0gZXhwb3J0cy5maWx0ZXJCcmVha3BvaW50S2V5cyA9IHZvaWQgMDtcbmNvbnN0IGZpbHRlckJyZWFrcG9pbnRLZXlzID0gKGJyZWFrcG9pbnRzS2V5cywgcmVzcG9uc2l2ZUtleXMpID0+IGJyZWFrcG9pbnRzS2V5cy5maWx0ZXIoa2V5ID0+IHJlc3BvbnNpdmVLZXlzLmluY2x1ZGVzKGtleSkpO1xuZXhwb3J0cy5maWx0ZXJCcmVha3BvaW50S2V5cyA9IGZpbHRlckJyZWFrcG9pbnRLZXlzO1xuY29uc3QgdHJhdmVyc2VCcmVha3BvaW50cyA9IChicmVha3BvaW50cywgcmVzcG9uc2l2ZSwgaXRlcmF0b3IpID0+IHtcbiAgY29uc3Qgc21hbGxlc3RCcmVha3BvaW50ID0gYnJlYWtwb2ludHMua2V5c1swXTsgLy8gdGhlIGtleXMgaXMgc29ydGVkIGZyb20gc21hbGxlc3QgdG8gbGFyZ2VzdCBieSBgY3JlYXRlQnJlYWtwb2ludHNgLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3BvbnNpdmUpKSB7XG4gICAgcmVzcG9uc2l2ZS5mb3JFYWNoKChicmVha3BvaW50VmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICBpdGVyYXRvcigocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpID0+IHtcbiAgICAgICAgaWYgKGluZGV4IDw9IGJyZWFrcG9pbnRzLmtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTdHlsZXNbYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgYnJlYWtwb2ludFZhbHVlKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChyZXNwb25zaXZlICYmIHR5cGVvZiByZXNwb25zaXZlID09PSAnb2JqZWN0Jykge1xuICAgIC8vIHByZXZlbnQgbnVsbFxuICAgIC8vIHJlc3BvbnNpdmUgY291bGQgYmUgYSB2ZXJ5IGJpZyBvYmplY3QsIHBpY2sgdGhlIHNtYWxsZXN0IHJlc3BvbnNpdmUgdmFsdWVzXG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVzcG9uc2l2ZSkubGVuZ3RoID4gYnJlYWtwb2ludHMua2V5cy5sZW5ndGggPyBicmVha3BvaW50cy5rZXlzIDogZmlsdGVyQnJlYWtwb2ludEtleXMoYnJlYWtwb2ludHMua2V5cywgT2JqZWN0LmtleXMocmVzcG9uc2l2ZSkpO1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRzLmtleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIGFscmVhZHkgY2hlY2tlZCB0aGF0IHJlc3BvbnNpdmUgaXMgYW4gb2JqZWN0XG4gICAgICAgIGNvbnN0IGJyZWFrcG9pbnRWYWx1ZSA9IHJlc3BvbnNpdmVba2V5XTtcbiAgICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaXRlcmF0b3IoKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc21hbGxlc3RCcmVha3BvaW50ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNwb25zaXZlU3R5bGVzW2JyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgYnJlYWtwb2ludFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zaXZlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmVzcG9uc2l2ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpdGVyYXRvcigocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpO1xuICAgIH0sIHJlc3BvbnNpdmUpO1xuICB9XG59O1xuZXhwb3J0cy50cmF2ZXJzZUJyZWFrcG9pbnRzID0gdHJhdmVyc2VCcmVha3BvaW50czsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxtQkFBbUIsR0FBR0YsT0FBTyxDQUFDRyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7QUFD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