21ed010a807d4f7abb101d8d15d362d0
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    const mockAddressResponse = {
      data: {
        results: [{
          formatted_address: "123 Street, Hyd"
        }]
      }
    };
    _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
    given("the user is on the Locations page", async () => {
      const mockGeolocation = {
        getCurrentPosition: jest.fn(successCallback => {
          successCallback(mockPosition);
        })
      };
      Object.defineProperty(global.navigator, "geolocation", {
        value: mockGeolocation,
        configurable: true
      });
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/",
        element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/map",
        element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
      })))));
      await (0, _react2.waitFor)(() => {
        expect(screen).toBeDefined();
        const locationsContainer = screen.getByTestId("location-container");
        expect(locationsContainer).toBeInTheDocument();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImxvY2F0aW9uTGlzdCIsImxvY2F0aW9uU2xpY2UiLCJtb2NrUG9zaXRpb24iLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIm1vY2tBZGRyZXNzUmVzcG9uc2UiLCJkYXRhIiwicmVzdWx0cyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiYXhpb3MiLCJnZXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJtb2NrR2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJmbiIsInN1Y2Nlc3NDYWxsYmFjayIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJNZW1vcnlSb3V0ZXIiLCJpbml0aWFsRW50cmllcyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJsb2NhdGlvbnNDb250YWluZXIiLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50Il0sInNvdXJjZXMiOlsibG9jYXRpb25zLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IsIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IGxvY2F0aW9uU2xpY2UsIHtcclxuICBhZGRQcmV2aW91c0xvY2F0aW9uLFxyXG4gIGNsZWFyUHJldmlvdXNMb2NhdGlvbnMsXHJcbiAgcmVtb3ZlUHJldmlvdXNMb2NhdGlvbixcclxuICBzZXRDdXJyZW50TG9jYXRpb24sXHJcbn0gZnJvbSBcIi4vLi4vLi4vcmVkdWNlcnMvcmVkdWNlci9sb2NhdGlvblNsaWNlXCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgTG9jYXRpb25zIGZyb20gXCIuLi8uLi9Mb2NhdGlvbnNcIjtcclxuaW1wb3J0IE1hcCBmcm9tIFwiLi4vLi4vTWFwXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuamVzdC5tb2NrKFwiYXhpb3NcIik7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2xvY2F0aW9ucy5mZWF0dXJlXCIpO1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJEaXNwbGF5aW5nIEN1cnJlbnQgTG9jYXRpb25cIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4gfSkgPT4ge1xyXG4gICAgY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBsb2NhdGlvbkxpc3Q6IGxvY2F0aW9uU2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG1vY2tQb3NpdGlvbiA9IHtcclxuICAgICAgY29vcmRzOiB7XHJcbiAgICAgICAgbGF0aXR1ZGU6IDM3Ljc3NDksXHJcbiAgICAgICAgbG9uZ2l0dWRlOiAtMTIyLjQxOTQsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW9ja0FkZHJlc3NSZXNwb25zZSA9IHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHJlc3VsdHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZm9ybWF0dGVkX2FkZHJlc3M6IFwiMTIzIFN0cmVldCwgSHlkXCIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIChheGlvcy5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0FkZHJlc3NSZXNwb25zZSk7XHJcblxyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgTG9jYXRpb25zIHBhZ2VcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrR2VvbG9jYXRpb24gPSB7XHJcbiAgICAgICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKChzdWNjZXNzQ2FsbGJhY2spID0+IHtcclxuICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhtb2NrUG9zaXRpb24pO1xyXG4gICAgICAgIH0pLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbC5uYXZpZ2F0b3IsIFwiZ2VvbG9jYXRpb25cIiwge1xyXG4gICAgICAgIHZhbHVlOiBtb2NrR2VvbG9jYXRpb24sXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1tcIi9cIl19PlxyXG4gICAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxMb2NhdGlvbnMgLz59IC8+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbWFwXCIgZWxlbWVudD17PE1hcCAvPn0gLz5cclxuICAgICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgICApO1xyXG5cclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbnNDb250YWluZXIgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJsb2NhdGlvbi1jb250YWluZXJcIik7XHJcbiAgICAgICAgZXhwZWN0KGxvY2F0aW9uc0NvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQXRCbEIsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7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