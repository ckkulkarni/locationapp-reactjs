35d37b2e9d0a7687973d1ba374ec8290
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectReducer = selectReducer;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _useList = require("../useList");
var _useSelect = require("./useSelect.types");
function selectReducer(state, action) {
  const {
    open
  } = state;
  const {
    context: {
      selectionMode
    }
  } = action;
  if (action.type === _useSelect.SelectActionTypes.buttonClick) {
    var _state$selectedValues;
    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : (0, _useList.moveHighlight)(null, 'start', action.context);
    return (0, _extends2.default)({}, state, {
      open: !open,
      highlightedValue: !open ? itemToHighlight : null
    });
  }
  const newState = (0, _useList.listReducer)(state, action);
  switch (action.type) {
    case _useList.ListActionTypes.keyDown:
      if (state.open) {
        if (action.event.key === 'Escape') {
          return (0, _extends2.default)({}, newState, {
            open: false
          });
        }
        if (selectionMode === 'single' && (action.event.key === 'Enter' || action.event.key === ' ')) {
          return (0, _extends2.default)({}, newState, {
            open: false
          });
        }
      } else {
        if (action.event.key === 'Enter' || action.event.key === ' ' || action.event.key === 'ArrowDown') {
          var _state$selectedValues2;
          return (0, _extends2.default)({}, state, {
            open: true,
            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : (0, _useList.moveHighlight)(null, 'start', action.context)
          });
        }
        if (action.event.key === 'ArrowUp') {
          var _state$selectedValues3;
          return (0, _extends2.default)({}, state, {
            open: true,
            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : (0, _useList.moveHighlight)(null, 'end', action.context)
          });
        }
      }
      break;
    case _useList.ListActionTypes.itemClick:
      if (selectionMode === 'single') {
        return (0, _extends2.default)({}, newState, {
          open: false
        });
      }
      break;
    case _useList.ListActionTypes.blur:
      return (0, _extends2.default)({}, newState, {
        open: false
      });
    default:
      return newState;
  }
  return newState;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2VsZWN0UmVkdWNlciIsIl9leHRlbmRzMiIsIl91c2VMaXN0IiwiX3VzZVNlbGVjdCIsInN0YXRlIiwiYWN0aW9uIiwib3BlbiIsImNvbnRleHQiLCJzZWxlY3Rpb25Nb2RlIiwidHlwZSIsIlNlbGVjdEFjdGlvblR5cGVzIiwiYnV0dG9uQ2xpY2siLCJfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMiLCJpdGVtVG9IaWdobGlnaHQiLCJzZWxlY3RlZFZhbHVlcyIsIm1vdmVIaWdobGlnaHQiLCJkZWZhdWx0IiwiaGlnaGxpZ2h0ZWRWYWx1ZSIsIm5ld1N0YXRlIiwibGlzdFJlZHVjZXIiLCJMaXN0QWN0aW9uVHlwZXMiLCJrZXlEb3duIiwiZXZlbnQiLCJrZXkiLCJfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMyIiwiX3N0YXRlJHNlbGVjdGVkVmFsdWVzMyIsIml0ZW1DbGljayIsImJsdXIiXSwic291cmNlcyI6WyJzZWxlY3RSZWR1Y2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNlbGVjdFJlZHVjZXIgPSBzZWxlY3RSZWR1Y2VyO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX3VzZUxpc3QgPSByZXF1aXJlKFwiLi4vdXNlTGlzdFwiKTtcbnZhciBfdXNlU2VsZWN0ID0gcmVxdWlyZShcIi4vdXNlU2VsZWN0LnR5cGVzXCIpO1xuZnVuY3Rpb24gc2VsZWN0UmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIGNvbnN0IHtcbiAgICBvcGVuXG4gIH0gPSBzdGF0ZTtcbiAgY29uc3Qge1xuICAgIGNvbnRleHQ6IHtcbiAgICAgIHNlbGVjdGlvbk1vZGVcbiAgICB9XG4gIH0gPSBhY3Rpb247XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gX3VzZVNlbGVjdC5TZWxlY3RBY3Rpb25UeXBlcy5idXR0b25DbGljaykge1xuICAgIHZhciBfc3RhdGUkc2VsZWN0ZWRWYWx1ZXM7XG4gICAgY29uc3QgaXRlbVRvSGlnaGxpZ2h0ID0gKF9zdGF0ZSRzZWxlY3RlZFZhbHVlcyA9IHN0YXRlLnNlbGVjdGVkVmFsdWVzWzBdKSAhPSBudWxsID8gX3N0YXRlJHNlbGVjdGVkVmFsdWVzIDogKDAsIF91c2VMaXN0Lm1vdmVIaWdobGlnaHQpKG51bGwsICdzdGFydCcsIGFjdGlvbi5jb250ZXh0KTtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3RhdGUsIHtcbiAgICAgIG9wZW46ICFvcGVuLFxuICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZTogIW9wZW4gPyBpdGVtVG9IaWdobGlnaHQgOiBudWxsXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgbmV3U3RhdGUgPSAoMCwgX3VzZUxpc3QubGlzdFJlZHVjZXIpKHN0YXRlLCBhY3Rpb24pO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBfdXNlTGlzdC5MaXN0QWN0aW9uVHlwZXMua2V5RG93bjpcbiAgICAgIGlmIChzdGF0ZS5vcGVuKSB7XG4gICAgICAgIGlmIChhY3Rpb24uZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZSA9PT0gJ3NpbmdsZScgJiYgKGFjdGlvbi5ldmVudC5rZXkgPT09ICdFbnRlcicgfHwgYWN0aW9uLmV2ZW50LmtleSA9PT0gJyAnKSkge1xuICAgICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFjdGlvbi5ldmVudC5rZXkgPT09ICdFbnRlcicgfHwgYWN0aW9uLmV2ZW50LmtleSA9PT0gJyAnIHx8IGFjdGlvbi5ldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgdmFyIF9zdGF0ZSRzZWxlY3RlZFZhbHVlczI7XG4gICAgICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN0YXRlLCB7XG4gICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZTogKF9zdGF0ZSRzZWxlY3RlZFZhbHVlczIgPSBzdGF0ZS5zZWxlY3RlZFZhbHVlc1swXSkgIT0gbnVsbCA/IF9zdGF0ZSRzZWxlY3RlZFZhbHVlczIgOiAoMCwgX3VzZUxpc3QubW92ZUhpZ2hsaWdodCkobnVsbCwgJ3N0YXJ0JywgYWN0aW9uLmNvbnRleHQpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbi5ldmVudC5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgIHZhciBfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMzO1xuICAgICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkVmFsdWU6IChfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMzID0gc3RhdGUuc2VsZWN0ZWRWYWx1ZXNbMF0pICE9IG51bGwgPyBfc3RhdGUkc2VsZWN0ZWRWYWx1ZXMzIDogKDAsIF91c2VMaXN0Lm1vdmVIaWdobGlnaHQpKG51bGwsICdlbmQnLCBhY3Rpb24uY29udGV4dClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBfdXNlTGlzdC5MaXN0QWN0aW9uVHlwZXMuaXRlbUNsaWNrOlxuICAgICAgaWYgKHNlbGVjdGlvbk1vZGUgPT09ICdzaW5nbGUnKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBfdXNlTGlzdC5MaXN0QWN0aW9uVHlwZXMuYmx1cjpcbiAgICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3U3RhdGU7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxhQUFhLEdBQUdBLGFBQWE7QUFDckMsSUFBSUMsU0FBUyxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsSUFBSU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUlRLFVBQVUsR0FBR1IsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQzdDLFNBQVNLLGFBQWFBLENBQUNJLEtBQUssRUFBRUMsTUFBTSxFQUFFO0VBQ3BDLE1BQU07SUFDSkM7RUFDRixDQUFDLEdBQUdGLEtBQUs7RUFDVCxNQUFNO0lBQ0pHLE9BQU8sRUFBRTtNQUNQQztJQUNGO0VBQ0YsQ0FBQyxHQUFHSCxNQUFNO0VBQ1YsSUFBSUEsTUFBTSxDQUFDSSxJQUFJLEtBQUtOLFVBQVUsQ0FBQ08saUJBQWlCLENBQUNDLFdBQVcsRUFBRTtJQUM1RCxJQUFJQyxxQkFBcUI7SUFDekIsTUFBTUMsZUFBZSxHQUFHLENBQUNELHFCQUFxQixHQUFHUixLQUFLLENBQUNVLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUdGLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxFQUFFVixRQUFRLENBQUNhLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFVixNQUFNLENBQUNFLE9BQU8sQ0FBQztJQUN0SyxPQUFPLENBQUMsQ0FBQyxFQUFFTixTQUFTLENBQUNlLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRVosS0FBSyxFQUFFO01BQ3ZDRSxJQUFJLEVBQUUsQ0FBQ0EsSUFBSTtNQUNYVyxnQkFBZ0IsRUFBRSxDQUFDWCxJQUFJLEdBQUdPLGVBQWUsR0FBRztJQUM5QyxDQUFDLENBQUM7RUFDSjtFQUNBLE1BQU1LLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRWhCLFFBQVEsQ0FBQ2lCLFdBQVcsRUFBRWYsS0FBSyxFQUFFQyxNQUFNLENBQUM7RUFDekQsUUFBUUEsTUFBTSxDQUFDSSxJQUFJO0lBQ2pCLEtBQUtQLFFBQVEsQ0FBQ2tCLGVBQWUsQ0FBQ0MsT0FBTztNQUNuQyxJQUFJakIsS0FBSyxDQUFDRSxJQUFJLEVBQUU7UUFDZCxJQUFJRCxNQUFNLENBQUNpQixLQUFLLENBQUNDLEdBQUcsS0FBSyxRQUFRLEVBQUU7VUFDakMsT0FBTyxDQUFDLENBQUMsRUFBRXRCLFNBQVMsQ0FBQ2UsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRSxRQUFRLEVBQUU7WUFDMUNaLElBQUksRUFBRTtVQUNSLENBQUMsQ0FBQztRQUNKO1FBQ0EsSUFBSUUsYUFBYSxLQUFLLFFBQVEsS0FBS0gsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssT0FBTyxJQUFJbEIsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUU7VUFDNUYsT0FBTyxDQUFDLENBQUMsRUFBRXRCLFNBQVMsQ0FBQ2UsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRSxRQUFRLEVBQUU7WUFDMUNaLElBQUksRUFBRTtVQUNSLENBQUMsQ0FBQztRQUNKO01BQ0YsQ0FBQyxNQUFNO1FBQ0wsSUFBSUQsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssT0FBTyxJQUFJbEIsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssR0FBRyxJQUFJbEIsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssV0FBVyxFQUFFO1VBQ2hHLElBQUlDLHNCQUFzQjtVQUMxQixPQUFPLENBQUMsQ0FBQyxFQUFFdkIsU0FBUyxDQUFDZSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVaLEtBQUssRUFBRTtZQUN2Q0UsSUFBSSxFQUFFLElBQUk7WUFDVlcsZ0JBQWdCLEVBQUUsQ0FBQ08sc0JBQXNCLEdBQUdwQixLQUFLLENBQUNVLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUdVLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxFQUFFdEIsUUFBUSxDQUFDYSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRVYsTUFBTSxDQUFDRSxPQUFPO1VBQ25LLENBQUMsQ0FBQztRQUNKO1FBQ0EsSUFBSUYsTUFBTSxDQUFDaUIsS0FBSyxDQUFDQyxHQUFHLEtBQUssU0FBUyxFQUFFO1VBQ2xDLElBQUlFLHNCQUFzQjtVQUMxQixPQUFPLENBQUMsQ0FBQyxFQUFFeEIsU0FBUyxDQUFDZSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVaLEtBQUssRUFBRTtZQUN2Q0UsSUFBSSxFQUFFLElBQUk7WUFDVlcsZ0JBQWdCLEVBQUUsQ0FBQ1Esc0JBQXNCLEdBQUdyQixLQUFLLENBQUNVLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUdXLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxFQUFFdkIsUUFBUSxDQUFDYSxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRVYsTUFBTSxDQUFDRSxPQUFPO1VBQ2pLLENBQUMsQ0FBQztRQUNKO01BQ0Y7TUFDQTtJQUNGLEtBQUtMLFFBQVEsQ0FBQ2tCLGVBQWUsQ0FBQ00sU0FBUztNQUNyQyxJQUFJbEIsYUFBYSxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLENBQUMsQ0FBQyxFQUFFUCxTQUFTLENBQUNlLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUUsUUFBUSxFQUFFO1VBQzFDWixJQUFJLEVBQUU7UUFDUixDQUFDLENBQUM7TUFDSjtNQUNBO0lBQ0YsS0FBS0osUUFBUSxDQUFDa0IsZUFBZSxDQUFDTyxJQUFJO01BQ2hDLE9BQU8sQ0FBQyxDQUFDLEVBQUUxQixTQUFTLENBQUNlLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUUsUUFBUSxFQUFFO1FBQzFDWixJQUFJLEVBQUU7TUFDUixDQUFDLENBQUM7SUFDSjtNQUNFLE9BQU9ZLFFBQVE7RUFBQztFQUVwQixPQUFPQSxRQUFRO0FBQ2pCIn0=