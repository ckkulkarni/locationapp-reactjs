25b1b869f3437ba807978a8dd7a205a6
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
const mockGeolocation = {
  getCurrentPosition: jest.fn()
};
Object.defineProperty(global.navigator, "geolocation", {
  value: mockGeolocation,
  configurable: true
});
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    const mockAddressResponse = {
      data: {
        results: [{
          formatted_address: "123 Street, Hyd"
        }]
      }
    };
    _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", () => {
      expect(screen).toBeTruthy();
      const currentAddress = screen.getByText("123 Street, Hyd");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJtb2NrR2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJmbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImxvY2F0aW9uTGlzdCIsImxvY2F0aW9uU2xpY2UiLCJtb2NrUG9zaXRpb24iLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIm1vY2tBZGRyZXNzUmVzcG9uc2UiLCJkYXRhIiwicmVzdWx0cyIsImZvcm1hdHRlZF9hZGRyZXNzIiwiYXhpb3MiLCJnZXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJNZW1vcnlSb3V0ZXIiLCJSb3V0ZXMiLCJSb3V0ZSIsInBhdGgiLCJlbGVtZW50IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImN1cnJlbnRBZGRyZXNzIiwiZ2V0QnlUZXh0Il0sInNvdXJjZXMiOlsibG9jYXRpb25zLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IsIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IGxvY2F0aW9uU2xpY2UsIHtcclxuICBhZGRQcmV2aW91c0xvY2F0aW9uLFxyXG4gIGNsZWFyUHJldmlvdXNMb2NhdGlvbnMsXHJcbiAgcmVtb3ZlUHJldmlvdXNMb2NhdGlvbixcclxuICBzZXRDdXJyZW50TG9jYXRpb24sXHJcbn0gZnJvbSBcIi4vLi4vLi4vcmVkdWNlcnMvcmVkdWNlci9sb2NhdGlvblNsaWNlXCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgTG9jYXRpb25zIGZyb20gXCIuLi8uLi9Mb2NhdGlvbnNcIjtcclxuaW1wb3J0IE1hcCBmcm9tIFwiLi4vLi4vTWFwXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuamVzdC5tb2NrKFwiYXhpb3NcIik7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2xvY2F0aW9ucy5mZWF0dXJlXCIpO1xyXG5jb25zdCBtb2NrR2VvbG9jYXRpb24gPSB7XHJcbiAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKCksXHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwubmF2aWdhdG9yLCBcImdlb2xvY2F0aW9uXCIsIHtcclxuICB2YWx1ZTogbW9ja0dlb2xvY2F0aW9uLFxyXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxufSk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiRGlzcGxheWluZyBDdXJyZW50IExvY2F0aW9uXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuIH0pID0+IHtcclxuICAgIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgbG9jYXRpb25MaXN0OiBsb2NhdGlvblNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBtb2NrUG9zaXRpb24gPSB7XHJcbiAgICAgIGNvb3Jkczoge1xyXG4gICAgICAgIGxhdGl0dWRlOiAzNy43NzQ5LFxyXG4gICAgICAgIGxvbmdpdHVkZTogLTEyMi40MTk0LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vY2tBZGRyZXNzUmVzcG9uc2UgPSB7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICByZXN1bHRzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlZF9hZGRyZXNzOiBcIjEyMyBTdHJlZXQsIEh5ZFwiLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tBZGRyZXNzUmVzcG9uc2UpO1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8TWVtb3J5Um91dGVyPlxyXG4gICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PExvY2F0aW9ucyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbWFwXCIgZWxlbWVudD17PE1hcCAvPn0gLz5cclxuICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgKTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIExvY2F0aW9ucyBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCBjdXJyZW50QWRkcmVzcyA9IHNjcmVlbi5nZXRCeVRleHQoXCIxMjMgU3RyZWV0LCBIeWRcIik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFzQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQXRCbEIsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGNBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQU1BLElBQUFNLGVBQUEsR0FBQU4sT0FBQTtBQU1BLElBQUFPLFVBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLElBQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFTLE1BQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwQixTQUFBRCx1QkFBQVcsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUFBLFNBQUFkLFlBQUE7RUFBQTtJQUFBaUI7RUFBQSxJQUFBYixPQUFBO0VBQUFKLFdBQUEsR0FBQUEsQ0FBQSxLQUFBaUIsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUUxQixNQUFNQyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQywyQ0FBMkMsQ0FBQztBQUN4RSxNQUFNQyxlQUFlLEdBQUc7RUFDdEJDLGtCQUFrQixFQUFFSixJQUFJLENBQUNLLEVBQUU7QUFDN0IsQ0FBQztBQUNEQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLEVBQUUsYUFBYSxFQUFFO0VBQ3JEQyxLQUFLLEVBQUVQLGVBQWU7RUFDdEJRLFlBQVksRUFBRTtBQUNoQixDQUFDLENBQUM7QUFDRixJQUFBQywyQkFBYSxFQUFDWCxPQUFPLEVBQUdZLElBQUksSUFBSztFQUMvQkEsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7SUFBRUMsS0FBSztJQUFFQyxJQUFJO0lBQUVDO0VBQUssQ0FBQyxLQUFLO0lBQzdELE1BQU1DLEtBQUssR0FBRyxJQUFBQyx1QkFBYyxFQUFDO01BQzNCQyxPQUFPLEVBQUU7UUFDUEMsWUFBWSxFQUFFQztNQUNoQjtJQUNGLENBQUMsQ0FBQztJQUNGLE1BQU1DLFlBQVksR0FBRztNQUNuQkMsTUFBTSxFQUFFO1FBQ05DLFFBQVEsRUFBRSxPQUFPO1FBQ2pCQyxTQUFTLEVBQUUsQ0FBQztNQUNkO0lBQ0YsQ0FBQztJQUNELE1BQU1DLG1CQUFtQixHQUFHO01BQzFCQyxJQUFJLEVBQUU7UUFDSkMsT0FBTyxFQUFFLENBQ1A7VUFDRUMsaUJBQWlCLEVBQUU7UUFDckIsQ0FBQztNQUVMO0lBQ0YsQ0FBQztJQUVBQyxjQUFLLENBQUNDLEdBQUcsQ0FBZUMscUJBQXFCLENBQUNOLG1CQUFtQixDQUFDO0lBQ25FLE1BQU1PLE1BQU0sR0FBRyxJQUFBQyxjQUFNLGdCQUNuQmpELE1BQUEsQ0FBQWMsT0FBQSxDQUFBb0MsYUFBQSxDQUFDN0MsV0FBQSxDQUFBOEMsUUFBUTtNQUFDbkIsS0FBSyxFQUFFQTtJQUFNLGdCQUNyQmhDLE1BQUEsQ0FBQWMsT0FBQSxDQUFBb0MsYUFBQSxDQUFDMUMsZUFBQSxDQUFBNEMsWUFBWSxxQkFDWHBELE1BQUEsQ0FBQWMsT0FBQSxDQUFBb0MsYUFBQSxDQUFDMUMsZUFBQSxDQUFBNkMsTUFBTSxxQkFDTHJELE1BQUEsQ0FBQWMsT0FBQSxDQUFBb0MsYUFBQSxDQUFDMUMsZUFBQSxDQUFBOEMsS0FBSztNQUFDQyxJQUFJLEVBQUMsR0FBRztNQUFDQyxPQUFPLGVBQUV4RCxNQUFBLENBQUFjLE9BQUEsQ0FBQW9DLGFBQUEsQ0FBQ3pDLFVBQUEsQ0FBQUssT0FBUztJQUFJLEVBQUcsZUFDMUNkLE1BQUEsQ0FBQWMsT0FBQSxDQUFBb0MsYUFBQSxDQUFDMUMsZUFBQSxDQUFBOEMsS0FBSztNQUFDQyxJQUFJLEVBQUMsTUFBTTtNQUFDQyxPQUFPLGVBQUV4RCxNQUFBLENBQUFjLE9BQUEsQ0FBQW9DLGFBQUEsQ0FBQ3hDLElBQUEsQ0FBQUksT0FBRztJQUFJLEVBQUcsQ0FDaEMsQ0FDSSxDQUNOLENBQ1o7SUFDRGUsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLE1BQU07TUFDL0M0QixNQUFNLENBQUNULE1BQU0sQ0FBQyxDQUFDVSxVQUFVLEVBQUU7TUFDM0IsTUFBTUMsY0FBYyxHQUFHWCxNQUFNLENBQUNZLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztJQUM1RCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==