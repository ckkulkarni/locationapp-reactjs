6b02368b4aebf074ee028807931926dd
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassNameConfigurator = ClassNameConfigurator;
exports.useClassNamesOverride = useClassNamesOverride;
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const defaultContextValue = {
  disableDefaultClasses: false
};
const ClassNameConfiguratorContext = /*#__PURE__*/React.createContext(defaultContextValue);
/**
 * @ignore - internal hook.
 *
 * Wraps the `generateUtilityClass` function and controls how the classes are generated.
 * Currently it only affects whether the classes are applied or not.
 *
 * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.
 */
function useClassNamesOverride(generateUtilityClass) {
  const {
    disableDefaultClasses
  } = React.useContext(ClassNameConfiguratorContext);
  return slot => {
    if (disableDefaultClasses) {
      return '';
    }
    return generateUtilityClass(slot);
  };
}

/**
 * Allows to configure the components within to not apply any built-in classes.
 */
function ClassNameConfigurator(props) {
  const {
    disableDefaultClasses,
    children
  } = props;
  const contextValue = React.useMemo(() => ({
    disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false
  }), [disableDefaultClasses]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ClassNameConfiguratorContext.Provider, {
    value: contextValue,
    children: children
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNsYXNzTmFtZUNvbmZpZ3VyYXRvciIsInVzZUNsYXNzTmFtZXNPdmVycmlkZSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImRlZmF1bHRDb250ZXh0VmFsdWUiLCJkaXNhYmxlRGVmYXVsdENsYXNzZXMiLCJDbGFzc05hbWVDb25maWd1cmF0b3JDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwidXNlQ29udGV4dCIsInNsb3QiLCJwcm9wcyIsImNoaWxkcmVuIiwiY29udGV4dFZhbHVlIiwidXNlTWVtbyIsImpzeCIsIlByb3ZpZGVyIl0sInNvdXJjZXMiOlsiQ2xhc3NOYW1lQ29uZmlndXJhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DbGFzc05hbWVDb25maWd1cmF0b3IgPSBDbGFzc05hbWVDb25maWd1cmF0b3I7XG5leHBvcnRzLnVzZUNsYXNzTmFtZXNPdmVycmlkZSA9IHVzZUNsYXNzTmFtZXNPdmVycmlkZTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmNvbnN0IGRlZmF1bHRDb250ZXh0VmFsdWUgPSB7XG4gIGRpc2FibGVEZWZhdWx0Q2xhc3NlczogZmFsc2Vcbn07XG5jb25zdCBDbGFzc05hbWVDb25maWd1cmF0b3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdENvbnRleHRWYWx1ZSk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBob29rLlxuICpcbiAqIFdyYXBzIHRoZSBgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NgIGZ1bmN0aW9uIGFuZCBjb250cm9scyBob3cgdGhlIGNsYXNzZXMgYXJlIGdlbmVyYXRlZC5cbiAqIEN1cnJlbnRseSBpdCBvbmx5IGFmZmVjdHMgd2hldGhlciB0aGUgY2xhc3NlcyBhcmUgYXBwbGllZCBvciBub3QuXG4gKlxuICogQHJldHVybnMgRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggdGhlIGBnZW5lcmF0ZVV0aWxpdHlDbGFzc2AgZnVuY3Rpb24gc3BlY2lmaWMgdG8gYSBjb21wb25lbnQgdG8gZ2VuZXJhdGUgdGhlIGNsYXNzZXMuXG4gKi9cbmZ1bmN0aW9uIHVzZUNsYXNzTmFtZXNPdmVycmlkZShnZW5lcmF0ZVV0aWxpdHlDbGFzcykge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZURlZmF1bHRDbGFzc2VzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KENsYXNzTmFtZUNvbmZpZ3VyYXRvckNvbnRleHQpO1xuICByZXR1cm4gc2xvdCA9PiB7XG4gICAgaWYgKGRpc2FibGVEZWZhdWx0Q2xhc3Nlcykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Moc2xvdCk7XG4gIH07XG59XG5cbi8qKlxuICogQWxsb3dzIHRvIGNvbmZpZ3VyZSB0aGUgY29tcG9uZW50cyB3aXRoaW4gdG8gbm90IGFwcGx5IGFueSBidWlsdC1pbiBjbGFzc2VzLlxuICovXG5mdW5jdGlvbiBDbGFzc05hbWVDb25maWd1cmF0b3IocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVEZWZhdWx0Q2xhc3NlcyxcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkaXNhYmxlRGVmYXVsdENsYXNzZXM6IGRpc2FibGVEZWZhdWx0Q2xhc3NlcyAhPSBudWxsID8gZGlzYWJsZURlZmF1bHRDbGFzc2VzIDogZmFsc2VcbiAgfSksIFtkaXNhYmxlRGVmYXVsdENsYXNzZXNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShDbGFzc05hbWVDb25maWd1cmF0b3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQ1osWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLHFCQUFxQixHQUFHQSxxQkFBcUI7QUFDckRGLE9BQU8sQ0FBQ0cscUJBQXFCLEdBQUdB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