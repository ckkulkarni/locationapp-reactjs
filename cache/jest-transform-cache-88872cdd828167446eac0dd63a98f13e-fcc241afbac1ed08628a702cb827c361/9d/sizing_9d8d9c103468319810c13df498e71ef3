52f1abb4e8075de34dc9a1403333ec4c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
exports.sizingTransform = sizingTransform;
exports.width = void 0;
var _style = _interopRequireDefault(require("./style"));
var _compose = _interopRequireDefault(require("./compose"));
var _breakpoints = require("./breakpoints");
function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = (0, _style.default)({
  prop: 'width',
  transform: sizingTransform
});
exports.width = width;
const maxWidth = props => {
  if (props.maxWidth !== undefined && props.maxWidth !== null) {
    const styleFromPropValue = propValue => {
      var _props$theme;
      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
      return {
        maxWidth: breakpoint || sizingTransform(propValue)
      };
    };
    return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
exports.maxWidth = maxWidth;
maxWidth.filterProps = ['maxWidth'];
const minWidth = (0, _style.default)({
  prop: 'minWidth',
  transform: sizingTransform
});
exports.minWidth = minWidth;
const height = (0, _style.default)({
  prop: 'height',
  transform: sizingTransform
});
exports.height = height;
const maxHeight = (0, _style.default)({
  prop: 'maxHeight',
  transform: sizingTransform
});
exports.maxHeight = maxHeight;
const minHeight = (0, _style.default)({
  prop: 'minHeight',
  transform: sizingTransform
});
exports.minHeight = minHeight;
const sizeWidth = (0, _style.default)({
  prop: 'size',
  cssProperty: 'width',
  transform: sizingTransform
});
exports.sizeWidth = sizeWidth;
const sizeHeight = (0, _style.default)({
  prop: 'size',
  cssProperty: 'height',
  transform: sizingTransform
});
exports.sizeHeight = sizeHeight;
const boxSizing = (0, _style.default)({
  prop: 'boxSizing'
});
exports.boxSizing = boxSizing;
const sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
var _default = sizing;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2l6ZVdpZHRoIiwic2l6ZUhlaWdodCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJoZWlnaHQiLCJkZWZhdWx0IiwiYm94U2l6aW5nIiwic2l6aW5nVHJhbnNmb3JtIiwid2lkdGgiLCJfc3R5bGUiLCJfY29tcG9zZSIsIl9icmVha3BvaW50cyIsInByb3AiLCJ0cmFuc2Zvcm0iLCJwcm9wcyIsInVuZGVmaW5lZCIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInByb3BWYWx1ZSIsIl9wcm9wcyR0aGVtZSIsImJyZWFrcG9pbnQiLCJ0aGVtZSIsImJyZWFrcG9pbnRzIiwidmFsdWVzIiwiaGFuZGxlQnJlYWtwb2ludHMiLCJmaWx0ZXJQcm9wcyIsImNzc1Byb3BlcnR5Iiwic2l6aW5nIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJzaXppbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2l6ZVdpZHRoID0gZXhwb3J0cy5zaXplSGVpZ2h0ID0gZXhwb3J0cy5taW5XaWR0aCA9IGV4cG9ydHMubWluSGVpZ2h0ID0gZXhwb3J0cy5tYXhXaWR0aCA9IGV4cG9ydHMubWF4SGVpZ2h0ID0gZXhwb3J0cy5oZWlnaHQgPSBleHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmJveFNpemluZyA9IHZvaWQgMDtcbmV4cG9ydHMuc2l6aW5nVHJhbnNmb3JtID0gc2l6aW5nVHJhbnNmb3JtO1xuZXhwb3J0cy53aWR0aCA9IHZvaWQgMDtcbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3N0eWxlXCIpKTtcbnZhciBfY29tcG9zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9zZVwiKSk7XG52YXIgX2JyZWFrcG9pbnRzID0gcmVxdWlyZShcIi4vYnJlYWtwb2ludHNcIik7XG5mdW5jdGlvbiBzaXppbmdUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgJiYgdmFsdWUgIT09IDAgPyBgJHt2YWx1ZSAqIDEwMH0lYCA6IHZhbHVlO1xufVxuY29uc3Qgd2lkdGggPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xuY29uc3QgbWF4V2lkdGggPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLm1heFdpZHRoICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+IHtcbiAgICAgIHZhciBfcHJvcHMkdGhlbWU7XG4gICAgICBjb25zdCBicmVha3BvaW50ID0gKChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBfcHJvcHMkdGhlbWUudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lW3Byb3BWYWx1ZV0pIHx8IF9icmVha3BvaW50cy52YWx1ZXNbcHJvcFZhbHVlXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50IHx8IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuICgwLCBfYnJlYWtwb2ludHMuaGFuZGxlQnJlYWtwb2ludHMpKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnRzLm1heFdpZHRoID0gbWF4V2lkdGg7XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmNvbnN0IG1pbldpZHRoID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydHMubWluV2lkdGggPSBtaW5XaWR0aDtcbmNvbnN0IGhlaWdodCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0cy5oZWlnaHQgPSBoZWlnaHQ7XG5jb25zdCBtYXhIZWlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydHMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuY29uc3QgbWluSGVpZ2h0ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnRzLm1pbkhlaWdodCA9IG1pbkhlaWdodDtcbmNvbnN0IHNpemVXaWR0aCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnRzLnNpemVXaWR0aCA9IHNpemVXaWR0aDtcbmNvbnN0IHNpemVIZWlnaHQgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydHMuc2l6ZUhlaWdodCA9IHNpemVIZWlnaHQ7XG5jb25zdCBib3hTaXppbmcgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuZXhwb3J0cy5ib3hTaXppbmcgPSBib3hTaXppbmc7XG5jb25zdCBzaXppbmcgPSAoMCwgX2NvbXBvc2UuZGVmYXVsdCkod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbnZhciBfZGVmYXVsdCA9IHNpemluZztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsU0FBUyxHQUFHRixPQUFPLENBQUNHLFVBQVUsR0FBR0gsT0FBTyxDQUFDSSxRQUFRLEdBQUdKLE9BQU8sQ0FBQ0ssU0FBUyxHQUFHTCxPQUFPLENBQUNNLFFBQVEsR0FBR04sT0FBTyxDQUFDTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQ1EsTUFBTSxHQUFHUixPQUFPLENBQUNTLE9BQU8sR0FBR1QsT0FBTyxDQUFDVSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3BMVixPQUFPLENBQUNXLGVBQWUsR0FBR0EsZUFBZTtBQUN6Q1gsT0FBTyxDQUFDWSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLElBQUlDLE1BQU0sR0FBR2pCLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkQsSUFBSWlCLFFBQVEsR0FBR2xCLHNC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