2a68c8f17c1d5f29f8984901929fec12
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Map = _interopRequireDefault(require("../../Map"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/map.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Viewing Location on the Map", ({
    given,
    when,
    then,
    and
  }) => {
    const locationState = {
      lat: 37.7749,
      lng: -122.4194,
      address: "123 Street, Hyd"
    };
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: [{
        pathname: "/map",
        state: locationState
      }]
    }, /*#__PURE__*/_react.default.createElement(_Map.default, null)));
    given("the user is on the Map page", () => {
      const mapContainer = screen.getByTestId("map-container");
      expect(mapContainer).toBeInTheDocument();
    });
    when("the user should see the address of the location that will be displayed in the map", () => {
      const addressContainer = screen.getByText("123 Street, Hyd");
      expect(addressContainer).toBeInTheDocument();
    });
    and("the user should see a marker indicating the specified location", () => {
      const marker = screen.getByAltText("Marker");
      expect(marker).toBeInTheDocument();
    });
    and("the user should see the map rendered correclty", () => {
      const mapContainer = screen.getAllByRole("img");
      expect(mapContainer[0]).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX01hcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwibG9jYXRpb25TdGF0ZSIsImxhdCIsImxuZyIsImFkZHJlc3MiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiTWVtb3J5Um91dGVyIiwiaW5pdGlhbEVudHJpZXMiLCJwYXRobmFtZSIsInN0YXRlIiwibWFwQ29udGFpbmVyIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImFkZHJlc3NDb250YWluZXIiLCJnZXRCeVRleHQiLCJtYXJrZXIiLCJnZXRCeUFsdFRleHQiLCJnZXRBbGxCeVJvbGUiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIm1hcHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBmaXJlRXZlbnQsIHJlbmRlciwgd2FpdEZvciwgYWN0IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IFwidGV4dC1lbmNvZGluZ1wiO1xyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcclxuaW1wb3J0IHtcclxuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcclxuICBSb3V0ZXMsXHJcbiAgUm91dGUsXHJcbiAgTWVtb3J5Um91dGVyLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBMb2NhdGlvbnMgZnJvbSBcIi4uLy4uL0xvY2F0aW9uc1wiO1xyXG5pbXBvcnQgTWFwIGZyb20gXCIuLi8uLi9NYXBcIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvbWFwLmZlYXR1cmVcIik7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlZpZXdpbmcgTG9jYXRpb24gb24gdGhlIE1hcFwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiwgYW5kIH0pID0+IHtcclxuICAgIGNvbnN0IGxvY2F0aW9uU3RhdGUgPSB7XHJcbiAgICAgIGxhdDogMzcuNzc0OSxcclxuICAgICAgbG5nOiAtMTIyLjQxOTQsXHJcbiAgICAgIGFkZHJlc3M6IFwiMTIzIFN0cmVldCwgSHlkXCIsXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICA8TWVtb3J5Um91dGVyXHJcbiAgICAgICAgaW5pdGlhbEVudHJpZXM9e1t7IHBhdGhuYW1lOiBcIi9tYXBcIiwgc3RhdGU6IGxvY2F0aW9uU3RhdGUgfV19XHJcbiAgICAgID5cclxuICAgICAgICA8TWFwIC8+XHJcbiAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgKTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIE1hcCBwYWdlXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgbWFwQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGVzdElkKFwibWFwLWNvbnRhaW5lclwiKTtcclxuICAgICAgZXhwZWN0KG1hcENvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXHJcbiAgICAgIFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGUgYWRkcmVzcyBvZiB0aGUgbG9jYXRpb24gdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgbWFwXCIsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBjb25zdCBhZGRyZXNzQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGV4dChcIjEyMyBTdHJlZXQsIEh5ZFwiKTtcclxuICAgICAgICBleHBlY3QoYWRkcmVzc0NvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIGFuZChcclxuICAgICAgXCJ0aGUgdXNlciBzaG91bGQgc2VlIGEgbWFya2VyIGluZGljYXRpbmcgdGhlIHNwZWNpZmllZCBsb2NhdGlvblwiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFya2VyID0gc2NyZWVuLmdldEJ5QWx0VGV4dChcIk1hcmtlclwiKTtcclxuICAgICAgICBleHBlY3QobWFya2VyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGFuZChcInRoZSB1c2VyIHNob3VsZCBzZWUgdGhlIG1hcCByZW5kZXJlZCBjb3JyZWNsdHlcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtYXBDb250YWluZXIgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKFwiaW1nXCIpO1xyXG4gICAgICBleHBlY3QobWFwQ29udGFpbmVyWzBdKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUgsT0FBQTtBQU9BLElBQUFJLElBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUE0QixTQUFBRCx1QkFBQU0sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUM1QixNQUFNRyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyxxQ0FBcUMsQ0FBQztBQUVsRSxJQUFBQywyQkFBYSxFQUFDRixPQUFPLEVBQUdHLElBQUksSUFBSztFQUMvQkEsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7SUFBRUMsS0FBSztJQUFFQyxJQUFJO0lBQUVDLElBQUk7SUFBRUM7RUFBSSxDQUFDLEtBQUs7SUFDbEUsTUFBTUMsYUFBYSxHQUFHO01BQ3BCQyxHQUFHLEVBQUUsT0FBTztNQUNaQyxHQUFHLEVBQUUsQ0FBQyxRQUFRO01BQ2RDLE9BQU8sRUFBRTtJQUNYLENBQUM7SUFDRCxNQUFNQyxNQUFNLEdBQUcsSUFBQUMsY0FBTSxnQkFDbkJ2QixNQUFBLENBQUFTLE9BQUEsQ0FBQWUsYUFBQSxDQUFDbkIsZUFBQSxDQUFBb0IsWUFBWTtNQUNYQyxjQUFjLEVBQUUsQ0FBQztRQUFFQyxRQUFRLEVBQUUsTUFBTTtRQUFFQyxLQUFLLEVBQUVWO01BQWMsQ0FBQztJQUFFLGdCQUU3RGxCLE1BQUEsQ0FBQVMsT0FBQSxDQUFBZSxhQUFBLENBQUNsQixJQUFBLENBQUFHLE9BQUcsT0FBRyxDQUNNLENBQ2hCO0lBQ0RLLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxNQUFNO01BQ3pDLE1BQU1lLFlBQVksR0FBR1AsTUFBTSxDQUFDUSxXQUFXLENBQUMsZUFBZSxDQUFDO01BQ3hEQyxNQUFNLENBQUNGLFlBQVksQ0FBQyxDQUFDRyxpQkFBaUIsRUFBRTtJQUMxQyxDQUFDLENBQUM7SUFFRmpCLElBQUksQ0FDRixtRkFBbUYsRUFDbkYsTUFBTTtNQUNKLE1BQU1rQixnQkFBZ0IsR0FBR1gsTUFBTSxDQUFDWSxTQUFTLENBQUMsaUJBQWlCLENBQUM7TUFDNURILE1BQU0sQ0FBQ0UsZ0JBQWdCLENBQUMsQ0FBQ0QsaUJBQWlCLEVBQUU7SUFDOUMsQ0FBQyxDQUNGO0lBQ0RmLEdBQUcsQ0FDRCxnRUFBZ0UsRUFDaEUsTUFBTTtNQUNKLE1BQU1rQixNQUFNLEdBQUdiLE1BQU0sQ0FBQ2MsWUFBWSxDQUFDLFFBQVEsQ0FBQztNQUM1Q0wsTUFBTSxDQUFDSSxNQUFNLENBQUMsQ0FBQ0gsaUJBQWlCLEVBQUU7SUFDcEMsQ0FBQyxDQUNGO0lBRURmLEdBQUcsQ0FBQyxnREFBZ0QsRUFBRSxNQUFNO01BQzFELE1BQU1ZLFlBQVksR0FBR1AsTUFBTSxDQUFDZSxZQUFZLENBQUMsS0FBSyxDQUFDO01BQy9DTixNQUFNLENBQUNGLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDUyxXQUFXLEVBQUU7SUFDdkMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=