33964c09c3595a506d99466618834719
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectProvider = SelectProvider;
var React = _interopRequireWildcard(require("react"));
var _ListContext = require("../useList/ListContext");
var _useCompound = require("../utils/useCompound");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
/**
 * Sets up the contexts for the underlying Option components.
 *
 * @ignore - do not document.
 */
function SelectProvider(props) {
  const {
    value,
    children
  } = props;
  const {
    dispatch,
    getItemIndex,
    getItemState,
    registerHighlightChangeHandler,
    registerSelectionChangeHandler,
    registerItem,
    totalSubitemCount
  } = value;
  const listContextValue = React.useMemo(() => ({
    dispatch,
    getItemState,
    getItemIndex,
    registerHighlightChangeHandler,
    registerSelectionChangeHandler
  }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
  const compoundComponentContextValue = React.useMemo(() => ({
    getItemIndex,
    registerItem,
    totalSubitemCount
  }), [registerItem, getItemIndex, totalSubitemCount]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_useCompound.CompoundComponentContext.Provider, {
    value: compoundComponentContextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.ListContext.Provider, {
      value: listContextValue,
      children: children
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNlbGVjdFByb3ZpZGVyIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfTGlzdENvbnRleHQiLCJfdXNlQ29tcG91bmQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwicHJvcHMiLCJjaGlsZHJlbiIsImRpc3BhdGNoIiwiZ2V0SXRlbUluZGV4IiwiZ2V0SXRlbVN0YXRlIiwicmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyIiwicmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyIiwicmVnaXN0ZXJJdGVtIiwidG90YWxTdWJpdGVtQ291bnQiLCJsaXN0Q29udGV4dFZhbHVlIiwidXNlTWVtbyIsImNvbXBvdW5kQ29tcG9uZW50Q29udGV4dFZhbHVlIiwianN4IiwiQ29tcG91bmRDb21wb25lbnRDb250ZXh0IiwiUHJvdmlkZXIiLCJMaXN0Q29udGV4dCJdLCJzb3VyY2VzIjpbIlNlbGVjdFByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TZWxlY3RQcm92aWRlciA9IFNlbGVjdFByb3ZpZGVyO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfTGlzdENvbnRleHQgPSByZXF1aXJlKFwiLi4vdXNlTGlzdC9MaXN0Q29udGV4dFwiKTtcbnZhciBfdXNlQ29tcG91bmQgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXNlQ29tcG91bmRcIik7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbi8qKlxuICogU2V0cyB1cCB0aGUgY29udGV4dHMgZm9yIHRoZSB1bmRlcmx5aW5nIE9wdGlvbiBjb21wb25lbnRzLlxuICpcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIFNlbGVjdFByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZSxcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHtcbiAgICBkaXNwYXRjaCxcbiAgICBnZXRJdGVtSW5kZXgsXG4gICAgZ2V0SXRlbVN0YXRlLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXIsXG4gICAgcmVnaXN0ZXJJdGVtLFxuICAgIHRvdGFsU3ViaXRlbUNvdW50XG4gIH0gPSB2YWx1ZTtcbiAgY29uc3QgbGlzdENvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkaXNwYXRjaCxcbiAgICBnZXRJdGVtU3RhdGUsXG4gICAgZ2V0SXRlbUluZGV4LFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlcixcbiAgICByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXJcbiAgfSksIFtkaXNwYXRjaCwgZ2V0SXRlbUluZGV4LCBnZXRJdGVtU3RhdGUsIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciwgcmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyXSk7XG4gIGNvbnN0IGNvbXBvdW5kQ29tcG9uZW50Q29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGdldEl0ZW1JbmRleCxcbiAgICByZWdpc3Rlckl0ZW0sXG4gICAgdG90YWxTdWJpdGVtQ291bnRcbiAgfSksIFtyZWdpc3Rlckl0ZW0sIGdldEl0ZW1JbmRleCwgdG90YWxTdWJpdGVtQ291bnRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShfdXNlQ29tcG91bmQuQ29tcG91bmRDb21wb25lbnRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbXBvdW5kQ29tcG9uZW50Q29udGV4dFZhbHVlLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoX0xpc3RDb250ZXh0Lkxpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogbGlzdENvbnRleHRWYWx1ZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXG4gIH0pO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxjQUFjLEdBQUdBLGNBQWM7QUFDdkMsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFD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