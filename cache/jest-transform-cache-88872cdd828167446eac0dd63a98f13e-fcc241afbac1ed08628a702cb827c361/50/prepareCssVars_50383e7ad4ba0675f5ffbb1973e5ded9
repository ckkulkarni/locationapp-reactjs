18885df16b11c57239fdd9f93d6effe5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _cssVarsParser = _interopRequireDefault(require("./cssVarsParser"));
const _excluded = ["colorSchemes", "components"],
  _excluded2 = ["light"];
function prepareCssVars(theme, parserConfig) {
  // @ts-ignore - ignore components do not exist
  const {
      colorSchemes = {}
    } = theme,
    otherTheme = (0, _objectWithoutPropertiesLoose2.default)(theme, _excluded);
  const {
    vars: rootVars,
    css: rootCss,
    varsWithDefaults: rootVarsWithDefaults
  } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
  let themeVars = rootVarsWithDefaults;
  const colorSchemesMap = {};
  const {
      light
    } = colorSchemes,
    otherColorSchemes = (0, _objectWithoutPropertiesLoose2.default)(colorSchemes, _excluded2);
  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
    const {
      vars,
      css,
      varsWithDefaults
    } = (0, _cssVarsParser.default)(scheme, parserConfig);
    themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
    colorSchemesMap[key] = {
      css,
      vars
    };
  });
  if (light) {
    // light color scheme vars should be merged last to set as default
    const {
      css,
      vars,
      varsWithDefaults
    } = (0, _cssVarsParser.default)(light, parserConfig);
    themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
    colorSchemesMap.light = {
      css,
      vars
    };
  }
  const generateCssVars = colorScheme => {
    if (!colorScheme) {
      return {
        css: (0, _extends2.default)({}, rootCss),
        vars: rootVars
      };
    }
    return {
      css: (0, _extends2.default)({}, colorSchemesMap[colorScheme].css),
      vars: colorSchemesMap[colorScheme].vars
    };
  };
  return {
    vars: themeVars,
    generateCssVars
  };
}
var _default = prepareCssVars;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9jc3NWYXJzUGFyc2VyIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsInByZXBhcmVDc3NWYXJzIiwidGhlbWUiLCJwYXJzZXJDb25maWciLCJjb2xvclNjaGVtZXMiLCJvdGhlclRoZW1lIiwidmFycyIsInJvb3RWYXJzIiwiY3NzIiwicm9vdENzcyIsInZhcnNXaXRoRGVmYXVsdHMiLCJyb290VmFyc1dpdGhEZWZhdWx0cyIsInRoZW1lVmFycyIsImNvbG9yU2NoZW1lc01hcCIsImxpZ2h0Iiwib3RoZXJDb2xvclNjaGVtZXMiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInNjaGVtZSIsImRlZXBtZXJnZSIsImdlbmVyYXRlQ3NzVmFycyIsImNvbG9yU2NoZW1lIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJwcmVwYXJlQ3NzVmFycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbnZhciBfY3NzVmFyc1BhcnNlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3NzVmFyc1BhcnNlclwiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb2xvclNjaGVtZXNcIiwgXCJjb21wb25lbnRzXCJdLFxuICBfZXhjbHVkZWQyID0gW1wibGlnaHRcIl07XG5mdW5jdGlvbiBwcmVwYXJlQ3NzVmFycyh0aGVtZSwgcGFyc2VyQ29uZmlnKSB7XG4gIC8vIEB0cy1pZ25vcmUgLSBpZ25vcmUgY29tcG9uZW50cyBkbyBub3QgZXhpc3RcbiAgY29uc3Qge1xuICAgICAgY29sb3JTY2hlbWVzID0ge31cbiAgICB9ID0gdGhlbWUsXG4gICAgb3RoZXJUaGVtZSA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkodGhlbWUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICB2YXJzOiByb290VmFycyxcbiAgICBjc3M6IHJvb3RDc3MsXG4gICAgdmFyc1dpdGhEZWZhdWx0czogcm9vdFZhcnNXaXRoRGVmYXVsdHNcbiAgfSA9ICgwLCBfY3NzVmFyc1BhcnNlci5kZWZhdWx0KShvdGhlclRoZW1lLCBwYXJzZXJDb25maWcpO1xuICBsZXQgdGhlbWVWYXJzID0gcm9vdFZhcnNXaXRoRGVmYXVsdHM7XG4gIGNvbnN0IGNvbG9yU2NoZW1lc01hcCA9IHt9O1xuICBjb25zdCB7XG4gICAgICBsaWdodFxuICAgIH0gPSBjb2xvclNjaGVtZXMsXG4gICAgb3RoZXJDb2xvclNjaGVtZXMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKGNvbG9yU2NoZW1lcywgX2V4Y2x1ZGVkMik7XG4gIE9iamVjdC5lbnRyaWVzKG90aGVyQ29sb3JTY2hlbWVzIHx8IHt9KS5mb3JFYWNoKChba2V5LCBzY2hlbWVdKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdmFycyxcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgICB9ID0gKDAsIF9jc3NWYXJzUGFyc2VyLmRlZmF1bHQpKHNjaGVtZSwgcGFyc2VyQ29uZmlnKTtcbiAgICB0aGVtZVZhcnMgPSAoMCwgX3V0aWxzLmRlZXBtZXJnZSkodGhlbWVWYXJzLCB2YXJzV2l0aERlZmF1bHRzKTtcbiAgICBjb2xvclNjaGVtZXNNYXBba2V5XSA9IHtcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNcbiAgICB9O1xuICB9KTtcbiAgaWYgKGxpZ2h0KSB7XG4gICAgLy8gbGlnaHQgY29sb3Igc2NoZW1lIHZhcnMgc2hvdWxkIGJlIG1lcmdlZCBsYXN0IHRvIHNldCBhcyBkZWZhdWx0XG4gICAgY29uc3Qge1xuICAgICAgY3NzLFxuICAgICAgdmFycyxcbiAgICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgICB9ID0gKDAsIF9jc3NWYXJzUGFyc2VyLmRlZmF1bHQpKGxpZ2h0LCBwYXJzZXJDb25maWcpO1xuICAgIHRoZW1lVmFycyA9ICgwLCBfdXRpbHMuZGVlcG1lcmdlKSh0aGVtZVZhcnMsIHZhcnNXaXRoRGVmYXVsdHMpO1xuICAgIGNvbG9yU2NoZW1lc01hcC5saWdodCA9IHtcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNcbiAgICB9O1xuICB9XG4gIGNvbnN0IGdlbmVyYXRlQ3NzVmFycyA9IGNvbG9yU2NoZW1lID0+IHtcbiAgICBpZiAoIWNvbG9yU2NoZW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjc3M6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHJvb3RDc3MpLFxuICAgICAgICB2YXJzOiByb290VmFyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNzczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY29sb3JTY2hlbWVzTWFwW2NvbG9yU2NoZW1lXS5jc3MpLFxuICAgICAgdmFyczogY29sb3JTY2hlbWVzTWFwW2NvbG9yU2NoZW1lXS52YXJzXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB2YXJzOiB0aGVtZVZhcnMsXG4gICAgZ2VuZXJhdGVDc3NWYXJzXG4gIH07XG59XG52YXIgX2RlZmF1bHQgPSBwcmVwYXJlQ3NzVmFycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxTQUFTLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJTyw4QkFBOEIsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQzNILElBQUlRLE1BQU0sR0FBR1IsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNsQyxJQUFJUyxjQUFjLEdBQUdWLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN2RSxNQUFNVSxTQUFTLEdBQUcsQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDO0VBQzlDQyxVQUFVLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDeEIsU0FBU0MsY0FBY0EsQ0FBQ0MsS0FBSyxFQUFFQyxZQUFZLEVBQUU7RUFDM0M7RUFDQSxNQUFNO01BQ0ZDLFlBQVksR0FBRyxDQUFDO0lBQ2xCLENBQUMsR0FBR0YsS0FBSztJQUNURyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVULDhCQUE4QixDQUFDRixPQUFPLEVBQUVRLEtBQUssRUFBRUgsU0FBUyxDQUFDO0VBQzVFLE1BQU07SUFDSk8sSUFBSSxFQUFFQyxRQUFRO0lBQ2RDLEdBQUcsRUFBRUMsT0FBTztJQUNaQyxnQkFBZ0IsRUFBRUM7RUFDcEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFYixjQUFjLENBQUNKLE9BQU8sRUFBRVcsVUFBVSxFQUFFRixZQUFZLENBQUM7RUFDekQsSUFBSVMsU0FBUyxHQUFHRCxvQkFBb0I7RUFDcEMsTUFBTUUsZUFBZSxHQUFHLENBQUMsQ0FBQztFQUMxQixNQUFNO01BQ0ZDO0lBQ0YsQ0FBQyxHQUFHVixZQUFZO0lBQ2hCVyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsRUFBRW5CLDhCQUE4QixDQUFDRixPQUFPLEVBQUVVLFlBQVksRUFBRUosVUFBVSxDQUFDO0VBQzNGVixNQUFNLENBQUMwQixPQUFPLENBQUNELGlCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNFLE9BQU8sQ0FBQyxDQUFDLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxDQUFDLEtBQUs7SUFDakUsTUFBTTtNQUNKYixJQUFJO01BQ0pFLEdBQUc7TUFDSEU7SUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVaLGNBQWMsQ0FBQ0osT0FBTyxFQUFFeUIsTUFBTSxFQUFFaEIsWUFBWSxDQUFDO0lBQ3JEUyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVmLE1BQU0sQ0FBQ3VCLFNBQVMsRUFBRVIsU0FBUyxFQUFFRixnQkFBZ0IsQ0FBQztJQUM5REcsZUFBZSxDQUFDSyxHQUFHLENBQUMsR0FBRztNQUNyQlYsR0FBRztNQUNIRjtJQUNGLENBQUM7RUFDSCxDQUFDLENBQUM7RUFDRixJQUFJUSxLQUFLLEVBQUU7SUFDVDtJQUNBLE1BQU07TUFDSk4sR0FBRztNQUNIRixJQUFJO01BQ0pJO0lBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFWixjQUFjLENBQUNKLE9BQU8sRUFBRW9CLEtBQUssRUFBRVgsWUFBWSxDQUFDO0lBQ3BEUyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVmLE1BQU0sQ0FBQ3VCLFNBQVMsRUFBRVIsU0FBUyxFQUFFRixnQkFBZ0IsQ0FBQztJQUM5REcsZUFBZSxDQUFDQyxLQUFLLEdBQUc7TUFDdEJOLEdBQUc7TUFDSEY7SUFDRixDQUFDO0VBQ0g7RUFDQSxNQUFNZSxlQUFlLEdBQUdDLFdBQVcsSUFBSTtJQUNyQyxJQUFJLENBQUNBLFdBQVcsRUFBRTtNQUNoQixPQUFPO1FBQ0xkLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRWIsU0FBUyxDQUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVlLE9BQU8sQ0FBQztRQUN4Q0gsSUFBSSxFQUFFQztNQUNSLENBQUM7SUFDSDtJQUNBLE9BQU87TUFDTEMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFYixTQUFTLENBQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRW1CLGVBQWUsQ0FBQ1MsV0FBVyxDQUFDLENBQUNkLEdBQUcsQ0FBQztNQUNqRUYsSUFBSSxFQUFFTyxlQUFlLENBQUNTLFdBQVcsQ0FBQyxDQUFDaEI7SUFDckMsQ0FBQztFQUNILENBQUM7RUFDRCxPQUFPO0lBQ0xBLElBQUksRUFBRU0sU0FBUztJQUNmUztFQUNGLENBQUM7QUFDSDtBQUNBLElBQUlFLFFBQVEsR0FBR3RCLGNBQWM7QUFDN0JULE9BQU8sQ0FBQ0UsT0FBTyxHQUFHNkIsUUFBUSJ9