de5b4c47141850a0907cda2fe8a811ae
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _reactTransitionGroup = require("react-transition-group");
var _useTheme = _interopRequireDefault(require("../styles/useTheme"));
var _utils2 = require("../transitions/utils");
var _useForkRef = _interopRequireDefault(require("../utils/useForkRef"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function getScale(value) {
  return `scale(${value}, ${value ** 2})`;
}
const styles = {
  entering: {
    opacity: 1,
    transform: getScale(1)
  },
  entered: {
    opacity: 1,
    transform: 'none'
  }
};

/*
 TODO v6: remove
 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
 */
const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

/**
 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
 * [Popover](/material-ui/react-popover/) components.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */
const Grow = /*#__PURE__*/React.forwardRef(function Grow(props, ref) {
  const {
      addEndListener,
      appear = true,
      children,
      easing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout = 'auto',
      // eslint-disable-next-line react/prop-types
      TransitionComponent = _reactTransitionGroup.Transition
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const timer = React.useRef();
  const autoTimeout = React.useRef();
  const theme = (0, _useTheme.default)();
  const nodeRef = React.useRef(null);
  const handleRef = (0, _useForkRef.default)(nodeRef, children.ref, ref);
  const normalizedTransitionCallback = callback => maybeIsAppearing => {
    if (callback) {
      const node = nodeRef.current;

      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
      if (maybeIsAppearing === undefined) {
        callback(node);
      } else {
        callback(node, maybeIsAppearing);
      }
    }
  };
  const handleEntering = normalizedTransitionCallback(onEntering);
  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
    (0, _utils2.reflow)(node); // So the animation always start from the start.

    const {
      duration: transitionDuration,
      delay,
      easing: transitionTimingFunction
    } = (0, _utils2.getTransitionProps)({
      style,
      timeout,
      easing
    }, {
      mode: 'enter'
    });
    let duration;
    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }
    node.style.transition = [theme.transitions.create('opacity', {
      duration,
      delay
    }), theme.transitions.create('transform', {
      duration: isWebKit154 ? duration : duration * 0.666,
      delay,
      easing: transitionTimingFunction
    })].join(',');
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  const handleEntered = normalizedTransitionCallback(onEntered);
  const handleExiting = normalizedTransitionCallback(onExiting);
  const handleExit = normalizedTransitionCallback(node => {
    const {
      duration: transitionDuration,
      delay,
      easing: transitionTimingFunction
    } = (0, _utils2.getTransitionProps)({
      style,
      timeout,
      easing
    }, {
      mode: 'exit'
    });
    let duration;
    if (timeout === 'auto') {
      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
      autoTimeout.current = duration;
    } else {
      duration = transitionDuration;
    }
    node.style.transition = [theme.transitions.create('opacity', {
      duration,
      delay
    }), theme.transitions.create('transform', {
      duration: isWebKit154 ? duration : duration * 0.666,
      delay: isWebKit154 ? delay : delay || duration * 0.333,
      easing: transitionTimingFunction
    })].join(',');
    node.style.opacity = 0;
    node.style.transform = getScale(0.75);
    if (onExit) {
      onExit(node);
    }
  });
  const handleExited = normalizedTransitionCallback(onExited);
  const handleAddEndListener = next => {
    if (timeout === 'auto') {
      timer.current = setTimeout(next, autoTimeout.current || 0);
    }
    if (addEndListener) {
      // Old call signature before `react-transition-group` implemented `nodeRef`
      addEndListener(nodeRef.current, next);
    }
  };
  React.useEffect(() => {
    return () => {
      clearTimeout(timer.current);
    };
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
    appear: appear,
    in: inProp,
    nodeRef: nodeRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    timeout: timeout === 'auto' ? null : timeout
  }, other, {
    children: (state, childProps) => {
      return /*#__PURE__*/React.cloneElement(children, (0, _extends2.default)({
        style: (0, _extends2.default)({
          opacity: 0,
          transform: getScale(0.75),
          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
        }, styles[state], style, children.props.style),
        ref: handleRef
      }, childProps));
    }
  }));
});
process.env.NODE_ENV !== "production" ? Grow.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: _propTypes.default.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: _propTypes.default.bool,
  /**
   * A single child content element.
   */
  children: _utils.elementAcceptingRef.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: _propTypes.default.oneOfType([_propTypes.default.shape({
    enter: _propTypes.default.string,
    exit: _propTypes.default.string
  }), _propTypes.default.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: _propTypes.default.bool,
  /**
   * @ignore
   */
  onEnter: _propTypes.default.func,
  /**
   * @ignore
   */
  onEntered: _propTypes.default.func,
  /**
   * @ignore
   */
  onEntering: _propTypes.default.func,
  /**
   * @ignore
   */
  onExit: _propTypes.default.func,
  /**
   * @ignore
   */
  onExited: _propTypes.default.func,
  /**
   * @ignore
   */
  onExiting: _propTypes.default.func,
  /**
   * @ignore
   */
  style: _propTypes.default.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  timeout: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.shape({
    appear: _propTypes.default.number,
    enter: _propTypes.default.number,
    exit: _propTypes.default.number
  })])
} : void 0;
Grow.muiSupportAuto = true;
var _default = Grow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX3V0aWxzIiwiX3JlYWN0VHJhbnNpdGlvbkdyb3VwIiwiX3VzZVRoZW1lIiwiX3V0aWxzMiIsIl91c2VGb3JrUmVmIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZ2V0U2NhbGUiLCJzdHlsZXMiLCJlbnRlcmluZyIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJlbnRlcmVkIiwiaXNXZWJLaXQxNTQiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiR3JvdyIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImFkZEVuZExpc3RlbmVyIiwiYXBwZWFyIiwiY2hpbGRyZW4iLCJlYXNpbmciLCJpbiIsImluUHJvcCIsIm9uRW50ZXIiLCJvbkVudGVyZWQiLCJvbkVudGVyaW5nIiwib25FeGl0Iiwib25FeGl0ZWQiLCJvbkV4aXRpbmciLCJzdHlsZSIsInRpbWVvdXQiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwiVHJhbnNpdGlvbiIsIm90aGVyIiwidGltZXIiLCJ1c2VSZWYiLCJhdXRvVGltZW91dCIsInRoZW1lIiwibm9kZVJlZiIsImhhbmRsZVJlZiIsIm5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2siLCJjYWxsYmFjayIsIm1heWJlSXNBcHBlYXJpbmciLCJub2RlIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsInJlZmxvdyIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiZGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwidHJhbnNpdGlvbnMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjbGllbnRIZWlnaHQiLCJ0cmFuc2l0aW9uIiwiY3JlYXRlIiwiam9pbiIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsImhhbmRsZUV4aXRlZCIsImhhbmRsZUFkZEVuZExpc3RlbmVyIiwibmV4dCIsInNldFRpbWVvdXQiLCJ1c2VFZmZlY3QiLCJjbGVhclRpbWVvdXQiLCJqc3giLCJzdGF0ZSIsImNoaWxkUHJvcHMiLCJjbG9uZUVsZW1lbnQiLCJ2aXNpYmlsaXR5IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwiZnVuYyIsImJvb2wiLCJlbGVtZW50QWNjZXB0aW5nUmVmIiwiaXNSZXF1aXJlZCIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZW50ZXIiLCJzdHJpbmciLCJleGl0Iiwib2JqZWN0Iiwib25lT2YiLCJudW1iZXIiLCJtdWlTdXBwb3J0QXV0byIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiR3Jvdy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL3V0aWxzXCIpO1xudmFyIF9yZWFjdFRyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCIpO1xudmFyIF91c2VUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy91c2VUaGVtZVwiKSk7XG52YXIgX3V0aWxzMiA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcbnZhciBfdXNlRm9ya1JlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUZvcmtSZWZcIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWRkRW5kTGlzdGVuZXJcIiwgXCJhcHBlYXJcIiwgXCJjaGlsZHJlblwiLCBcImVhc2luZ1wiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBgc2NhbGUoJHt2YWx1ZX0sICR7dmFsdWUgKiogMn0pYDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcblxuLypcbiBUT0RPIHY2OiByZW1vdmVcbiBDb25kaXRpb25hbGx5IGFwcGx5IGEgd29ya2Fyb3VuZCBmb3IgdGhlIENTUyB0cmFuc2l0aW9uIGJ1ZyBpbiBTYWZhcmkgMTUuNCAvIFdlYktpdCBicm93c2Vycy5cbiAqL1xuY29uc3QgaXNXZWJLaXQxNTQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSooc2FmYXJpfG1vYmlsZSkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmIC8ob3MgfHZlcnNpb25cXC8pMTUoLnxfKTQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFRoZSBHcm93IHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1Rvb2x0aXBdKC9tYXRlcmlhbC11aS9yZWFjdC10b29sdGlwLykgYW5kXG4gKiBbUG9wb3Zlcl0oL21hdGVyaWFsLXVpL3JlYWN0LXBvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgR3JvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGFwcGVhciA9IHRydWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gJ2F1dG8nLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcmVhY3RUcmFuc2l0aW9uR3JvdXAuVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGF1dG9UaW1lb3V0ID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHRoZW1lID0gKDAsIF91c2VUaGVtZS5kZWZhdWx0KSgpO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSAoMCwgX3VzZUZvcmtSZWYuZGVmYXVsdCkobm9kZVJlZiwgY2hpbGRyZW4ucmVmLCByZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gbWF5YmVJc0FwcGVhcmluZyA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZVJlZi5jdXJyZW50O1xuXG4gICAgICAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyaW5nKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgICgwLCBfdXRpbHMyLnJlZmxvdykobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gKDAsIF91dGlsczIuZ2V0VHJhbnNpdGlvblByb3BzKSh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGlzV2ViS2l0MTU0ID8gZHVyYXRpb24gOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9ICgwLCBfdXRpbHMyLmdldFRyYW5zaXRpb25Qcm9wcykoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGlzV2ViS2l0MTU0ID8gZHVyYXRpb24gOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGlzV2ViS2l0MTU0ID8gZGVsYXkgOiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9KV0uam9pbignLCcpO1xuICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBnZXRTY2FsZSgwLjc1KTtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgdGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQobmV4dCwgYXV0b1RpbWVvdXQuY3VycmVudCB8fCAwKTtcbiAgICB9XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFRyYW5zaXRpb25Db21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGFwcGVhcjogYXBwZWFyLFxuICAgIGluOiBpblByb3AsXG4gICAgbm9kZVJlZjogbm9kZVJlZixcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgc3R5bGU6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSksXG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyb3cucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW4gaXQgZmlyc3QgbW91bnRzIGlmIGBpbmAgaXMgYWxzbyBgdHJ1ZWAuXG4gICAqIFNldCB0aGlzIHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW9yLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF91dGlscy5lbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xuICB9KSwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdGltZW91dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYXV0byddKSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG52YXIgX2RlZmF1bHQgPSBHcm93O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQ1osWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxTQUFTLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJTyw4QkFBOEIsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQzNILElBQUlRLEtBQUssR0FBR0MsdUJBQXVCLENBQUNULE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxJQUFJVSxVQUFVLEdBQUdYLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsSUFBSVcsTUFBTSxHQUFHWCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2xDLElBQUlZLHFCQUFxQixHQUFHWixPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDN0QsSUFBSWEsU0FBUyxHQUFHZCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDckUsSUFBSWMsT0FBTyxHQUFHZCxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDN0MsSUFBSWUsV0FBVyxHQUFHaEIsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3hFLElBQUlnQixXQUFXLEdBQUdoQixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDOUMsTUFBTWlCLFNBQVMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsRUFB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