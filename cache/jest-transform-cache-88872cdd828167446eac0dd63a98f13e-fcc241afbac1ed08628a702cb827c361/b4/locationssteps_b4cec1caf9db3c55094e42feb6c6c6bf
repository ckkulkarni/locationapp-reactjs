6cc975cb08bb56eb314da54470f21b30
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
const mockGeolocation = {
  getCurrentPosition: jest.fn()
};
Object.defineProperty(global.navigator, "geolocation", {
  value: mockGeolocation,
  configurable: true
});
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const mockPosition = {
      coords: {
        latitude: 37.7749,
        longitude: -122.4194
      }
    };
    _axios.default.get.mockResolvedValueOnce({
      data: {
        results: ["123 Street, Hyd"]
      }
    });
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", () => {
      expect(screen).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJtb2NrR2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJmbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImxvY2F0aW9uTGlzdCIsImxvY2F0aW9uU2xpY2UiLCJtb2NrUG9zaXRpb24iLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImF4aW9zIiwiZ2V0IiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsInJlc3VsdHMiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJNZW1vcnlSb3V0ZXIiLCJSb3V0ZXMiLCJSb3V0ZSIsInBhdGgiLCJlbGVtZW50IiwiZXhwZWN0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbImxvY2F0aW9ucy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yLCBhY3QgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCBsb2NhdGlvblNsaWNlLCB7XHJcbiAgYWRkUHJldmlvdXNMb2NhdGlvbixcclxuICBjbGVhclByZXZpb3VzTG9jYXRpb25zLFxyXG4gIHJlbW92ZVByZXZpb3VzTG9jYXRpb24sXHJcbiAgc2V0Q3VycmVudExvY2F0aW9uLFxyXG59IGZyb20gXCIuLy4uLy4uL3JlZHVjZXJzL3JlZHVjZXIvbG9jYXRpb25TbGljZVwiO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxyXG4gIFJvdXRlcyxcclxuICBSb3V0ZSxcclxuICBNZW1vcnlSb3V0ZXIsXHJcbn0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IExvY2F0aW9ucyBmcm9tIFwiLi4vLi4vTG9jYXRpb25zXCI7XHJcbmltcG9ydCBNYXAgZnJvbSBcIi4uLy4uL01hcFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmplc3QubW9jayhcImF4aW9zXCIpO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9sb2NhdGlvbnMuZmVhdHVyZVwiKTtcclxuY29uc3QgbW9ja0dlb2xvY2F0aW9uID0ge1xyXG4gIGdldEN1cnJlbnRQb3NpdGlvbjogamVzdC5mbigpLFxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLm5hdmlnYXRvciwgXCJnZW9sb2NhdGlvblwiLCB7XHJcbiAgdmFsdWU6IG1vY2tHZW9sb2NhdGlvbixcclxuICBjb25maWd1cmFibGU6IHRydWUsXHJcbn0pO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIkRpc3BsYXlpbmcgQ3VycmVudCBMb2NhdGlvblwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiB9KSA9PiB7XHJcbiAgICBjb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICAgICAgcmVkdWNlcjoge1xyXG4gICAgICAgIGxvY2F0aW9uTGlzdDogbG9jYXRpb25TbGljZSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgbW9ja1Bvc2l0aW9uID0ge1xyXG4gICAgICBjb29yZHM6IHtcclxuICAgICAgICBsYXRpdHVkZTogMzcuNzc0OSxcclxuICAgICAgICBsb25naXR1ZGU6IC0xMjIuNDE5NCxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgICAoYXhpb3MuZ2V0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHJlc3VsdHM6IFtcIjEyMyBTdHJlZXQsIEh5ZFwiXSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8TWVtb3J5Um91dGVyPlxyXG4gICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PExvY2F0aW9ucyAvPn0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbWFwXCIgZWxlbWVudD17PE1hcCAvPn0gLz5cclxuICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgKTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIExvY2F0aW9ucyBwYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBc0JBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxPQUFPLENBQUM7QUF0QmxCLElBQUFDLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBQSxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxjQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFNQSxJQUFBTSxlQUFBLEdBQUFOLE9BQUE7QUFNQSxJQUFBTyxVQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUSxJQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUyxNQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFBMEIsU0FBQUQsdUJBQUFXLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBZCxZQUFBO0VBQUE7SUFBQWlCO0VBQUEsSUFBQWIsT0FBQTtFQUFBSixXQUFBLEdBQUFBLENBQUEsS0FBQWlCLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFMUIsTUFBTUMsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsMkNBQTJDLENBQUM7QUFDeEUsTUFBTUMsZUFBZSxHQUFHO0VBQ3RCQyxrQkFBa0IsRUFBRUosSUFBSSxDQUFDSyxFQUFFO0FBQzdCLENBQUM7QUFDREMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFLGFBQWEsRUFBRTtFQUNyREMsS0FBSyxFQUFFUCxlQUFlO0VBQ3RCUSxZQUFZLEVBQUU7QUFDaEIsQ0FBQyxDQUFDO0FBQ0YsSUFBQUMsMkJBQWEsRUFBQ1gsT0FBTyxFQUFHWSxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO0lBQUVDLEtBQUs7SUFBRUMsSUFBSTtJQUFFQztFQUFLLENBQUMsS0FBSztJQUM3RCxNQUFNQyxLQUFLLEdBQUcsSUFBQUMsdUJBQWMsRUFBQztNQUMzQkMsT0FBTyxFQUFFO1FBQ1BDLFlBQVksRUFBRUM7TUFDaEI7SUFDRixDQUFDLENBQUM7SUFDRixNQUFNQyxZQUFZLEdBQUc7TUFDbkJDLE1BQU0sRUFBRTtRQUNOQyxRQUFRLEVBQUUsT0FBTztRQUNqQkMsU0FBUyxFQUFFLENBQUM7TUFDZDtJQUNGLENBQUM7SUFDQUMsY0FBSyxDQUFDQyxHQUFHLENBQWVDLHFCQUFxQixDQUFDO01BQzdDQyxJQUFJLEVBQUU7UUFDSkMsT0FBTyxFQUFFLENBQUMsaUJBQWlCO01BQzdCO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsTUFBTUMsTUFBTSxHQUFHLElBQUFDLGNBQU0sZ0JBQ25CL0MsTUFBQSxDQUFBYyxPQUFBLENBQUFrQyxhQUFBLENBQUMzQyxXQUFBLENBQUE0QyxRQUFRO01BQUNqQixLQUFLLEVBQUVBO0lBQU0sZ0JBQ3JCaEMsTUFBQSxDQUFBYyxPQUFBLENBQUFrQyxhQUFBLENBQUN4QyxlQUFBLENBQUEwQyxZQUFZLHFCQUNYbEQsTUFBQSxDQUFBYyxPQUFBLENBQUFrQyxhQUFBLENBQUN4QyxlQUFBLENBQUEyQyxNQUFNLHFCQUNMbkQsTUFBQSxDQUFBYyxPQUFBLENBQUFrQyxhQUFBLENBQUN4QyxlQUFBLENBQUE0QyxLQUFLO01BQUNDLElBQUksRUFBQyxHQUFHO01BQUNDLE9BQU8sZUFBRXRELE1BQUEsQ0FBQWMsT0FBQSxDQUFBa0MsYUFBQSxDQUFDdkMsVUFBQSxDQUFBSyxPQUFTO0lBQUksRUFBRyxlQUMxQ2QsTUFBQSxDQUFBYyxPQUFBLENBQUFrQyxhQUFBLENBQUN4QyxlQUFBLENBQUE0QyxLQUFLO01BQUNDLElBQUksRUFBQyxNQUFNO01BQUNDLE9BQU8sZUFBRXRELE1BQUEsQ0FBQWMsT0FBQSxDQUFBa0MsYUFBQSxDQUFDdEMsSUFBQSxDQUFBSSxPQUFHO0lBQUksRUFBRyxDQUNoQyxDQUNJLENBQ04sQ0FDWjtJQUNEZSxLQUFLLENBQUMsbUNBQW1DLEVBQUUsTUFBTTtNQUMvQzBCLE1BQU0sQ0FBQ1QsTUFBTSxDQUFDLENBQUNVLFVBQVUsRUFBRTtJQUM3QixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==