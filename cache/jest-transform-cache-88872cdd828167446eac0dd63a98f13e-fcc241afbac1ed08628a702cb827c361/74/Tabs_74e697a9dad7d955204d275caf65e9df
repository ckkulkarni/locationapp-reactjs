1017a7d630613bca2e745273f3eb0d4d
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../utils");
var _composeClasses = require("../composeClasses");
var _tabsClasses = require("./tabsClasses");
var _useTabs = require("../useTabs");
var _TabsProvider = require("../useTabs/TabsProvider");
var _ClassNameConfigurator = require("../utils/ClassNameConfigurator");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["children", "value", "defaultValue", "orientation", "direction", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ['root', orientation]
  };
  return (0, _composeClasses.unstable_composeClasses)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_tabsClasses.getTabsUtilityClass));
};

/**
 *
 * Demos:
 *
 * - [Tabs](https://mui.com/base-ui/react-tabs/)
 *
 * API:
 *
 * - [Tabs API](https://mui.com/base-ui/react-tabs/components-api/#tabs)
 */
const Tabs = /*#__PURE__*/React.forwardRef(function Tabs(props, forwardedRef) {
  var _slots$root;
  const {
      children,
      orientation = 'horizontal',
      direction = 'ltr',
      slotProps = {},
      slots = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    contextValue
  } = (0, _useTabs.useTabs)(props);
  const ownerState = (0, _extends2.default)({}, props, {
    orientation,
    direction
  });
  const classes = useUtilityClasses(ownerState);
  const TabsRoot = (_slots$root = slots.root) != null ? _slots$root : 'div';
  const tabsRootProps = (0, _utils.useSlotProps)({
    elementType: TabsRoot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabsRoot, (0, _extends2.default)({}, tabsRootProps, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabsProvider.TabsProvider, {
      value: contextValue,
      children: children
    })
  }));
});
exports.Tabs = Tabs;
process.env.NODE_ENV !== "production" ? Tabs.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: _propTypes.default.oneOf(['ltr', 'rtl']),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: _propTypes.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: _propTypes.default.bool,
  /**
   * The props used for each slot inside the Tabs.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the Tabs.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    root: _propTypes.default.elementType
  }),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `null`.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
} : void 0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGFicyIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX3V0aWxzIiwiX2NvbXBvc2VDbGFzc2VzIiwiX3RhYnNDbGFzc2VzIiwiX3VzZVRhYnMiLCJfVGFic1Byb3ZpZGVyIiwiX0NsYXNzTmFtZUNvbmZpZ3VyYXRvciIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsIm93bmVyU3RhdGUiLCJvcmllbnRhdGlvbiIsInNsb3RzIiwicm9vdCIsInVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIiwidXNlQ2xhc3NOYW1lc092ZXJyaWRlIiwiZ2V0VGFic1V0aWxpdHlDbGFzcyIsImZvcndhcmRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIl9zbG90cyRyb290IiwiY2hpbGRyZW4iLCJkaXJlY3Rpb24iLCJzbG90UHJvcHMiLCJvdGhlciIsImNvbnRleHRWYWx1ZSIsInVzZVRhYnMiLCJjbGFzc2VzIiwiVGFic1Jvb3QiLCJ0YWJzUm9vdFByb3BzIiwidXNlU2xvdFByb3BzIiwiZWxlbWVudFR5cGUiLCJleHRlcm5hbFNsb3RQcm9wcyIsImV4dGVybmFsRm9yd2FyZGVkUHJvcHMiLCJhZGRpdGlvbmFsUHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJqc3giLCJUYWJzUHJvdmlkZXIiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJub2RlIiwic3RyaW5nIiwiZGVmYXVsdFZhbHVlIiwib25lT2ZUeXBlIiwibnVtYmVyIiwib25lT2YiLCJvbkNoYW5nZSIsImZ1bmMiLCJzZWxlY3Rpb25Gb2xsb3dzRm9jdXMiLCJib29sIiwic2hhcGUiLCJvYmplY3QiXSwic291cmNlcyI6WyJUYWJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhYnMgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIF9jb21wb3NlQ2xhc3NlcyA9IHJlcXVpcmUoXCIuLi9jb21wb3NlQ2xhc3Nlc1wiKTtcbnZhciBfdGFic0NsYXNzZXMgPSByZXF1aXJlKFwiLi90YWJzQ2xhc3Nlc1wiKTtcbnZhciBfdXNlVGFicyA9IHJlcXVpcmUoXCIuLi91c2VUYWJzXCIpO1xudmFyIF9UYWJzUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vdXNlVGFicy9UYWJzUHJvdmlkZXJcIik7XG52YXIgX0NsYXNzTmFtZUNvbmZpZ3VyYXRvciA9IHJlcXVpcmUoXCIuLi91dGlscy9DbGFzc05hbWVDb25maWd1cmF0b3JcIik7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcInZhbHVlXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwib3JpZW50YXRpb25cIiwgXCJkaXJlY3Rpb25cIiwgXCJvbkNoYW5nZVwiLCBcInNlbGVjdGlvbkZvbGxvd3NGb2N1c1wiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCJdO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb25cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG9yaWVudGF0aW9uXVxuICB9O1xuICByZXR1cm4gKDAsIF9jb21wb3NlQ2xhc3Nlcy51bnN0YWJsZV9jb21wb3NlQ2xhc3Nlcykoc2xvdHMsICgwLCBfQ2xhc3NOYW1lQ29uZmlndXJhdG9yLnVzZUNsYXNzTmFtZXNPdmVycmlkZSkoX3RhYnNDbGFzc2VzLmdldFRhYnNVdGlsaXR5Q2xhc3MpKTtcbn07XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1RhYnNdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXRhYnMvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtUYWJzIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtdGFicy9jb21wb25lbnRzLWFwaS8jdGFicylcbiAqL1xuY29uc3QgVGFicyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYnMocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3Nsb3RzJHJvb3Q7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gICAgICBkaXJlY3Rpb24gPSAnbHRyJyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBjb250ZXh0VmFsdWVcbiAgfSA9ICgwLCBfdXNlVGFicy51c2VUYWJzKShwcm9wcyk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIG9yaWVudGF0aW9uLFxuICAgIGRpcmVjdGlvblxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBUYWJzUm9vdCA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6ICdkaXYnO1xuICBjb25zdCB0YWJzUm9vdFByb3BzID0gKDAsIF91dGlscy51c2VTbG90UHJvcHMpKHtcbiAgICBlbGVtZW50VHlwZTogVGFic1Jvb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICB9LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoVGFic1Jvb3QsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRhYnNSb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKF9UYWJzUHJvdmlkZXIuVGFic1Byb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSlcbiAgfSkpO1xufSk7XG5leHBvcnRzLlRhYnMgPSBUYWJzO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFicy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rpb24gb2YgdGhlIHRleHQuXG4gICAqIEBkZWZhdWx0ICdsdHInXG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2x0cicsICdydGwnXSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW4gbmV3IHZhbHVlIGlzIGJlaW5nIHNldC5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgb3JpZW50YXRpb24gKGxheW91dCBmbG93IGRpcmVjdGlvbikuXG4gICAqIEBkZWZhdWx0ICdob3Jpem9udGFsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgdGhlIHNlbGVjdGVkIHRhYiBjaGFuZ2VzIG9uIGZvY3VzLiBPdGhlcndpc2UgaXQgb25seVxuICAgKiBjaGFuZ2VzIG9uIGFjdGl2YXRpb24uXG4gICAqL1xuICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFRhYnMuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgcm9vdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFRhYnMuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICByb290OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgVGFiYC5cbiAgICogSWYgeW91IGRvbid0IHdhbnQgYW55IHNlbGVjdGVkIGBUYWJgLCB5b3UgY2FuIHNldCB0aGlzIHByb3AgdG8gYG51bGxgLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKVxufSA6IHZvaWQgMDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWixZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFD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