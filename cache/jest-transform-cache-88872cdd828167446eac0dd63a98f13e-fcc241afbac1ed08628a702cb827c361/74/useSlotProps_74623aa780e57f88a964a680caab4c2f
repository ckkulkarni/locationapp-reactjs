d93a6b5e70e17a40765358665979b8ec
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSlotProps = useSlotProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _appendOwnerState = require("./appendOwnerState");
var _mergeSlotProps = require("./mergeSlotProps");
var _resolveComponentProps = require("./resolveComponentProps");
const _excluded = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
/**
 * @ignore - do not document.
 * Builds the props to be passed into the slot of an unstyled component.
 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
 * If the slot component is not a host component, it also merges in the `ownerState`.
 *
 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
 */
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters,
    rest = (0, _objectWithoutPropertiesLoose2.default)(parameters, _excluded);
  const resolvedComponentsProps = skipResolvingSlotProps ? {} : (0, _resolveComponentProps.resolveComponentProps)(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = (0, _mergeSlotProps.mergeSlotProps)((0, _extends2.default)({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = (0, _utils.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = (0, _appendOwnerState.appendOwnerState)(elementType, (0, _extends2.default)({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlU2xvdFByb3BzIiwiX2V4dGVuZHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX3V0aWxzIiwiX2FwcGVuZE93bmVyU3RhdGUiLCJfbWVyZ2VTbG90UHJvcHMiLCJfcmVzb2x2ZUNvbXBvbmVudFByb3BzIiwiX2V4Y2x1ZGVkIiwicGFyYW1ldGVycyIsIl9wYXJhbWV0ZXJzJGFkZGl0aW9uYSIsImVsZW1lbnRUeXBlIiwiZXh0ZXJuYWxTbG90UHJvcHMiLCJvd25lclN0YXRlIiwic2tpcFJlc29sdmluZ1Nsb3RQcm9wcyIsInJlc3QiLCJkZWZhdWx0IiwicmVzb2x2ZWRDb21wb25lbnRzUHJvcHMiLCJyZXNvbHZlQ29tcG9uZW50UHJvcHMiLCJwcm9wcyIsIm1lcmdlZFByb3BzIiwiaW50ZXJuYWxSZWYiLCJtZXJnZVNsb3RQcm9wcyIsInJlZiIsInVuc3RhYmxlX3VzZUZvcmtSZWYiLCJhZGRpdGlvbmFsUHJvcHMiLCJhcHBlbmRPd25lclN0YXRlIl0sInNvdXJjZXMiOlsidXNlU2xvdFByb3BzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnVzZVNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcztcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2FwcGVuZE93bmVyU3RhdGUgPSByZXF1aXJlKFwiLi9hcHBlbmRPd25lclN0YXRlXCIpO1xudmFyIF9tZXJnZVNsb3RQcm9wcyA9IHJlcXVpcmUoXCIuL21lcmdlU2xvdFByb3BzXCIpO1xudmFyIF9yZXNvbHZlQ29tcG9uZW50UHJvcHMgPSByZXF1aXJlKFwiLi9yZXNvbHZlQ29tcG9uZW50UHJvcHNcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJlbGVtZW50VHlwZVwiLCBcImV4dGVybmFsU2xvdFByb3BzXCIsIFwib3duZXJTdGF0ZVwiLCBcInNraXBSZXNvbHZpbmdTbG90UHJvcHNcIl07XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKiBCdWlsZHMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBzbG90IG9mIGFuIHVuc3R5bGVkIGNvbXBvbmVudC5cbiAqIEl0IG1lcmdlcyB0aGUgaW50ZXJuYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yLlxuICogSWYgdGhlIHNsb3QgY29tcG9uZW50IGlzIG5vdCBhIGhvc3QgY29tcG9uZW50LCBpdCBhbHNvIG1lcmdlcyBpbiB0aGUgYG93bmVyU3RhdGVgLlxuICpcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzLmdldFNsb3RQcm9wcyAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgdG8gdGhlIHNsb3QgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiB1c2VTbG90UHJvcHMocGFyYW1ldGVycykge1xuICB2YXIgX3BhcmFtZXRlcnMkYWRkaXRpb25hO1xuICBjb25zdCB7XG4gICAgICBlbGVtZW50VHlwZSxcbiAgICAgIGV4dGVybmFsU2xvdFByb3BzLFxuICAgICAgb3duZXJTdGF0ZSxcbiAgICAgIHNraXBSZXNvbHZpbmdTbG90UHJvcHMgPSBmYWxzZVxuICAgIH0gPSBwYXJhbWV0ZXJzLFxuICAgIHJlc3QgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHBhcmFtZXRlcnMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID0gc2tpcFJlc29sdmluZ1Nsb3RQcm9wcyA/IHt9IDogKDAsIF9yZXNvbHZlQ29tcG9uZW50UHJvcHMucmVzb2x2ZUNvbXBvbmVudFByb3BzKShleHRlcm5hbFNsb3RQcm9wcywgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAgaW50ZXJuYWxSZWZcbiAgfSA9ICgwLCBfbWVyZ2VTbG90UHJvcHMubWVyZ2VTbG90UHJvcHMpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHJlc3QsIHtcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHNcbiAgfSkpO1xuICBjb25zdCByZWYgPSAoMCwgX3V0aWxzLnVuc3RhYmxlX3VzZUZvcmtSZWYpKGludGVybmFsUmVmLCByZXNvbHZlZENvbXBvbmVudHNQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMucmVmLCAoX3BhcmFtZXRlcnMkYWRkaXRpb25hID0gcGFyYW1ldGVycy5hZGRpdGlvbmFsUHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyYW1ldGVycyRhZGRpdGlvbmEucmVmKTtcbiAgY29uc3QgcHJvcHMgPSAoMCwgX2FwcGVuZE93bmVyU3RhdGUuYXBwZW5kT3duZXJTdGF0ZSkoZWxlbWVudFR5cGUsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG1lcmdlZFByb3BzLCB7XG4gICAgcmVmXG4gIH0pLCBvd25lclN0YXRlKTtcbiAgcmV0dXJuIHByb3BzO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFlBQVksR0FBR0EsWUFBWTtBQUNuQyxJQUFJQyxTQUFTLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJTyw4QkFBOEIsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQzNILElBQUlRLE1BQU0sR0FBR1IsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNsQyxJQUFJUyxpQkFBaUIsR0FBR1QsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ3JELElBQUlVLGVBQWUsR0FBR1YsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ2pELElBQUlXLHNCQUFzQixHQUFHWCxPQUFPLENBQUMseUJBQXlCLENBQUM7QUFDL0QsTUFBTVksU0FBUyxHQUFHLENBQUMsYUFBYSxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSx3QkFBd0IsQ0FBQztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1AsWUFBWUEsQ0FBQ1EsVUFBVSxFQUFFO0VBQ2hDLElBQUlDLHFCQUFxQjtFQUN6QixNQUFNO01BQ0ZDLFdBQVc7TUFDWEMsaUJBQWlCO01BQ2pCQyxVQUFVO01BQ1ZDLHNCQUFzQixHQUFHO0lBQzNCLENBQUMsR0FBR0wsVUFBVTtJQUNkTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUVaLDhCQUE4QixDQUFDYSxPQUFPLEVBQUVQLFVBQVUsRUFBRUQsU0FBUyxDQUFDO0VBQzNFLE1BQU1TLHVCQUF1QixHQUFHSCxzQkFBc0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRVAsc0JBQXNCLENBQUNXLHFCQUFxQixFQUFFTixpQkFBaUIsRUFBRUMsVUFBVSxDQUFDO0VBQzlJLE1BQU07SUFDSk0sS0FBSyxFQUFFQyxXQUFXO0lBQ2xCQztFQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRWYsZUFBZSxDQUFDZ0IsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFcEIsU0FBUyxDQUFDYyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVELElBQUksRUFBRTtJQUN2RUgsaUJBQWlCLEVBQUVLO0VBQ3JCLENBQUMsQ0FBQyxDQUFDO0VBQ0gsTUFBTU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFbkIsTUFBTSxDQUFDb0IsbUJBQW1CLEVBQUVILFdBQVcsRUFBRUosdUJBQXVCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSx1QkFBdUIsQ0FBQ00sR0FBRyxFQUFFLENBQUNiLHFCQUFxQixHQUFHRCxVQUFVLENBQUNnQixlQUFlLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHZixxQkFBcUIsQ0FBQ2EsR0FBRyxDQUFDO0VBQ25PLE1BQU1KLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRWQsaUJBQWlCLENBQUNxQixnQkFBZ0IsRUFBRWYsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFVCxTQUFTLENBQUNjLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUksV0FBVyxFQUFFO0lBQ3pHRztFQUNGLENBQUMsQ0FBQyxFQUFFVixVQUFVLENBQUM7RUFDZixPQUFPTSxLQUFLO0FBQ2QifQ==