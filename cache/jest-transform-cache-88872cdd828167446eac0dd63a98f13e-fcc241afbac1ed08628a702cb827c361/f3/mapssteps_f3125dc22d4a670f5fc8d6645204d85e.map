{"version":3,"names":["_react","_interopRequireDefault","require","_jestCucumber","_react2","_reactRouterDom","_Map","obj","__esModule","default","feature","loadFeature","defineFeature","test","given","when","then","and","locationState","lat","lng","address","screen","render","createElement","MemoryRouter","initialEntries","pathname","state","mapContainer","getByTestId","expect","toBeInTheDocument","addressContainer","getByText","marker","getByAltText","toBeDefined"],"sources":["maps.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { defineFeature, loadFeature } from \"jest-cucumber\";\r\nimport { fireEvent, render, waitFor, act } from \"@testing-library/react\";\r\nimport \"text-encoding\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  MemoryRouter,\r\n} from \"react-router-dom\";\r\nimport Locations from \"../../Locations\";\r\nimport Map from \"../../Map\";\r\nconst feature = loadFeature(\"src/components/features/map.feature\");\r\n\r\ndefineFeature(feature, (test) => {\r\n  test(\"Viewing Location on the Map\", ({ given, when, then, and }) => {\r\n    const locationState = {\r\n      lat: 37.7749,\r\n      lng: -122.4194,\r\n      address: \"123 Street, Hyd\",\r\n    };\r\n    const screen = render(\r\n      <MemoryRouter\r\n        initialEntries={[{ pathname: \"/map\", state: locationState }]}\r\n      >\r\n        <Map />\r\n      </MemoryRouter>\r\n    );\r\n    given(\"the user is on the Map page\", () => {\r\n      const mapContainer = screen.getByTestId(\"map-container\");\r\n      expect(mapContainer).toBeInTheDocument();\r\n    });\r\n\r\n    when(\r\n      \"the user should see the address of the location that will be displayed in the map\",\r\n      () => {\r\n        const addressContainer = screen.getByText(\"123 Street, Hyd\");\r\n        expect(addressContainer).toBeInTheDocument();\r\n      }\r\n    );\r\n    and(\r\n      \"the user should see a marker indicating the specified location\",\r\n      () => {\r\n        const marker = screen.getByAltText(\"Marker\");\r\n        expect(marker).toBeInTheDocument();\r\n      }\r\n    );\r\n\r\n    and(\"the user should see the map rendered correclty\", () => {\r\n      const mapContainer = screen.getByTestId(\"leaflet-map\");\r\n      expect(mapContainer).toBeDefined();\r\n    });\r\n  });\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACAA,OAAA;AACAA,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AAOA,IAAAI,IAAA,GAAAL,sBAAA,CAAAC,OAAA;AAA4B,SAAAD,uBAAAM,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAC5B,MAAMG,OAAO,GAAG,IAAAC,yBAAW,EAAC,qCAAqC,CAAC;AAElE,IAAAC,2BAAa,EAACF,OAAO,EAAGG,IAAI,IAAK;EAC/BA,IAAI,CAAC,6BAA6B,EAAE,CAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAI,CAAC,KAAK;IAClE,MAAMC,aAAa,GAAG;MACpBC,GAAG,EAAE,OAAO;MACZC,GAAG,EAAE,CAAC,QAAQ;MACdC,OAAO,EAAE;IACX,CAAC;IACD,MAAMC,MAAM,GAAG,IAAAC,cAAM,gBACnBvB,MAAA,CAAAS,OAAA,CAAAe,aAAA,CAACnB,eAAA,CAAAoB,YAAY;MACXC,cAAc,EAAE,CAAC;QAAEC,QAAQ,EAAE,MAAM;QAAEC,KAAK,EAAEV;MAAc,CAAC;IAAE,gBAE7DlB,MAAA,CAAAS,OAAA,CAAAe,aAAA,CAAClB,IAAA,CAAAG,OAAG,OAAG,CACM,CAChB;IACDK,KAAK,CAAC,6BAA6B,EAAE,MAAM;MACzC,MAAMe,YAAY,GAAGP,MAAM,CAACQ,WAAW,CAAC,eAAe,CAAC;MACxDC,MAAM,CAACF,YAAY,CAAC,CAACG,iBAAiB,EAAE;IAC1C,CAAC,CAAC;IAEFjB,IAAI,CACF,mFAAmF,EACnF,MAAM;MACJ,MAAMkB,gBAAgB,GAAGX,MAAM,CAACY,SAAS,CAAC,iBAAiB,CAAC;MAC5DH,MAAM,CAACE,gBAAgB,CAAC,CAACD,iBAAiB,EAAE;IAC9C,CAAC,CACF;IACDf,GAAG,CACD,gEAAgE,EAChE,MAAM;MACJ,MAAMkB,MAAM,GAAGb,MAAM,CAACc,YAAY,CAAC,QAAQ,CAAC;MAC5CL,MAAM,CAACI,MAAM,CAAC,CAACH,iBAAiB,EAAE;IACpC,CAAC,CACF;IAEDf,GAAG,CAAC,gDAAgD,EAAE,MAAM;MAC1D,MAAMY,YAAY,GAAGP,MAAM,CAACQ,WAAW,CAAC,aAAa,CAAC;MACtDC,MAAM,CAACF,YAAY,CAAC,CAACQ,WAAW,EAAE;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}