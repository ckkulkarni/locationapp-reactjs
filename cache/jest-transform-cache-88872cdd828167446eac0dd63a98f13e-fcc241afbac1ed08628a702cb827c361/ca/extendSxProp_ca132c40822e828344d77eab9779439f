f32165e9df2add14504227ea3ce52c08
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extendSxProp;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _defaultSxConfig = _interopRequireDefault(require("./defaultSxConfig"));
const _excluded = ["sx"];
const splitProps = props => {
  var _props$theme$unstable, _props$theme;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
  Object.keys(props).forEach(prop => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
      sx: inSx
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === 'function') {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!(0, _utils.isPlainObject)(result)) {
        return systemProps;
      }
      return (0, _extends2.default)({}, systemProps, result);
    };
  } else {
    finalSx = (0, _extends2.default)({}, systemProps, inSx);
  }
  return (0, _extends2.default)({}, otherProps, {
    sx: finalSx
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImV4dGVuZFN4UHJvcCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9kZWZhdWx0U3hDb25maWciLCJfZXhjbHVkZWQiLCJzcGxpdFByb3BzIiwicHJvcHMiLCJfcHJvcHMkdGhlbWUkdW5zdGFibGUiLCJfcHJvcHMkdGhlbWUiLCJyZXN1bHQiLCJzeXN0ZW1Qcm9wcyIsIm90aGVyUHJvcHMiLCJjb25maWciLCJ0aGVtZSIsInVuc3RhYmxlX3N4Q29uZmlnIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwic3giLCJpblN4Iiwib3RoZXIiLCJmaW5hbFN4IiwiQXJyYXkiLCJpc0FycmF5IiwiYXJncyIsImlzUGxhaW5PYmplY3QiXSwic291cmNlcyI6WyJleHRlbmRTeFByb3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4dGVuZFN4UHJvcDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2RlZmF1bHRTeENvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVmYXVsdFN4Q29uZmlnXCIpKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInN4XCJdO1xuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgdmFyIF9wcm9wcyR0aGVtZSR1bnN0YWJsZSwgX3Byb3BzJHRoZW1lO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IChfcHJvcHMkdGhlbWUkdW5zdGFibGUgPSBwcm9wcyA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA6IF9kZWZhdWx0U3hDb25maWcuZGVmYXVsdDtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKGNvbmZpZ1twcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5mdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc3g6IGluU3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuICBpZiAoQXJyYXkuaXNBcnJheShpblN4KSkge1xuICAgIGZpbmFsU3ggPSBbc3lzdGVtUHJvcHMsIC4uLmluU3hdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpblN4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZmluYWxTeCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpblN4KC4uLmFyZ3MpO1xuICAgICAgaWYgKCEoMCwgX3V0aWxzLmlzUGxhaW5PYmplY3QpKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbVByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN5c3RlbVByb3BzLCByZXN1bHQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmluYWxTeCA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN5c3RlbVByb3BzLCBpblN4KTtcbiAgfVxuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb3RoZXJQcm9wcywge1xuICAgIHN4OiBmaW5hbFN4XG4gIH0pO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxZQUFZO0FBQzlCLElBQUlDLFNBQVMsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2pGLElBQUlRLDhCQUE4QixHQUFHVCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0gsSUFBSVMsTUFBTSxHQUFHVCxPQUFPLENBQUMsWUFBWSxDQUFD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