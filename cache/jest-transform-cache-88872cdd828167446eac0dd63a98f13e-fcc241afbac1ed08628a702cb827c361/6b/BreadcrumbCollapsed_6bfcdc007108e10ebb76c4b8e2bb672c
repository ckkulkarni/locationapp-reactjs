51cdc928237ec0d5b121fef67ef1d51a
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _system = require("@mui/system");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _MoreHoriz = _interopRequireDefault(require("../internal/svg-icons/MoreHoriz"));
var _ButtonBase = _interopRequireDefault(require("../ButtonBase"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["slots", "slotProps"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const BreadcrumbCollapsedButton = (0, _styled.default)(_ButtonBase.default)(({
  theme
}) => (0, _extends2.default)({
  display: 'flex',
  marginLeft: `calc(${theme.spacing(1)} * 0.5)`,
  marginRight: `calc(${theme.spacing(1)} * 0.5)`
}, theme.palette.mode === 'light' ? {
  backgroundColor: theme.palette.grey[100],
  color: theme.palette.grey[700]
} : {
  backgroundColor: theme.palette.grey[700],
  color: theme.palette.grey[100]
}, {
  borderRadius: 2,
  '&:hover, &:focus': (0, _extends2.default)({}, theme.palette.mode === 'light' ? {
    backgroundColor: theme.palette.grey[200]
  } : {
    backgroundColor: theme.palette.grey[600]
  }),
  '&:active': (0, _extends2.default)({
    boxShadow: theme.shadows[0]
  }, theme.palette.mode === 'light' ? {
    backgroundColor: (0, _system.emphasize)(theme.palette.grey[200], 0.12)
  } : {
    backgroundColor: (0, _system.emphasize)(theme.palette.grey[600], 0.12)
  })
}));
const BreadcrumbCollapsedIcon = (0, _styled.default)(_MoreHoriz.default)({
  width: 24,
  height: 16
});

/**
 * @ignore - internal component.
 */
function BreadcrumbCollapsed(props) {
  const {
      slots = {},
      slotProps = {}
    } = props,
    otherProps = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const ownerState = props;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("li", {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(BreadcrumbCollapsedButton, (0, _extends2.default)({
      focusRipple: true
    }, otherProps, {
      ownerState: ownerState,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(BreadcrumbCollapsedIcon, (0, _extends2.default)({
        as: slots.CollapsedIcon,
        ownerState: ownerState
      }, slotProps.collapsedIcon))
    }))
  });
}
process.env.NODE_ENV !== "production" ? BreadcrumbCollapsed.propTypes = {
  /**
   * The props used for the CollapsedIcon slot.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    collapsedIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the BreadcumbCollapsed.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    CollapsedIcon: _propTypes.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.object
} : void 0;
var _default = BreadcrumbCollapsed;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX3N5c3RlbSIsIl9zdHlsZWQiLCJfTW9yZUhvcml6IiwiX0J1dHRvbkJhc2UiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJCcmVhZGNydW1iQ29sbGFwc2VkQnV0dG9uIiwidGhlbWUiLCJkaXNwbGF5IiwibWFyZ2luTGVmdCIsInNwYWNpbmciLCJtYXJnaW5SaWdodCIsInBhbGV0dGUiLCJtb2RlIiwiYmFja2dyb3VuZENvbG9yIiwiZ3JleSIsImNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiYm94U2hhZG93Iiwic2hhZG93cyIsImVtcGhhc2l6ZSIsIkJyZWFkY3J1bWJDb2xsYXBzZWRJY29uIiwid2lkdGgiLCJoZWlnaHQiLCJCcmVhZGNydW1iQ29sbGFwc2VkIiwicHJvcHMiLCJzbG90cyIsInNsb3RQcm9wcyIsIm90aGVyUHJvcHMiLCJvd25lclN0YXRlIiwianN4IiwiY2hpbGRyZW4iLCJmb2N1c1JpcHBsZSIsImFzIiwiQ29sbGFwc2VkSWNvbiIsImNvbGxhcHNlZEljb24iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJzaGFwZSIsIm9uZU9mVHlwZSIsImZ1bmMiLCJvYmplY3QiLCJlbGVtZW50VHlwZSIsInN4IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJCcmVhZGNydW1iQ29sbGFwc2VkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX3N5c3RlbSA9IHJlcXVpcmUoXCJAbXVpL3N5c3RlbVwiKTtcbnZhciBfc3R5bGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3N0eWxlZFwiKSk7XG52YXIgX01vcmVIb3JpeiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL3N2Zy1pY29ucy9Nb3JlSG9yaXpcIikpO1xudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiXTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgQnJlYWRjcnVtYkNvbGxhcHNlZEJ1dHRvbiA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKF9CdXR0b25CYXNlLmRlZmF1bHQpKCh7XG4gIHRoZW1lXG59KSA9PiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5MZWZ0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMC41KWAsXG4gIG1hcmdpblJpZ2h0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMC41KWBcbn0sIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSxcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdXG59IDoge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLFxuICBjb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF1cbn0sIHtcbiAgYm9yZGVyUmFkaXVzOiAyLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVsyMDBdXG4gIH0gOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXVxuICB9KSxcbiAgJyY6YWN0aXZlJzogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzBdXG4gIH0sIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfc3lzdGVtLmVtcGhhc2l6ZSkodGhlbWUucGFsZXR0ZS5ncmV5WzIwMF0sIDAuMTIpXG4gIH0gOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX3N5c3RlbS5lbXBoYXNpemUpKHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdLCAwLjEyKVxuICB9KVxufSkpO1xuY29uc3QgQnJlYWRjcnVtYkNvbGxhcHNlZEljb24gPSAoMCwgX3N0eWxlZC5kZWZhdWx0KShfTW9yZUhvcml6LmRlZmF1bHQpKHtcbiAgd2lkdGg6IDI0LFxuICBoZWlnaHQ6IDE2XG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBCcmVhZGNydW1iQ29sbGFwc2VkKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBzbG90UHJvcHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlclByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHByb3BzO1xuICByZXR1cm4gLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwibGlcIiwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoQnJlYWRjcnVtYkNvbGxhcHNlZEJ1dHRvbiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb2N1c1JpcHBsZTogdHJ1ZVxuICAgIH0sIG90aGVyUHJvcHMsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKEJyZWFkY3J1bWJDb2xsYXBzZWRJY29uLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgYXM6IHNsb3RzLkNvbGxhcHNlZEljb24sXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICAgIH0sIHNsb3RQcm9wcy5jb2xsYXBzZWRJY29uKSlcbiAgICB9KSlcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCcmVhZGNydW1iQ29sbGFwc2VkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciB0aGUgQ29sbGFwc2VkSWNvbiBzbG90LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGNvbGxhcHNlZEljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCcmVhZGN1bWJDb2xsYXBzZWQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBDb2xsYXBzZWRJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gQnJlYWRjcnVtYkNvbGxhcHNlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsOEJBQThCLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMscURBQXFELENBQUMsQ0FBQztBQUMzSCxJQUFJTyxTQUFTLEdBQUdSLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJUSxLQUFLLEdBQUdDLHVCQUF1QixDQUFDVCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckQsSUFBSVUsVUFBVSxHQUFHWCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzlELElBQUlXLE9BQU8sR0FBR1gsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUNwQyxJQUFJWSxPQUFPLEdBQUdiLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNqRSxJQUFJYSxVQUFVLEdBQUdkLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNuRixJQUFJYyxX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