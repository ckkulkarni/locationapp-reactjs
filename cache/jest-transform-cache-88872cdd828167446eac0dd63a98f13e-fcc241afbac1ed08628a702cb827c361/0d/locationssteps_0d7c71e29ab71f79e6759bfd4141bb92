0bd11f410e5e55681558925d69d0604e
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
const mockGeolocation = {
  getCurrentPosition: jest.fn()
};
Object.defineProperty(global.navigator, "geolocation", {
  value: mockGeolocation,
  configurable: true
});
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Displaying Current Location", ({
    given,
    when,
    then
  }) => {
    const store = (0, _toolkit.configureStore)({
      reducer: {
        locationList: _locationSlice.default
      }
    });
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/map",
      element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
    })))));
    given("the user is on the Locations page", () => {
      expect(screen).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsIm1vY2tHZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsImplc3QiLCJmbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwibmF2aWdhdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJzdG9yZSIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsImxvY2F0aW9uTGlzdCIsImxvY2F0aW9uU2xpY2UiLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJNZW1vcnlSb3V0ZXIiLCJSb3V0ZXMiLCJSb3V0ZSIsInBhdGgiLCJlbGVtZW50IiwiZXhwZWN0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbImxvY2F0aW9ucy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yLCBhY3QgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCBsb2NhdGlvblNsaWNlLCB7XHJcbiAgYWRkUHJldmlvdXNMb2NhdGlvbixcclxuICBjbGVhclByZXZpb3VzTG9jYXRpb25zLFxyXG4gIHJlbW92ZVByZXZpb3VzTG9jYXRpb24sXHJcbiAgc2V0Q3VycmVudExvY2F0aW9uLFxyXG59IGZyb20gXCIuLy4uLy4uL3JlZHVjZXJzL3JlZHVjZXIvbG9jYXRpb25TbGljZVwiO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxyXG4gIFJvdXRlcyxcclxuICBSb3V0ZSxcclxuICBNZW1vcnlSb3V0ZXIsXHJcbn0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IExvY2F0aW9ucyBmcm9tIFwiLi4vLi4vTG9jYXRpb25zXCI7XHJcbmltcG9ydCBNYXAgZnJvbSBcIi4uLy4uL01hcFwiO1xyXG5cclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvbG9jYXRpb25zLmZlYXR1cmVcIik7XHJcbmNvbnN0IG1vY2tHZW9sb2NhdGlvbiA9IHtcclxuICBnZXRDdXJyZW50UG9zaXRpb246IGplc3QuZm4oKSxcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbC5uYXZpZ2F0b3IsIFwiZ2VvbG9jYXRpb25cIiwge1xyXG4gIHZhbHVlOiBtb2NrR2VvbG9jYXRpb24sXHJcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG59KTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJEaXNwbGF5aW5nIEN1cnJlbnQgTG9jYXRpb25cIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4gfSkgPT4ge1xyXG4gICAgY29uc3Qgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBsb2NhdGlvbkxpc3Q6IGxvY2F0aW9uU2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxNZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8TG9jYXRpb25zIC8+fSAvPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9tYXBcIiBlbGVtZW50PXs8TWFwIC8+fSAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgPC9NZW1vcnlSb3V0ZXI+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgTG9jYXRpb25zIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQUEsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssY0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBTUEsSUFBQU0sZUFBQSxHQUFBTixPQUFBO0FBTUEsSUFBQU8sVUFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVEsSUFBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBQTRCLFNBQUFELHVCQUFBVSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRTVCLE1BQU1HLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLDJDQUEyQyxDQUFDO0FBQ3hFLE1BQU1DLGVBQWUsR0FBRztFQUN0QkMsa0JBQWtCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRTtBQUM3QixDQUFDO0FBQ0RDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsRUFBRSxhQUFhLEVBQUU7RUFDckRDLEtBQUssRUFBRVIsZUFBZTtFQUN0QlMsWUFBWSxFQUFFO0FBQ2hCLENBQUMsQ0FBQztBQUNGLElBQUFDLDJCQUFhLEVBQUNaLE9BQU8sRUFBR2EsSUFBSSxJQUFLO0VBQy9CQSxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztJQUFFQyxLQUFLO0lBQUVDLElBQUk7SUFBRUM7RUFBSyxDQUFDLEtBQUs7SUFDN0QsTUFBTUMsS0FBSyxHQUFHLElBQUFDLHVCQUFjLEVBQUM7TUFDM0JDLE9BQU8sRUFBRTtRQUNQQyxZQUFZLEVBQUVDO01BQ2hCO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsTUFBTUMsTUFBTSxHQUFHLElBQUFDLGNBQU0sZ0JBQ25CckMsTUFBQSxDQUFBYSxPQUFBLENBQUF5QixhQUFBLENBQUNqQyxXQUFBLENBQUFrQyxRQUFRO01BQUNSLEtBQUssRUFBRUE7SUFBTSxnQkFDckIvQixNQUFBLENBQUFhLE9BQUEsQ0FBQXlCLGFBQUEsQ0FBQzlCLGVBQUEsQ0FBQWdDLFlBQVkscUJBQ1h4QyxNQUFBLENBQUFhLE9BQUEsQ0FBQXlCLGFBQUEsQ0FBQzlCLGVBQUEsQ0FBQWlDLE1BQU0scUJBQ0x6QyxNQUFBLENBQUFhLE9BQUEsQ0FBQXlCLGFBQUEsQ0FBQzlCLGVBQUEsQ0FBQWtDLEtBQUs7TUFBQ0MsSUFBSSxFQUFDLEdBQUc7TUFBQ0MsT0FBTyxlQUFFNUMsTUFBQSxDQUFBYSxPQUFBLENBQUF5QixhQUFBLENBQUM3QixVQUFBLENBQUFJLE9BQVM7SUFBSSxFQUFHLGVBQzFDYixNQUFBLENBQUFhLE9BQUEsQ0FBQXlCLGFBQUEsQ0FBQzlCLGVBQUEsQ0FBQWtDLEtBQUs7TUFBQ0MsSUFBSSxFQUFDLE1BQU07TUFBQ0MsT0FBTyxlQUFFNUMsTUFBQSxDQUFBYSxPQUFBLENBQUF5QixhQUFBLENBQUM1QixJQUFBLENBQUFHLE9BQUc7SUFBSSxFQUFHLENBQ2hDLENBQ0ksQ0FDTixDQUNaO0lBQ0RlLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNO01BQy9DaUIsTUFBTSxDQUFDVCxNQUFNLENBQUMsQ0FBQ1UsVUFBVSxFQUFFO0lBQzdCLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9