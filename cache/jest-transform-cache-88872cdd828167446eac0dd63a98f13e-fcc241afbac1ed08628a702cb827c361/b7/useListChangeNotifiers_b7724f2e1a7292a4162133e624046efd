96a7d92fce61181dfe07b7e1e2a395f6
"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useListChangeNotifiers = useListChangeNotifiers;
var React = _interopRequireWildcard(require("react"));
var _useMessageBus = require("../utils/useMessageBus");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const SELECTION_CHANGE_TOPIC = 'select:change-selection';
const HIGHLIGHT_CHANGE_TOPIC = 'select:change-highlight';
/**
 * @ignore - internal hook.
 *
 * This hook is used to notify any interested components about changes in the list's selection and highlight.
 */
function useListChangeNotifiers() {
  const messageBus = (0, _useMessageBus.useMessageBus)();
  const notifySelectionChanged = React.useCallback(newSelectedItems => {
    messageBus.publish(SELECTION_CHANGE_TOPIC, newSelectedItems);
  }, [messageBus]);
  const notifyHighlightChanged = React.useCallback(newHighlightedItem => {
    messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newHighlightedItem);
  }, [messageBus]);
  const registerSelectionChangeHandler = React.useCallback(handler => {
    return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);
  }, [messageBus]);
  const registerHighlightChangeHandler = React.useCallback(handler => {
    return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);
  }, [messageBus]);
  return {
    notifySelectionChanged,
    notifyHighlightChanged,
    registerSelectionChangeHandler,
    registerHighlightChangeHandler
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUxpc3RDaGFuZ2VOb3RpZmllcnMiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VNZXNzYWdlQnVzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTRUxFQ1RJT05fQ0hBTkdFX1RPUElDIiwiSElHSExJR0hUX0NIQU5HRV9UT1BJQyIsIm1lc3NhZ2VCdXMiLCJ1c2VNZXNzYWdlQnVzIiwibm90aWZ5U2VsZWN0aW9uQ2hhbmdlZCIsInVzZUNhbGxiYWNrIiwibmV3U2VsZWN0ZWRJdGVtcyIsInB1Ymxpc2giLCJub3RpZnlIaWdobGlnaHRDaGFuZ2VkIiwibmV3SGlnaGxpZ2h0ZWRJdGVtIiwicmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyIiwiaGFuZGxlciIsInN1YnNjcmliZSIsInJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciJdLCJzb3VyY2VzIjpbInVzZUxpc3RDaGFuZ2VOb3RpZmllcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIGNsaWVudCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnVzZUxpc3RDaGFuZ2VOb3RpZmllcnMgPSB1c2VMaXN0Q2hhbmdlTm90aWZpZXJzO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfdXNlTWVzc2FnZUJ1cyA9IHJlcXVpcmUoXCIuLi91dGlscy91c2VNZXNzYWdlQnVzXCIpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5jb25zdCBTRUxFQ1RJT05fQ0hBTkdFX1RPUElDID0gJ3NlbGVjdDpjaGFuZ2Utc2VsZWN0aW9uJztcbmNvbnN0IEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMgPSAnc2VsZWN0OmNoYW5nZS1oaWdobGlnaHQnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBUaGlzIGhvb2sgaXMgdXNlZCB0byBub3RpZnkgYW55IGludGVyZXN0ZWQgY29tcG9uZW50cyBhYm91dCBjaGFuZ2VzIGluIHRoZSBsaXN0J3Mgc2VsZWN0aW9uIGFuZCBoaWdobGlnaHQuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpc3RDaGFuZ2VOb3RpZmllcnMoKSB7XG4gIGNvbnN0IG1lc3NhZ2VCdXMgPSAoMCwgX3VzZU1lc3NhZ2VCdXMudXNlTWVzc2FnZUJ1cykoKTtcbiAgY29uc3Qgbm90aWZ5U2VsZWN0aW9uQ2hhbmdlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1NlbGVjdGVkSXRlbXMgPT4ge1xuICAgIG1lc3NhZ2VCdXMucHVibGlzaChTRUxFQ1RJT05fQ0hBTkdFX1RPUElDLCBuZXdTZWxlY3RlZEl0ZW1zKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgY29uc3Qgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld0hpZ2hsaWdodGVkSXRlbSA9PiB7XG4gICAgbWVzc2FnZUJ1cy5wdWJsaXNoKEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMsIG5ld0hpZ2hsaWdodGVkSXRlbSk7XG4gIH0sIFttZXNzYWdlQnVzXSk7XG4gIGNvbnN0IHJlZ2lzdGVyU2VsZWN0aW9uQ2hhbmdlSGFuZGxlciA9IFJlYWN0LnVzZUNhbGxiYWNrKGhhbmRsZXIgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlQnVzLnN1YnNjcmliZShTRUxFQ1RJT05fQ0hBTkdFX1RPUElDLCBoYW5kbGVyKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgY29uc3QgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soaGFuZGxlciA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2VCdXMuc3Vic2NyaWJlKEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMsIGhhbmRsZXIpO1xuICB9LCBbbWVzc2FnZUJ1c10pO1xuICByZXR1cm4ge1xuICAgIG5vdGlmeVNlbGVjdGlvbkNoYW5nZWQsXG4gICAgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZCxcbiAgICByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXIsXG4gICAgcmVnaXN0ZXJIaWdobGlnaHRDaGFuZ2VIYW5kbGVyXG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQ1osWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLHNCQUFzQixHQUFHQSxzQkFBc0I7QUFDdkQsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlDLGNBQWMsR0FBR0QsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQ3RELFNBQVNFLHdCQUF3QkEs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