8175f68e86ef1a34194b953872939f92
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineHooksSlotProps = combineHooksSlotProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
/**
 * Combines the two get*Props functions from Base UI hooks into one.
 * Useful when a hook uses two other hooks behind the scenes
 * (such as useSelect that depends on useList and useButton for its root slot).
 *
 * The resulting function will return the combined props.
 * They are merged from left to right, similarly to how Object.assign works.
 *
 * The getSecondProps function will receive the result of the getFirstProps function as its argument,
 * so its event handlers can call the previous handlers and act depending on its result.
 *
 * @param getFirstProps - A getter function that returns the props for the first slot. It receives the external event handlers as its argument.
 * @param getSecondProps - A getter function that returns the props for the second slot. It receives the result of the getFirstProps function as its argument.
 */
function combineHooksSlotProps(getFirstProps, getSecondProps) {
  return function getCombinedProps(external = {}) {
    const firstResult = (0, _extends2.default)({}, external, getFirstProps(external));
    const result = (0, _extends2.default)({}, firstResult, getSecondProps(firstResult));
    return result;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tYmluZUhvb2tzU2xvdFByb3BzIiwiX2V4dGVuZHMyIiwiZ2V0Rmlyc3RQcm9wcyIsImdldFNlY29uZFByb3BzIiwiZ2V0Q29tYmluZWRQcm9wcyIsImV4dGVybmFsIiwiZmlyc3RSZXN1bHQiLCJkZWZhdWx0IiwicmVzdWx0Il0sInNvdXJjZXMiOlsiY29tYmluZUhvb2tzU2xvdFByb3BzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbWJpbmVIb29rc1Nsb3RQcm9wcyA9IGNvbWJpbmVIb29rc1Nsb3RQcm9wcztcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuLyoqXG4gKiBDb21iaW5lcyB0aGUgdHdvIGdldCpQcm9wcyBmdW5jdGlvbnMgZnJvbSBCYXNlIFVJIGhvb2tzIGludG8gb25lLlxuICogVXNlZnVsIHdoZW4gYSBob29rIHVzZXMgdHdvIG90aGVyIGhvb2tzIGJlaGluZCB0aGUgc2NlbmVzXG4gKiAoc3VjaCBhcyB1c2VTZWxlY3QgdGhhdCBkZXBlbmRzIG9uIHVzZUxpc3QgYW5kIHVzZUJ1dHRvbiBmb3IgaXRzIHJvb3Qgc2xvdCkuXG4gKlxuICogVGhlIHJlc3VsdGluZyBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgY29tYmluZWQgcHJvcHMuXG4gKiBUaGV5IGFyZSBtZXJnZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LCBzaW1pbGFybHkgdG8gaG93IE9iamVjdC5hc3NpZ24gd29ya3MuXG4gKlxuICogVGhlIGdldFNlY29uZFByb3BzIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0IG9mIHRoZSBnZXRGaXJzdFByb3BzIGZ1bmN0aW9uIGFzIGl0cyBhcmd1bWVudCxcbiAqIHNvIGl0cyBldmVudCBoYW5kbGVycyBjYW4gY2FsbCB0aGUgcHJldmlvdXMgaGFuZGxlcnMgYW5kIGFjdCBkZXBlbmRpbmcgb24gaXRzIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0gZ2V0Rmlyc3RQcm9wcyAtIEEgZ2V0dGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcHJvcHMgZm9yIHRoZSBmaXJzdCBzbG90LiBJdCByZWNlaXZlcyB0aGUgZXh0ZXJuYWwgZXZlbnQgaGFuZGxlcnMgYXMgaXRzIGFyZ3VtZW50LlxuICogQHBhcmFtIGdldFNlY29uZFByb3BzIC0gQSBnZXR0ZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyBmb3IgdGhlIHNlY29uZCBzbG90LiBJdCByZWNlaXZlcyB0aGUgcmVzdWx0IG9mIHRoZSBnZXRGaXJzdFByb3BzIGZ1bmN0aW9uIGFzIGl0cyBhcmd1bWVudC5cbiAqL1xuZnVuY3Rpb24gY29tYmluZUhvb2tzU2xvdFByb3BzKGdldEZpcnN0UHJvcHMsIGdldFNlY29uZFByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRDb21iaW5lZFByb3BzKGV4dGVybmFsID0ge30pIHtcbiAgICBjb25zdCBmaXJzdFJlc3VsdCA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGV4dGVybmFsLCBnZXRGaXJzdFByb3BzKGV4dGVybmFsKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZmlyc3RSZXN1bHQsIGdldFNlY29uZFByb3BzKGZpcnN0UmVzdWx0KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLHFCQUFxQixHQUFHQSxxQkFBcUI7QUFDckQsSUFBSUMsU0FBUyxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNLLHFCQUFxQkEsQ0FBQ0UsYUFBYSxFQUFFQyxjQUFjLEVBQUU7RUFDNUQsT0FBTyxTQUFTQyxnQkFBZ0JBLENBQUNDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUM5QyxNQUFNQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUVMLFNBQVMsQ0FBQ00sT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRixRQUFRLEVBQUVILGFBQWEsQ0FBQ0csUUFBUSxDQUFDLENBQUM7SUFDakYsTUFBTUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFUCxTQUFTLENBQUNNLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUQsV0FBVyxFQUFFSCxjQUFjLENBQUNHLFdBQVcsQ0FBQyxDQUFDO0lBQ25GLE9BQU9FLE1BQU07RUFDZixDQUFDO0FBQ0gifQ==