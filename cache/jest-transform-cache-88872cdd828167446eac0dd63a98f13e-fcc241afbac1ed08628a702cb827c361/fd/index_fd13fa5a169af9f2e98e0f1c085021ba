f8f5533360ce6b0bd08beaca716d2939
/**
 * @mui/styled-engine v5.13.2
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GlobalStyles", {
  enumerable: true,
  get: function () {
    return _GlobalStyles.default;
  }
});
Object.defineProperty(exports, "StyledEngineProvider", {
  enumerable: true,
  get: function () {
    return _StyledEngineProvider.default;
  }
});
Object.defineProperty(exports, "ThemeContext", {
  enumerable: true,
  get: function () {
    return _react.ThemeContext;
  }
});
Object.defineProperty(exports, "css", {
  enumerable: true,
  get: function () {
    return _react.css;
  }
});
exports.default = styled;
exports.internal_processStyles = void 0;
Object.defineProperty(exports, "keyframes", {
  enumerable: true,
  get: function () {
    return _react.keyframes;
  }
});
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _react = require("@emotion/react");
var _StyledEngineProvider = _interopRequireDefault(require("./StyledEngineProvider"));
var _GlobalStyles = _interopRequireDefault(require("./GlobalStyles"));
/* eslint-disable no-underscore-dangle */

function styled(tag, options) {
  const stylesFactory = (0, _styled.default)(tag, options);
  if (process.env.NODE_ENV !== 'production') {
    return (...styles) => {
      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
      } else if (styles.some(style => style === undefined)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
const internal_processStyles = (tag, processor) => {
  // Emotion attaches all the styles as `__emotion_styles`.
  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
};
exports.internal_processStyles = internal_processStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9HbG9iYWxTdHlsZXMiLCJkZWZhdWx0IiwiX1N0eWxlZEVuZ2luZVByb3ZpZGVyIiwiX3JlYWN0IiwiVGhlbWVDb250ZXh0IiwiY3NzIiwic3R5bGVkIiwiaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyIsImtleWZyYW1lcyIsIl9zdHlsZWQiLCJ0YWciLCJvcHRpb25zIiwic3R5bGVzRmFjdG9yeSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInN0eWxlcyIsImNvbXBvbmVudCIsImxlbmd0aCIsImNvbnNvbGUiLCJlcnJvciIsImpvaW4iLCJzb21lIiwic3R5bGUiLCJ1bmRlZmluZWQiLCJwcm9jZXNzb3IiLCJBcnJheSIsImlzQXJyYXkiLCJfX2Vtb3Rpb25fc3R5bGVzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbXVpL3N0eWxlZC1lbmdpbmUgdjUuMTMuMlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHbG9iYWxTdHlsZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0dsb2JhbFN0eWxlcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0eWxlZEVuZ2luZVByb3ZpZGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9TdHlsZWRFbmdpbmVQcm92aWRlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRoZW1lQ29udGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVhY3QuVGhlbWVDb250ZXh0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNzc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVhY3QuY3NzO1xuICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0eWxlZDtcbmV4cG9ydHMuaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9IHZvaWQgMDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImtleWZyYW1lc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVhY3Qua2V5ZnJhbWVzO1xuICB9XG59KTtcbnZhciBfc3R5bGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVtb3Rpb24vc3R5bGVkXCIpKTtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwiQGVtb3Rpb24vcmVhY3RcIik7XG52YXIgX1N0eWxlZEVuZ2luZVByb3ZpZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdHlsZWRFbmdpbmVQcm92aWRlclwiKSk7XG52YXIgX0dsb2JhbFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2xvYmFsU3R5bGVzXCIpKTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbmZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKHRhZywgb3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICguLi5zdHlsZXMpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnID8gYFwiJHt0YWd9XCJgIDogJ2NvbXBvbmVudCc7XG4gICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBTZWVtcyBsaWtlIHlvdSBjYWxsZWQgXFxgc3R5bGVkKCR7Y29tcG9uZW50fSkoKVxcYCB3aXRob3V0IGEgXFxgc3R5bGVcXGAgYXJndW1lbnQuYCwgJ1lvdSBtdXN0IHByb3ZpZGUgYSBgc3R5bGVzYCBhcmd1bWVudDogYHN0eWxlZChcImRpdlwiKShzdHlsZVlvdUZvcmdvdFRvUGFzcylgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLnNvbWUoc3R5bGUgPT4gc3R5bGUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiB0aGUgc3R5bGVkKCR7Y29tcG9uZW50fSkoLi4uYXJncykgQVBJIHJlcXVpcmVzIGFsbCBpdHMgYXJncyB0byBiZSBkZWZpbmVkLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzdHlsZXNGYWN0b3J5O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5jb25zdCBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzID0gKHRhZywgcHJvY2Vzc29yKSA9PiB7XG4gIC8vIEVtb3Rpb24gYXR0YWNoZXMgYWxsIHRoZSBzdHlsZXMgYXMgYF9fZW1vdGlvbl9zdHlsZXNgLlxuICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8xNmQ5NzFkMGRhMjI5NTk2ZDZiY2MzOWQyODJiYTk3NTNjOWVlN2NmL3BhY2thZ2VzL3N0eWxlZC9zcmMvYmFzZS5qcyNMMTg2XG4gIGlmIChBcnJheS5pc0FycmF5KHRhZy5fX2Vtb3Rpb25fc3R5bGVzKSkge1xuICAgIHRhZy5fX2Vtb3Rpb25fc3R5bGVzID0gcHJvY2Vzc29yKHRhZy5fX2Vtb3Rpb25fc3R5bGVzKTtcbiAgfVxufTtcbmV4cG9ydHMuaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9IGludGVybmFsX3Byb2Nlc3NTdHlsZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGSCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLGNBQWMsRUFBRTtFQUM3Q0UsVUFBVSxFQUFFLElBQUk7RUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7SUFDZixPQUFPQyxhQUFhLENBQUNDLE9BQU87RUFDOUI7QUFDRixDQUFDLENBQUM7QUFDRlAsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRTtFQUNyREUsVUFBVSxFQUFFLElBQUk7RUFDaEJDLEdBQUcsRUFBRSxT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