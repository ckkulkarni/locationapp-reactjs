1d420065646d903e72d6e2c18c4a8bef
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
    i = 0,
    len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k = /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array

  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h = /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.

  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}
exports["default"] = murmur2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm11cm11cjIiLCJzdHIiLCJoIiwiayIsImkiLCJsZW4iLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciXSwic291cmNlcyI6WyJlbW90aW9uLWhhc2guY2pzLmRldi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG11cm11cjI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3BCO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0VBRVgsSUFBSUMsQ0FBQztJQUNEQyxDQUFDLEdBQUcsQ0FBQztJQUNMQyxHQUFHLEdBQUdKLEdBQUcsQ0FBQ0ssTUFBTTtFQUVwQixPQUFPRCxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUVELENBQUMsRUFBRUMsR0FBRyxJQUFJLENBQUMsRUFBRTtJQUM5QkYsQ0FBQyxHQUFHRixHQUFHLENBQUNNLFVBQVUsQ0FBQ0gsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUNILEdBQUcsQ0FBQ00sVUFBVSxDQUFDLEVBQUVILENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDTSxVQUFVLENBQUMsRUFBRUgsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxDQUFDSCxHQUFHLENBQUNNLFVBQVUsQ0FBQyxFQUFFSCxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRTtJQUMxSUQsQ0FBQyxHQUNEO0lBQ0EsQ0FBQ0EsQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksQ0FBQ0EsQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3ZEQSxDQUFDLElBQ0Q7SUFDQUEsQ0FBQyxLQUFLLEVBQUU7SUFDUkQsQ0FBQyxHQUNEO0lBQ0EsQ0FBQ0MsQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksQ0FBQ0EsQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDLEdBQ3ZEO0lBQ0EsQ0FBQ0QsQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksQ0FBQ0EsQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDO0VBQ3pELENBQUMsQ0FBQzs7RUFHRixRQUFRRyxHQUFHO0lBQ1QsS0FBSyxDQUFDO01BQ0pILENBQUMsSUFBSSxDQUFDRCxHQUFHLENBQUNNLFVBQVUsQ0FBQ0gsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFFO0lBRTNDLEtBQUssQ0FBQztNQUNKRixDQUFDLElBQUksQ0FBQ0QsR0FBRyxDQUFDTSxVQUFVLENBQUNILENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQztJQUUxQyxLQUFLLENBQUM7TUFDSkYsQ0FBQyxJQUFJRCxHQUFHLENBQUNNLFVBQVUsQ0FBQ0gsQ0FBQyxDQUFDLEdBQUcsSUFBSTtNQUM3QkYsQ0FBQyxHQUNEO01BQ0EsQ0FBQ0EsQ0FBQyxHQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksQ0FBQ0EsQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDO0VBQUMsQ0FDM0QsQ0FBQztFQUNGOztFQUdBQSxDQUFDLElBQUlBLENBQUMsS0FBSyxFQUFFO0VBQ2JBLENBQUMsR0FDRDtFQUNBLENBQUNBLENBQUMsR0FBRyxNQUFNLElBQUksVUFBVSxJQUFJLENBQUNBLENBQUMsS0FBSyxFQUFFLElBQUksTUFBTSxJQUFJLEVBQUUsQ0FBQztFQUN2RCxPQUFPLENBQUMsQ0FBQ0EsQ0FBQyxHQUFHQSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRU0sUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUM1QztBQUVBVixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUdFLE9BQU8ifQ==