d55f61cb7c7ef649ecd52023f51822d7
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Unstable_Grid = require("@mui/system/Unstable_Grid");
var _styles = require("../styles");
const Grid2 = (0, _Unstable_Grid.createGrid)({
  createStyledComponent: (0, _styles.styled)('div', {
    name: 'MuiGrid2',
    slot: 'Root',
    overridesResolver: (props, styles) => styles.root
  }),
  componentName: 'MuiGrid2',
  useThemeProps: inProps => (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiGrid2'
  })
});
process.env.NODE_ENV !== "production" ? Grid2.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;
var _default = Grid2;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfVW5zdGFibGVfR3JpZCIsIl9zdHlsZXMiLCJHcmlkMiIsImNyZWF0ZUdyaWQiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJzdHlsZWQiLCJuYW1lIiwic2xvdCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwicHJvcHMiLCJzdHlsZXMiLCJyb290IiwiY29tcG9uZW50TmFtZSIsInVzZVRoZW1lUHJvcHMiLCJpblByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwiY2hpbGRyZW4iLCJub2RlIiwic3giLCJvbmVPZlR5cGUiLCJhcnJheU9mIiwiZnVuYyIsIm9iamVjdCIsImJvb2wiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkdyaWQyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9VbnN0YWJsZV9HcmlkID0gcmVxdWlyZShcIkBtdWkvc3lzdGVtL1Vuc3RhYmxlX0dyaWRcIik7XG52YXIgX3N0eWxlcyA9IHJlcXVpcmUoXCIuLi9zdHlsZXNcIik7XG5jb25zdCBHcmlkMiA9ICgwLCBfVW5zdGFibGVfR3JpZC5jcmVhdGVHcmlkKSh7XG4gIGNyZWF0ZVN0eWxlZENvbXBvbmVudDogKDAsIF9zdHlsZXMuc3R5bGVkKSgnZGl2Jywge1xuICAgIG5hbWU6ICdNdWlHcmlkMicsXG4gICAgc2xvdDogJ1Jvb3QnLFxuICAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3RcbiAgfSksXG4gIGNvbXBvbmVudE5hbWU6ICdNdWlHcmlkMicsXG4gIHVzZVRoZW1lUHJvcHM6IGluUHJvcHMgPT4gKDAsIF9zdHlsZXMudXNlVGhlbWVQcm9wcykoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlHcmlkMidcbiAgfSlcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZDIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xdKSksIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSBHcmlkMjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTtBQUNaLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsVUFBVSxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzlELElBQUlPLGNBQWMsR0FBR1AsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3pELElBQUlRLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNsQyxNQUFNUyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVGLGNBQWMsQ0FBQ0csVUFBVSxFQUFFO0VBQzNDQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsRUFBRUgsT0FBTyxDQUFDSSxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQ2hEQyxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsSUFBSSxFQUFFLE1BQU07SUFDWkMsaUJBQWlCLEVBQUVBLENBQUNDLEtBQUssRUFBRUMsTUFBTSxLQUFLQSxNQUFNLENBQUNDO0VBQy9DLENBQUMsQ0FBQztFQUNGQyxhQUFhLEVBQUUsVUFBVTtFQUN6QkMsYUFBYSxFQUFFQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUViLE9BQU8sQ0FBQ1ksYUFBYSxFQUFFO0lBQ25ESixLQUFLLEVBQUVLLE9BQU87SUFDZFIsSUFBSSxFQUFFO0VBQ1IsQ0FBQztBQUNILENBQUMsQ0FBQztBQUNGUyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksR0FBR2YsS0FBSyxDQUFDZ0IsU0FBUyxDQUFDLHlCQUF5QjtFQUMvRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0Y7QUFDQTtFQUNFQyxRQUFRLEVBQUVwQixVQUFVLENBQUNELE9BQU8sQ0FBQ3NCLElBQUk7RUFDakM7QUFDRjtBQUNBO0VBQ0VDLEVBQUUsRUFBRXRCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDd0IsU0FBUyxDQUFDLENBQUN2QixVQUFVLENBQUNELE9BQU8sQ0FBQ3lCLE9BQU8sQ0FBQ3hCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDd0IsU0FBUyxDQUFDLENBQUN2QixVQUFVLENBQUNELE9BQU8sQ0FBQzBCLElBQUksRUFBRXpCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDMkIsTUFBTSxFQUFFMUIsVUFBVSxDQUFDRCxPQUFPLENBQUM0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUzQixVQUFVLENBQUNELE9BQU8sQ0FBQzBCLElBQUksRUFBRXpCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDMkIsTUFBTSxDQUFDO0FBQ2hPLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDVixJQUFJRSxRQUFRLEdBQUd6QixLQUFLO0FBQ3BCTixPQUFPLENBQUNFLE9BQU8sR0FBRzZCLFFBQVEifQ==