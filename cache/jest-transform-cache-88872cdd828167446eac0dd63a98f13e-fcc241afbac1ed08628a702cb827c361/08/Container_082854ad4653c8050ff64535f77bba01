fca17fd30e688e1a348b49dbb20b6eef
"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _system = require("@mui/system");
var _capitalize = _interopRequireDefault(require("../utils/capitalize"));
var _styled = _interopRequireDefault(require("../styles/styled"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
const Container = (0, _system.createContainer)({
  createStyledComponent: (0, _styled.default)('div', {
    name: 'MuiContainer',
    slot: 'Root',
    overridesResolver: (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, styles[`maxWidth${(0, _capitalize.default)(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
    }
  }),
  useThemeProps: inProps => (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiContainer'
  })
});
process.env.NODE_ENV !== "production" ? Container.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: _propTypes.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: _propTypes.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;
var _default = Container;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfc3lzdGVtIiwiX2NhcGl0YWxpemUiLCJfc3R5bGVkIiwiX3VzZVRoZW1lUHJvcHMiLCJDb250YWluZXIiLCJjcmVhdGVDb250YWluZXIiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJuYW1lIiwic2xvdCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwicHJvcHMiLCJzdHlsZXMiLCJvd25lclN0YXRlIiwicm9vdCIsIlN0cmluZyIsIm1heFdpZHRoIiwiZml4ZWQiLCJkaXNhYmxlR3V0dGVycyIsInVzZVRoZW1lUHJvcHMiLCJpblByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwiY2hpbGRyZW4iLCJub2RlIiwiY2xhc3NlcyIsIm9iamVjdCIsImNvbXBvbmVudCIsImVsZW1lbnRUeXBlIiwiYm9vbCIsIm9uZU9mVHlwZSIsIm9uZU9mIiwic3RyaW5nIiwic3giLCJhcnJheU9mIiwiZnVuYyIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQ29udGFpbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9zeXN0ZW0gPSByZXF1aXJlKFwiQG11aS9zeXN0ZW1cIik7XG52YXIgX2NhcGl0YWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jYXBpdGFsaXplXCIpKTtcbnZhciBfc3R5bGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3N0eWxlZFwiKSk7XG52YXIgX3VzZVRoZW1lUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvdXNlVGhlbWVQcm9wc1wiKSk7XG5jb25zdCBDb250YWluZXIgPSAoMCwgX3N5c3RlbS5jcmVhdGVDb250YWluZXIpKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnZGl2Jywge1xuICAgIG5hbWU6ICdNdWlDb250YWluZXInLFxuICAgIHNsb3Q6ICdSb290JyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSA9IHByb3BzO1xuICAgICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2BtYXhXaWR0aCR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZml4ZWQgJiYgc3R5bGVzLmZpeGVkLCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gICAgfVxuICB9KSxcbiAgdXNlVGhlbWVQcm9wczogaW5Qcm9wcyA9PiAoMCwgX3VzZVRoZW1lUHJvcHMuZGVmYXVsdCkoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDb250YWluZXInXG4gIH0pXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZpeGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSkpLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gQ29udGFpbmVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZO0FBQ1osWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxVQUFVLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsSUFBSU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3BDLElBQUlRLFdBQVcsR0FBR1Qsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3hFLElBQUlTLE9BQU8sR0FBR1Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2pFLElBQUlVLGNBQWMsR0FBR1gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQy9FLE1BQU1XLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRUosT0FBTyxDQUFDSyxlQUFlLEVBQUU7RUFDN0NDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxFQUFFSixPQUFPLENBQUNKLE9BQU8sRUFBRSxLQUFLLEVBQUU7SUFDakRTLElBQUksRUFBRSxjQUFjO0lBQ3BCQyxJQUFJLEVBQUUsTUFBTTtJQUNaQyxpQkFBaUIsRUFBRUEsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEtBQUs7TUFDcEMsTUFBTTtRQUNKQztNQUNGLENBQUMsR0FBR0YsS0FBSztNQUNULE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxJQUFJLEVBQUVGLE1BQU0sQ0FBRSxXQUFVLENBQUMsQ0FBQyxFQUFFVixXQUFXLENBQUNILE9BQU8sRUFBRWdCLE1BQU0sQ0FBQ0YsVUFBVSxDQUFDRyxRQUFRLENBQUMsQ0FBRSxFQUFDLENBQUMsRUFBRUgsVUFBVSxDQUFDSSxLQUFLLElBQUlMLE1BQU0sQ0FBQ0ssS0FBSyxFQUFFSixVQUFVLENBQUNLLGNBQWMsSUFBSU4sTUFBTSxDQUFDTSxjQUFjLENBQUM7SUFDeEw7RUFDRixDQUFDLENBQUM7RUFDRkMsYUFBYSxFQUFFQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUVoQixjQUFjLENBQUNMLE9BQU8sRUFBRTtJQUNwRFksS0FBSyxFQUFFUyxPQUFPO0lBQ2RaLElBQUksRUFBRTtFQUNSLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRmEsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEdBQUdsQixTQUFTLENBQUNtQixTQUFTLENBQUMseUJBQXlCO0VBQ25GO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRjtBQUNBO0VBQ0VDLFFBQVEsRUFBRXpCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDMkIsSUFBSTtFQUNqQztBQUNGO0FBQ0E7RUFDRUMsT0FBTyxFQUFFM0IsVUFBVSxDQUFDRCxPQUFPLENBQUM2QixNQUFNO0VBQ2xDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VDLFNBQVMsRUFBRTdCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDK0IsV0FBVztFQUN6QztBQUNGO0FBQ0E7QUFDQTtFQUNFWixjQUFjLEVBQUVsQixVQUFVLENBQUNELE9BQU8sQ0FBQ2dDLElBQUk7RUFDdkM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRWQsS0FBSyxFQUFFakIsVUFBVSxDQUFDRCxPQUFPLENBQUNnQyxJQUFJO0VBQzlCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFZixRQUFRLEVBQUVoQixVQUFVLENBQUNELE9BQU8sQ0FBQyxzQ0FBc0NpQyxTQUFTLENBQUMsQ0FBQ2hDLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDa0MsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFakMsVUFBVSxDQUFDRCxPQUFPLENBQUNtQyxNQUFNLENBQUMsQ0FBQztFQUMxSztBQUNGO0FBQ0E7RUFDRUMsRUFBRSxFQUFFbkMsVUFBVSxDQUFDRCxPQUFPLENBQUNpQyxTQUFTLENBQUMsQ0FBQ2hDLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDcUMsT0FBTyxDQUFDcEMsVUFBVSxDQUFDRCxPQUFPLENBQUNpQyxTQUFTLENBQUMsQ0FBQ2hDLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDc0MsSUFBSSxFQUFFckMsVUFBVSxDQUFDRCxPQUFPLENBQUM2QixNQUFNLEVBQUU1QixVQUFVLENBQUNELE9BQU8sQ0FBQ2dDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRS9CLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDc0MsSUFBSSxFQUFFckMsVUFBVSxDQUFDRCxPQUFPLENBQUM2QixNQUFNLENBQUM7QUFDaE8sQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNWLElBQUlVLFFBQVEsR0FBR2pDLFNBQVM7QUFDeEJSLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHdUMsUUFBUSJ9