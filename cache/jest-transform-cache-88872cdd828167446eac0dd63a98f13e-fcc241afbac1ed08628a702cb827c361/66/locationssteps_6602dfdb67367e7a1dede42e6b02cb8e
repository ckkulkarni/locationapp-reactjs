e826e2df72feb3212e2820c48e409a73
"use strict";

_getJestObj().mock("axios");
var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _locationSlice = _interopRequireDefault(require("./../../reducers/reducer/locationSlice"));
var _reactRouterDom = require("react-router-dom");
var _Locations = _interopRequireDefault(require("../../Locations"));
var _Map = _interopRequireDefault(require("../../Map"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/locations.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  const store = (0, _toolkit.configureStore)({
    reducer: {
      locationList: _locationSlice.default
    }
  });
  const mockPosition = {
    coords: {
      latitude: 37.7749,
      longitude: -122.4194
    }
  };
  const mockAddressResponse = {
    data: {
      results: [{
        formatted_address: "123 Street, Hyd"
      }]
    }
  };
  _axios.default.get.mockResolvedValueOnce(mockAddressResponse);
  const mockGeolocation = {
    getCurrentPosition: jest.fn(successCallback => {
      successCallback(mockPosition);
    })
  };
  Object.defineProperty(global.navigator, "geolocation", {
    value: mockGeolocation,
    configurable: true
  });
  const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
    initialEntries: ["/"]
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: "/",
    element: /*#__PURE__*/_react.default.createElement(_Locations.default, null)
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: "/map",
    element: /*#__PURE__*/_react.default.createElement(_Map.default, null)
  })))));
  test("Displaying Current Location", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Locations page", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen).toBeDefined();
        const locationsContainer = screen.getByTestId("location-container");
        expect(locationsContainer).toBeInTheDocument();
      });
    });
    when("the page loads", () => {
      expect(screen).toBeDefined();
    });
    then("the user should see Current Location address", () => {
      expect(screen.getByText("Current Location")).toBeInTheDocument();
      expect(screen.getByText("123 Street, Hyd")).toBeInTheDocument();
    });
    and("the user should see the date and time of the current location", () => {
      const currentDateTime = new Date().toLocaleString();
      expect(screen.getByText(currentDateTime)).toBeInTheDocument();
    });
    and('the user should see a "Clear All Locations" button', () => {
      const clearAllButton = screen.getByRole("button", {
        name: "Clear All Locations"
      });
    });
  });
  test("Displaying Previous Locations", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Locations page", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen).toBeDefined();
        const locationsContainer = screen.getByTestId("location-container");
        expect(locationsContainer).toBeInTheDocument();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9sb2NhdGlvblNsaWNlIiwiX3JlYWN0Um91dGVyRG9tIiwiX0xvY2F0aW9ucyIsIl9NYXAiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsInN0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJyZWR1Y2VyIiwibG9jYXRpb25MaXN0IiwibG9jYXRpb25TbGljZSIsIm1vY2tQb3NpdGlvbiIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibW9ja0FkZHJlc3NSZXNwb25zZSIsImRhdGEiLCJyZXN1bHRzIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJheGlvcyIsImdldCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsIm1vY2tHZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsImZuIiwic3VjY2Vzc0NhbGxiYWNrIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnbG9iYWwiLCJuYXZpZ2F0b3IiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsInNjcmVlbiIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIk1lbW9yeVJvdXRlciIsImluaXRpYWxFbnRyaWVzIiwiUm91dGVzIiwiUm91dGUiLCJwYXRoIiwiZWxlbWVudCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJsb2NhdGlvbnNDb250YWluZXIiLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QnlUZXh0IiwiY3VycmVudERhdGVUaW1lIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiY2xlYXJBbGxCdXR0b24iLCJnZXRCeVJvbGUiLCJuYW1lIl0sInNvdXJjZXMiOlsibG9jYXRpb25zLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IsIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IGxvY2F0aW9uU2xpY2UsIHtcclxuICBhZGRQcmV2aW91c0xvY2F0aW9uLFxyXG4gIGNsZWFyUHJldmlvdXNMb2NhdGlvbnMsXHJcbiAgcmVtb3ZlUHJldmlvdXNMb2NhdGlvbixcclxuICBzZXRDdXJyZW50TG9jYXRpb24sXHJcbn0gZnJvbSBcIi4vLi4vLi4vcmVkdWNlcnMvcmVkdWNlci9sb2NhdGlvblNsaWNlXCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgTG9jYXRpb25zIGZyb20gXCIuLi8uLi9Mb2NhdGlvbnNcIjtcclxuaW1wb3J0IE1hcCBmcm9tIFwiLi4vLi4vTWFwXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuamVzdC5tb2NrKFwiYXhpb3NcIik7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2xvY2F0aW9ucy5mZWF0dXJlXCIpO1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgcmVkdWNlcjoge1xyXG4gICAgICBsb2NhdGlvbkxpc3Q6IGxvY2F0aW9uU2xpY2UsXHJcbiAgICB9LFxyXG4gIH0pO1xyXG4gIGNvbnN0IG1vY2tQb3NpdGlvbiA9IHtcclxuICAgIGNvb3Jkczoge1xyXG4gICAgICBsYXRpdHVkZTogMzcuNzc0OSxcclxuICAgICAgbG9uZ2l0dWRlOiAtMTIyLjQxOTQsXHJcbiAgICB9LFxyXG4gIH07XHJcbiAgY29uc3QgbW9ja0FkZHJlc3NSZXNwb25zZSA9IHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgcmVzdWx0czogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZvcm1hdHRlZF9hZGRyZXNzOiBcIjEyMyBTdHJlZXQsIEh5ZFwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIChheGlvcy5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0FkZHJlc3NSZXNwb25zZSk7XHJcbiAgY29uc3QgbW9ja0dlb2xvY2F0aW9uID0ge1xyXG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKChzdWNjZXNzQ2FsbGJhY2spID0+IHtcclxuICAgICAgc3VjY2Vzc0NhbGxiYWNrKG1vY2tQb3NpdGlvbik7XHJcbiAgICB9KSxcclxuICB9O1xyXG5cclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLm5hdmlnYXRvciwgXCJnZW9sb2NhdGlvblwiLCB7XHJcbiAgICB2YWx1ZTogbW9ja0dlb2xvY2F0aW9uLFxyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgPE1lbW9yeVJvdXRlciBpbml0aWFsRW50cmllcz17W1wiL1wiXX0+XHJcbiAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxMb2NhdGlvbnMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9tYXBcIiBlbGVtZW50PXs8TWFwIC8+fSAvPlxyXG4gICAgICAgIDwvUm91dGVzPlxyXG4gICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgIDwvUHJvdmlkZXI+XHJcbiAgKTtcclxuICB0ZXN0KFwiRGlzcGxheWluZyBDdXJyZW50IExvY2F0aW9uXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBpcyBvbiB0aGUgTG9jYXRpb25zIHBhZ2VcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uc0NvbnRhaW5lciA9IHNjcmVlbi5nZXRCeVRlc3RJZChcImxvY2F0aW9uLWNvbnRhaW5lclwiKTtcclxuICAgICAgICBleHBlY3QobG9jYXRpb25zQ29udGFpbmVyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgd2hlbihcInRoZSBwYWdlIGxvYWRzXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB1c2VyIHNob3VsZCBzZWUgQ3VycmVudCBMb2NhdGlvbiBhZGRyZXNzXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJDdXJyZW50IExvY2F0aW9uXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIjEyMyBTdHJlZXQsIEh5ZFwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGUgZGF0ZSBhbmQgdGltZSBvZiB0aGUgY3VycmVudCBsb2NhdGlvblwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnREYXRlVGltZSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoY3VycmVudERhdGVUaW1lKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG4gICAgYW5kKCd0aGUgdXNlciBzaG91bGQgc2VlIGEgXCJDbGVhciBBbGwgTG9jYXRpb25zXCIgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjbGVhckFsbEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoXCJidXR0b25cIiwge1xyXG4gICAgICAgIG5hbWU6IFwiQ2xlYXIgQWxsIExvY2F0aW9uc1wiLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJEaXNwbGF5aW5nIFByZXZpb3VzIExvY2F0aW9uc1wiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiwgYW5kIH0pID0+IHtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaXMgb24gdGhlIExvY2F0aW9ucyBwYWdlXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbnNDb250YWluZXIgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJsb2NhdGlvbi1jb250YWluZXJcIik7XHJcbiAgICAgICAgZXhwZWN0KGxvY2F0aW9uc0NvbnRhaW5lciku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